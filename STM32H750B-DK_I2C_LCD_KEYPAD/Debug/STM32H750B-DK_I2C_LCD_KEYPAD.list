
STM32H750B-DK_I2C_LCD_KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcdc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800bf74  0800bf74  0000cf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bff8  0800bff8  0000cff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c000  0800c000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c004  0800c004  0000d004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800c008  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800c01c  0000e014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800c07c  0000e074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  240000d4  0800c0dc  0000e0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000c5c  0800c0dc  0000ec5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b196  00000000  00000000  0000e102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004059  00000000  00000000  00039298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0003d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018ce  00000000  00000000  0003f2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e77f  00000000  00000000  00040b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027dd4  00000000  00000000  0007f2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00190009  00000000  00000000  000a70d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002370da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ca8  00000000  00000000  00237120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0023fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bf5c 	.word	0x0800bf5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	0800bf5c 	.word	0x0800bf5c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <lcd_send_cmd>:
/* USER CODE BEGIN 0 */

int SLAVE_ADDRESS_LCD = 0x4F;

void lcd_send_cmd (char cmd)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  data_u = (cmd&0xf0);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f023 030f 	bic.w	r3, r3, #15
 80005d8:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4)&0xf0);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	011b      	lsls	r3, r3, #4
 80005de:	73bb      	strb	r3, [r7, #14]
  uint8_t data_t[4];
  data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f043 030c 	orr.w	r3, r3, #12
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	f043 030c 	orr.w	r3, r3, #12
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	b2db      	uxtb	r3, r3
 8000606:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <lcd_send_cmd+0x60>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b299      	uxth	r1, r3
 800060e:	f107 0208 	add.w	r2, r7, #8
 8000612:	2364      	movs	r3, #100	@ 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2304      	movs	r3, #4
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <lcd_send_cmd+0x64>)
 800061a:	f004 feb3 	bl	8005384 <HAL_I2C_Master_Transmit>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	24000000 	.word	0x24000000
 800062c:	24000444 	.word	0x24000444

08000630 <lcd_send_data>:


void lcd_send_data (char data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	f043 030d 	orr.w	r3, r3, #13
 800064e:	b2db      	uxtb	r3, r3
 8000650:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	f043 0309 	orr.w	r3, r3, #9
 8000658:	b2db      	uxtb	r3, r3
 800065a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 800065c:	7bbb      	ldrb	r3, [r7, #14]
 800065e:	f043 030d 	orr.w	r3, r3, #13
 8000662:	b2db      	uxtb	r3, r3
 8000664:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	f043 0309 	orr.w	r3, r3, #9
 800066c:	b2db      	uxtb	r3, r3
 800066e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <lcd_send_data+0x60>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	b299      	uxth	r1, r3
 8000676:	f107 0208 	add.w	r2, r7, #8
 800067a:	2364      	movs	r3, #100	@ 0x64
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2304      	movs	r3, #4
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <lcd_send_data+0x64>)
 8000682:	f004 fe7f 	bl	8005384 <HAL_I2C_Master_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	24000000 	.word	0x24000000
 8000694:	24000444 	.word	0x24000444

08000698 <lcd_init>:

void lcd_init (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  // 4 bit initialisation
  HAL_Delay(50);  // wait for >40ms
 800069c:	2032      	movs	r0, #50	@ 0x32
 800069e:	f002 fa83 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x30);
 80006a2:	2030      	movs	r0, #48	@ 0x30
 80006a4:	f7ff ff90 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(5);  // wait for >4.1ms
 80006a8:	2005      	movs	r0, #5
 80006aa:	f002 fa7d 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x30);
 80006ae:	2030      	movs	r0, #48	@ 0x30
 80006b0:	f7ff ff8a 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(1);  // wait for >100us
 80006b4:	2001      	movs	r0, #1
 80006b6:	f002 fa77 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x30);
 80006ba:	2030      	movs	r0, #48	@ 0x30
 80006bc:	f7ff ff84 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f002 fa71 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x20);  // 4bit mode
 80006c6:	2020      	movs	r0, #32
 80006c8:	f7ff ff7e 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(10);
 80006cc:	200a      	movs	r0, #10
 80006ce:	f002 fa6b 	bl	8002ba8 <HAL_Delay>

  // display initialisation
  lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006d2:	2028      	movs	r0, #40	@ 0x28
 80006d4:	f7ff ff78 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f002 fa65 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006de:	2008      	movs	r0, #8
 80006e0:	f7ff ff72 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f002 fa5f 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x01);  // clear display
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff6c 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(2);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f002 fa59 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006f6:	2006      	movs	r0, #6
 80006f8:	f7ff ff66 	bl	80005c8 <lcd_send_cmd>
  HAL_Delay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 fa53 	bl	8002ba8 <HAL_Delay>
  lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff ff60 	bl	80005c8 <lcd_send_cmd>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    switch (row)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <lcd_put_cur+0x18>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d005      	beq.n	800072e <lcd_put_cur+0x22>
 8000722:	e009      	b.n	8000738 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072a:	603b      	str	r3, [r7, #0]
            break;
 800072c:	e004      	b.n	8000738 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000734:	603b      	str	r3, [r7, #0]
            break;
 8000736:	bf00      	nop
    }
    lcd_send_cmd (col);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff43 	bl	80005c8 <lcd_send_cmd>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <read_keypad>:
{
  while (*str) lcd_send_data (*str++);
}


void read_keypad(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

	  // First row
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000756:	48be      	ldr	r0, [pc, #760]	@ (8000a50 <read_keypad+0x304>)
 8000758:	f004 fd5e 	bl	8005218 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	48bb      	ldr	r0, [pc, #748]	@ (8000a50 <read_keypad+0x304>)
 8000762:	f004 fd59 	bl	8005218 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800076c:	48b9      	ldr	r0, [pc, #740]	@ (8000a54 <read_keypad+0x308>)
 800076e:	f004 fd53 	bl	8005218 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	48b8      	ldr	r0, [pc, #736]	@ (8000a58 <read_keypad+0x30c>)
 8000778:	f004 fd4e 	bl	8005218 <HAL_GPIO_WritePin>


	  if ((HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == GPIO_PIN_SET))   // if the Col 1 is low
 800077c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000780:	48b6      	ldr	r0, [pc, #728]	@ (8000a5c <read_keypad+0x310>)
 8000782:	f004 fd31 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10b      	bne.n	80007a4 <read_keypad+0x58>
	  {
	  	while ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_8)== GPIO_PIN_SET));   // wait till the button is pressed
 800078c:	bf00      	nop
 800078e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000792:	48b2      	ldr	r0, [pc, #712]	@ (8000a5c <read_keypad+0x310>)
 8000794:	f004 fd28 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d0f7      	beq.n	800078e <read_keypad+0x42>
	  	lcd_send_data('1');
 800079e:	2031      	movs	r0, #49	@ 0x31
 80007a0:	f7ff ff46 	bl	8000630 <lcd_send_data>
	  }

	  if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 80007a4:	2140      	movs	r1, #64	@ 0x40
 80007a6:	48ac      	ldr	r0, [pc, #688]	@ (8000a58 <read_keypad+0x30c>)
 80007a8:	f004 fd1e 	bl	80051e8 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d10a      	bne.n	80007c8 <read_keypad+0x7c>
	  	  {
	  	  	while ((HAL_GPIO_ReadPin (GPIOE, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 80007b2:	bf00      	nop
 80007b4:	2140      	movs	r1, #64	@ 0x40
 80007b6:	48a8      	ldr	r0, [pc, #672]	@ (8000a58 <read_keypad+0x30c>)
 80007b8:	f004 fd16 	bl	80051e8 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d0f8      	beq.n	80007b4 <read_keypad+0x68>
	  	  	lcd_send_data('2');
 80007c2:	2032      	movs	r0, #50	@ 0x32
 80007c4:	f7ff ff34 	bl	8000630 <lcd_send_data>
	  	  }



	  if ((HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1) == GPIO_PIN_SET))   // if the Col 1 is low
 80007c8:	2102      	movs	r1, #2
 80007ca:	48a5      	ldr	r0, [pc, #660]	@ (8000a60 <read_keypad+0x314>)
 80007cc:	f004 fd0c 	bl	80051e8 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d10a      	bne.n	80007ec <read_keypad+0xa0>
	  	  {
	  	  	while ((HAL_GPIO_ReadPin (GPIOK, GPIO_PIN_1) == GPIO_PIN_SET));   // wait till the button is pressed
 80007d6:	bf00      	nop
 80007d8:	2102      	movs	r1, #2
 80007da:	48a1      	ldr	r0, [pc, #644]	@ (8000a60 <read_keypad+0x314>)
 80007dc:	f004 fd04 	bl	80051e8 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d0f8      	beq.n	80007d8 <read_keypad+0x8c>
	  	  	lcd_send_data('3');
 80007e6:	2033      	movs	r0, #51	@ 0x33
 80007e8:	f7ff ff22 	bl	8000630 <lcd_send_data>
	  	  }

	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	489d      	ldr	r0, [pc, #628]	@ (8000a64 <read_keypad+0x318>)
 80007f0:	f004 fcfa 	bl	80051e8 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d10b      	bne.n	8000812 <read_keypad+0xc6>
	  	  {
	  	  	while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 80007fa:	bf00      	nop
 80007fc:	2140      	movs	r1, #64	@ 0x40
 80007fe:	4899      	ldr	r0, [pc, #612]	@ (8000a64 <read_keypad+0x318>)
 8000800:	f004 fcf2 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d0f8      	beq.n	80007fc <read_keypad+0xb0>
	  	  	lcd_put_cur(0, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff ff7d 	bl	800070c <lcd_put_cur>
	  	  }



	  // Second row
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000818:	488d      	ldr	r0, [pc, #564]	@ (8000a50 <read_keypad+0x304>)
 800081a:	f004 fcfd 	bl	8005218 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2110      	movs	r1, #16
 8000822:	488b      	ldr	r0, [pc, #556]	@ (8000a50 <read_keypad+0x304>)
 8000824:	f004 fcf8 	bl	8005218 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800082e:	4889      	ldr	r0, [pc, #548]	@ (8000a54 <read_keypad+0x308>)
 8000830:	f004 fcf2 	bl	8005218 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	4887      	ldr	r0, [pc, #540]	@ (8000a58 <read_keypad+0x30c>)
 800083a:	f004 fced 	bl	8005218 <HAL_GPIO_WritePin>



	  if ((HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == GPIO_PIN_SET))   // if the Col 1 is low
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	4886      	ldr	r0, [pc, #536]	@ (8000a5c <read_keypad+0x310>)
 8000844:	f004 fcd0 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10b      	bne.n	8000866 <read_keypad+0x11a>
	  	  {
	  	  	while ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_8)== GPIO_PIN_SET));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000854:	4881      	ldr	r0, [pc, #516]	@ (8000a5c <read_keypad+0x310>)
 8000856:	f004 fcc7 	bl	80051e8 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d0f7      	beq.n	8000850 <read_keypad+0x104>
	  	  	lcd_send_data('4');
 8000860:	2034      	movs	r0, #52	@ 0x34
 8000862:	f7ff fee5 	bl	8000630 <lcd_send_data>
	  	  }

	  	  if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 8000866:	2140      	movs	r1, #64	@ 0x40
 8000868:	487b      	ldr	r0, [pc, #492]	@ (8000a58 <read_keypad+0x30c>)
 800086a:	f004 fcbd 	bl	80051e8 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d10a      	bne.n	800088a <read_keypad+0x13e>
	  	  	  {
	  	  	  	while ((HAL_GPIO_ReadPin (GPIOE, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 8000874:	bf00      	nop
 8000876:	2140      	movs	r1, #64	@ 0x40
 8000878:	4877      	ldr	r0, [pc, #476]	@ (8000a58 <read_keypad+0x30c>)
 800087a:	f004 fcb5 	bl	80051e8 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d0f8      	beq.n	8000876 <read_keypad+0x12a>
	  	  	  	lcd_send_data('5');
 8000884:	2035      	movs	r0, #53	@ 0x35
 8000886:	f7ff fed3 	bl	8000630 <lcd_send_data>
	  	  	  }



	  	  if ((HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1) == GPIO_PIN_SET))   // if the Col 1 is low
 800088a:	2102      	movs	r1, #2
 800088c:	4874      	ldr	r0, [pc, #464]	@ (8000a60 <read_keypad+0x314>)
 800088e:	f004 fcab 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10a      	bne.n	80008ae <read_keypad+0x162>
	  	  	  {
	  	  	  	while ((HAL_GPIO_ReadPin (GPIOK, GPIO_PIN_1) == GPIO_PIN_SET));   // wait till the button is pressed
 8000898:	bf00      	nop
 800089a:	2102      	movs	r1, #2
 800089c:	4870      	ldr	r0, [pc, #448]	@ (8000a60 <read_keypad+0x314>)
 800089e:	f004 fca3 	bl	80051e8 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d0f8      	beq.n	800089a <read_keypad+0x14e>
	  	  	  	lcd_send_data('6');
 80008a8:	2036      	movs	r0, #54	@ 0x36
 80008aa:	f7ff fec1 	bl	8000630 <lcd_send_data>
	  	  	  }

	  	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 80008ae:	2140      	movs	r1, #64	@ 0x40
 80008b0:	486c      	ldr	r0, [pc, #432]	@ (8000a64 <read_keypad+0x318>)
 80008b2:	f004 fc99 	bl	80051e8 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d10b      	bne.n	80008d4 <read_keypad+0x188>
	  	  	  {
	  	  	  	while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 80008bc:	bf00      	nop
 80008be:	2140      	movs	r1, #64	@ 0x40
 80008c0:	4868      	ldr	r0, [pc, #416]	@ (8000a64 <read_keypad+0x318>)
 80008c2:	f004 fc91 	bl	80051e8 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d0f8      	beq.n	80008be <read_keypad+0x172>
	  	  	  	lcd_put_cur(1, 0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff ff1c 	bl	800070c <lcd_put_cur>
	  	  	  }



	  	// Third row
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008da:	485d      	ldr	r0, [pc, #372]	@ (8000a50 <read_keypad+0x304>)
 80008dc:	f004 fc9c 	bl	8005218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2110      	movs	r1, #16
 80008e4:	485a      	ldr	r0, [pc, #360]	@ (8000a50 <read_keypad+0x304>)
 80008e6:	f004 fc97 	bl	8005218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f0:	4858      	ldr	r0, [pc, #352]	@ (8000a54 <read_keypad+0x308>)
 80008f2:	f004 fc91 	bl	8005218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4857      	ldr	r0, [pc, #348]	@ (8000a58 <read_keypad+0x30c>)
 80008fc:	f004 fc8c 	bl	8005218 <HAL_GPIO_WritePin>


	  	if ((HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == GPIO_PIN_SET))   // if the Col 1 is low
 8000900:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000904:	4855      	ldr	r0, [pc, #340]	@ (8000a5c <read_keypad+0x310>)
 8000906:	f004 fc6f 	bl	80051e8 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d10b      	bne.n	8000928 <read_keypad+0x1dc>
	  		  {
	  		  	while ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_8)== GPIO_PIN_SET));   // wait till the button is pressed
 8000910:	bf00      	nop
 8000912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000916:	4851      	ldr	r0, [pc, #324]	@ (8000a5c <read_keypad+0x310>)
 8000918:	f004 fc66 	bl	80051e8 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b01      	cmp	r3, #1
 8000920:	d0f7      	beq.n	8000912 <read_keypad+0x1c6>
	  		  	lcd_send_data('7');
 8000922:	2037      	movs	r0, #55	@ 0x37
 8000924:	f7ff fe84 	bl	8000630 <lcd_send_data>
	  		  }

	  		  if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 8000928:	2140      	movs	r1, #64	@ 0x40
 800092a:	484b      	ldr	r0, [pc, #300]	@ (8000a58 <read_keypad+0x30c>)
 800092c:	f004 fc5c 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d10a      	bne.n	800094c <read_keypad+0x200>
	  		  	  {
	  		  	  	while ((HAL_GPIO_ReadPin (GPIOE, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 8000936:	bf00      	nop
 8000938:	2140      	movs	r1, #64	@ 0x40
 800093a:	4847      	ldr	r0, [pc, #284]	@ (8000a58 <read_keypad+0x30c>)
 800093c:	f004 fc54 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d0f8      	beq.n	8000938 <read_keypad+0x1ec>
	  		  	  	lcd_send_data('8');
 8000946:	2038      	movs	r0, #56	@ 0x38
 8000948:	f7ff fe72 	bl	8000630 <lcd_send_data>
	  		  	  }



	  		  if ((HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1) == GPIO_PIN_SET))   // if the Col 1 is low
 800094c:	2102      	movs	r1, #2
 800094e:	4844      	ldr	r0, [pc, #272]	@ (8000a60 <read_keypad+0x314>)
 8000950:	f004 fc4a 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d10a      	bne.n	8000970 <read_keypad+0x224>
	  		  	  {
	  		  	  	while ((HAL_GPIO_ReadPin (GPIOK, GPIO_PIN_1) == GPIO_PIN_SET));   // wait till the button is pressed
 800095a:	bf00      	nop
 800095c:	2102      	movs	r1, #2
 800095e:	4840      	ldr	r0, [pc, #256]	@ (8000a60 <read_keypad+0x314>)
 8000960:	f004 fc42 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d0f8      	beq.n	800095c <read_keypad+0x210>
	  		  	  	lcd_send_data('9');
 800096a:	2039      	movs	r0, #57	@ 0x39
 800096c:	f7ff fe60 	bl	8000630 <lcd_send_data>
	  		  	  }

	  		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 8000970:	2140      	movs	r1, #64	@ 0x40
 8000972:	483c      	ldr	r0, [pc, #240]	@ (8000a64 <read_keypad+0x318>)
 8000974:	f004 fc38 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d109      	bne.n	8000992 <read_keypad+0x246>
	  		  	  {
	  		  	  	while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 800097e:	bf00      	nop
 8000980:	2140      	movs	r1, #64	@ 0x40
 8000982:	4838      	ldr	r0, [pc, #224]	@ (8000a64 <read_keypad+0x318>)
 8000984:	f004 fc30 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d0f8      	beq.n	8000980 <read_keypad+0x234>
	  		  	  	lcd_init();
 800098e:	f7ff fe83 	bl	8000698 <lcd_init>




		// Fourth row
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000998:	482d      	ldr	r0, [pc, #180]	@ (8000a50 <read_keypad+0x304>)
 800099a:	f004 fc3d 	bl	8005218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2110      	movs	r1, #16
 80009a2:	482b      	ldr	r0, [pc, #172]	@ (8000a50 <read_keypad+0x304>)
 80009a4:	f004 fc38 	bl	8005218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ae:	4829      	ldr	r0, [pc, #164]	@ (8000a54 <read_keypad+0x308>)
 80009b0:	f004 fc32 	bl	8005218 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2108      	movs	r1, #8
 80009b8:	4827      	ldr	r0, [pc, #156]	@ (8000a58 <read_keypad+0x30c>)
 80009ba:	f004 fc2d 	bl	8005218 <HAL_GPIO_WritePin>


		if ((HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_8) == GPIO_PIN_SET))   // if the Col 1 is low
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	4826      	ldr	r0, [pc, #152]	@ (8000a5c <read_keypad+0x310>)
 80009c4:	f004 fc10 	bl	80051e8 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d10b      	bne.n	80009e6 <read_keypad+0x29a>
			  {
				while ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_8)== GPIO_PIN_SET));   // wait till the button is pressed
 80009ce:	bf00      	nop
 80009d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d4:	4821      	ldr	r0, [pc, #132]	@ (8000a5c <read_keypad+0x310>)
 80009d6:	f004 fc07 	bl	80051e8 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d0f7      	beq.n	80009d0 <read_keypad+0x284>
				lcd_send_data('*');
 80009e0:	202a      	movs	r0, #42	@ 0x2a
 80009e2:	f7ff fe25 	bl	8000630 <lcd_send_data>
			  }

			  if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 80009e6:	2140      	movs	r1, #64	@ 0x40
 80009e8:	481b      	ldr	r0, [pc, #108]	@ (8000a58 <read_keypad+0x30c>)
 80009ea:	f004 fbfd 	bl	80051e8 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d10a      	bne.n	8000a0a <read_keypad+0x2be>
				  {
					while ((HAL_GPIO_ReadPin (GPIOE, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 80009f4:	bf00      	nop
 80009f6:	2140      	movs	r1, #64	@ 0x40
 80009f8:	4817      	ldr	r0, [pc, #92]	@ (8000a58 <read_keypad+0x30c>)
 80009fa:	f004 fbf5 	bl	80051e8 <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d0f8      	beq.n	80009f6 <read_keypad+0x2aa>
					lcd_send_data('0');
 8000a04:	2030      	movs	r0, #48	@ 0x30
 8000a06:	f7ff fe13 	bl	8000630 <lcd_send_data>
				  }



			  if ((HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1) == GPIO_PIN_SET))   // if the Col 1 is low
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4814      	ldr	r0, [pc, #80]	@ (8000a60 <read_keypad+0x314>)
 8000a0e:	f004 fbeb 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10a      	bne.n	8000a2e <read_keypad+0x2e2>
				  {
					while ((HAL_GPIO_ReadPin (GPIOK, GPIO_PIN_1) == GPIO_PIN_SET));   // wait till the button is pressed
 8000a18:	bf00      	nop
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4810      	ldr	r0, [pc, #64]	@ (8000a60 <read_keypad+0x314>)
 8000a1e:	f004 fbe3 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d0f8      	beq.n	8000a1a <read_keypad+0x2ce>
					lcd_send_data('#');
 8000a28:	2023      	movs	r0, #35	@ 0x23
 8000a2a:	f7ff fe01 	bl	8000630 <lcd_send_data>
				  }

			  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET))   // if the Col 1 is low
 8000a2e:	2140      	movs	r1, #64	@ 0x40
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <read_keypad+0x318>)
 8000a32:	f004 fbd9 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d107      	bne.n	8000a4c <read_keypad+0x300>
				  {
					while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_6) == GPIO_PIN_SET));   // wait till the button is pressed
 8000a3c:	bf00      	nop
 8000a3e:	2140      	movs	r1, #64	@ 0x40
 8000a40:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <read_keypad+0x318>)
 8000a42:	f004 fbd1 	bl	80051e8 <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d0f8      	beq.n	8000a3e <read_keypad+0x2f2>





}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58020400 	.word	0x58020400
 8000a54:	58021c00 	.word	0x58021c00
 8000a58:	58021000 	.word	0x58021000
 8000a5c:	58022000 	.word	0x58022000
 8000a60:	58022800 	.word	0x58022800
 8000a64:	58020000 	.word	0x58020000

08000a68 <main>:
  * @retval int
  */


int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f002 f80a 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f828 	bl	8000ac4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a74:	f000 f8a8 	bl	8000bc8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f000 fdca 	bl	8001610 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a7c:	f000 f8d4 	bl	8000c28 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a80:	f000 f948 	bl	8000d14 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000a84:	f000 f9aa 	bl	8000ddc <MX_ADC3_Init>
  MX_ETH_Init();
 8000a88:	f000 fa0a 	bl	8000ea0 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8000a8c:	f000 fa54 	bl	8000f38 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a90:	f000 fab6 	bl	8001000 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000a94:	f000 fd6e 	bl	8001574 <MX_FMC_Init>
  MX_LTDC_Init();
 8000a98:	f000 fb56 	bl	8001148 <MX_LTDC_Init>
  MX_RTC_Init();
 8000a9c:	f000 fc06 	bl	80012ac <MX_RTC_Init>
  MX_SAI2_Init();
 8000aa0:	f000 fc2c 	bl	80012fc <MX_SAI2_Init>
  MX_USART3_UART_Init();
 8000aa4:	f000 fce8 	bl	8001478 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aa8:	f000 fd32 	bl	8001510 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 8000aac:	f000 fb0c 	bl	80010c8 <MX_I2C4_Init>
	  }
  }
  */


  lcd_init ();
 8000ab0:	f7ff fdf2 	bl	8000698 <lcd_init>
  lcd_put_cur(0, 0);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fe28 	bl	800070c <lcd_put_cur>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  read_keypad();
 8000abc:	f7ff fe46 	bl	800074c <read_keypad>
 8000ac0:	e7fc      	b.n	8000abc <main+0x54>
	...

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09c      	sub	sp, #112	@ 0x70
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	224c      	movs	r2, #76	@ 0x4c
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00b fa07 	bl	800bee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2220      	movs	r2, #32
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f00b fa01 	bl	800bee6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f005 fbef 	bl	80062c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <SystemClock_Config+0xfc>)
 8000af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af2:	4a33      	ldr	r2, [pc, #204]	@ (8000bc0 <SystemClock_Config+0xfc>)
 8000af4:	f023 0301 	bic.w	r3, r3, #1
 8000af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000afa:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <SystemClock_Config+0xfc>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc4 <SystemClock_Config+0x100>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc4 <SystemClock_Config+0x100>)
 8000b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <SystemClock_Config+0x100>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b20:	bf00      	nop
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <SystemClock_Config+0x100>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b2e:	d1f8      	bne.n	8000b22 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000b30:	230b      	movs	r3, #11
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b34:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3e:	2340      	movs	r3, #64	@ 0x40
 8000b40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000b4e:	2316      	movs	r3, #22
 8000b50:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000b52:	23a9      	movs	r3, #169	@ 0xa9
 8000b54:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 fbf2 	bl	800635c <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b7e:	f000 ffa3 	bl	8001ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	233f      	movs	r3, #63	@ 0x3f
 8000b84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 f832 	bl	8006c10 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bb2:	f000 ff89 	bl	8001ac8 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3770      	adds	r7, #112	@ 0x70
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58000400 	.word	0x58000400
 8000bc4:	58024800 	.word	0x58024800

08000bc8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0b0      	sub	sp, #192	@ 0xc0
 8000bcc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	22c0      	movs	r2, #192	@ 0xc0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00b f986 	bl	800bee6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bda:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000bea:	230c      	movs	r3, #12
 8000bec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bfa:	23c0      	movs	r3, #192	@ 0xc0
 8000bfc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bfe:	2320      	movs	r3, #32
 8000c00:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 fb8a 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c1a:	f000 ff55 	bl	8001ac8 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	37c0      	adds	r7, #192	@ 0xc0
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]
 8000c4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c4e:	4a30      	ldr	r2, [pc, #192]	@ (8000d10 <MX_ADC1_Init+0xe8>)
 8000c50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c52:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca8:	4818      	ldr	r0, [pc, #96]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000caa:	f002 f963 	bl	8002f74 <HAL_ADC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cb4:	f000 ff08 	bl	8001ac8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4812      	ldr	r0, [pc, #72]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000cc4:	f002 ff86 	bl	8003bd4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000cce:	f000 fefb 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cde:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000cf6:	f002 fadf 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000d00:	f000 fee2 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	@ 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24000128 	.word	0x24000128
 8000d10:	40022000 	.word	0x40022000

08000d14 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d2c:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d30:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d32:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d38:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3e:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d44:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d4a:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d50:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d88:	4812      	ldr	r0, [pc, #72]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d8a:	f002 f8f3 	bl	8002f74 <HAL_ADC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000d94:	f000 fe98 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000da8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2304      	movs	r3, #4
 8000dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000dbc:	f002 fa7c 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000dc6:	f000 fe7f 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2400018c 	.word	0x2400018c
 8000dd8:	40022100 	.word	0x40022100

08000ddc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000df4:	4b27      	ldr	r3, [pc, #156]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000df6:	4a28      	ldr	r2, [pc, #160]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000df8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e00:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e06:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e12:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e4a:	4812      	ldr	r0, [pc, #72]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e4c:	f002 f892 	bl	8002f74 <HAL_ADC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000e56:	f000 fe37 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_ADC3_Init+0xc0>)
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e66:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e6a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_ADC3_Init+0xb8>)
 8000e7e:	f002 fa1b 	bl	80032b8 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000e88:	f000 fe1e 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240001f0 	.word	0x240001f0
 8000e98:	58026000 	.word	0x58026000
 8000e9c:	1d500080 	.word	0x1d500080

08000ea0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <MX_ETH_Init+0x80>)
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f24 <MX_ETH_Init+0x84>)
 8000ea8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_ETH_Init+0x88>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_ETH_Init+0x88>)
 8000eb2:	2280      	movs	r2, #128	@ 0x80
 8000eb4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_ETH_Init+0x88>)
 8000eb8:	22e1      	movs	r2, #225	@ 0xe1
 8000eba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_ETH_Init+0x88>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_ETH_Init+0x88>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <MX_ETH_Init+0x88>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_ETH_Init+0x80>)
 8000ed0:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <MX_ETH_Init+0x88>)
 8000ed2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <MX_ETH_Init+0x80>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_ETH_Init+0x80>)
 8000edc:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <MX_ETH_Init+0x8c>)
 8000ede:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_ETH_Init+0x80>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <MX_ETH_Init+0x90>)
 8000ee4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_ETH_Init+0x80>)
 8000ee8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000eec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <MX_ETH_Init+0x80>)
 8000ef0:	f003 f832 	bl	8003f58 <HAL_ETH_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000efa:	f000 fde5 	bl	8001ac8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000efe:	2238      	movs	r2, #56	@ 0x38
 8000f00:	2100      	movs	r1, #0
 8000f02:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <MX_ETH_Init+0x94>)
 8000f04:	f00a ffef 	bl	800bee6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_ETH_Init+0x94>)
 8000f0a:	2221      	movs	r2, #33	@ 0x21
 8000f0c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_ETH_Init+0x94>)
 8000f10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f14:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f16:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_ETH_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24000254 	.word	0x24000254
 8000f24:	40028000 	.word	0x40028000
 8000f28:	24000c40 	.word	0x24000c40
 8000f2c:	24000074 	.word	0x24000074
 8000f30:	24000014 	.word	0x24000014
 8000f34:	240000f0 	.word	0x240000f0

08000f38 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ffc <MX_FDCAN1_Init+0xc4>)
 8000f40:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f54:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f60:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f62:	2210      	movs	r2, #16
 8000f64:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f66:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000fae:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_FDCAN1_Init+0xc0>)
 8000fe6:	f003 fbeb 	bl	80047c0 <HAL_FDCAN_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ff0:	f000 fd6a 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	24000304 	.word	0x24000304
 8000ffc:	4000a000 	.word	0x4000a000

08001000 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001004:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001006:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <MX_FDCAN2_Init+0xc4>)
 8001008:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001022:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800102a:	2210      	movs	r2, #16
 800102c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800102e:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001030:	2201      	movs	r2, #1
 8001032:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001036:	2202      	movs	r2, #2
 8001038:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800103c:	2202      	movs	r2, #2
 800103e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001042:	2201      	movs	r2, #1
 8001044:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001046:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001048:	2201      	movs	r2, #1
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800104e:	2201      	movs	r2, #1
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001054:	2201      	movs	r2, #1
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800105a:	2200      	movs	r2, #0
 800105c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001060:	2200      	movs	r2, #0
 8001062:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800106c:	2200      	movs	r2, #0
 800106e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001072:	2204      	movs	r2, #4
 8001074:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800107e:	2204      	movs	r2, #4
 8001080:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001084:	2200      	movs	r2, #0
 8001086:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800108a:	2204      	movs	r2, #4
 800108c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001090:	2200      	movs	r2, #0
 8001092:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 8001096:	2200      	movs	r2, #0
 8001098:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 800109c:	2200      	movs	r2, #0
 800109e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <MX_FDCAN2_Init+0xc0>)
 80010ae:	f003 fb87 	bl	80047c0 <HAL_FDCAN_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80010b8:	f000 fd06 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240003a4 	.word	0x240003a4
 80010c4:	4000a400 	.word	0x4000a400

080010c8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_I2C4_Init+0x74>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <MX_I2C4_Init+0x78>)
 80010d0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_I2C4_Init+0x74>)
 80010d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <MX_I2C4_Init+0x7c>)
 80010d6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_I2C4_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_I2C4_Init+0x74>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_I2C4_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_I2C4_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_I2C4_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_I2C4_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_I2C4_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001102:	480e      	ldr	r0, [pc, #56]	@ (800113c <MX_I2C4_Init+0x74>)
 8001104:	f004 f8a2 	bl	800524c <HAL_I2C_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800110e:	f000 fcdb 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001112:	2100      	movs	r1, #0
 8001114:	4809      	ldr	r0, [pc, #36]	@ (800113c <MX_I2C4_Init+0x74>)
 8001116:	f004 fc67 	bl	80059e8 <HAL_I2CEx_ConfigAnalogFilter>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001120:	f000 fcd2 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001124:	2100      	movs	r1, #0
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_I2C4_Init+0x74>)
 8001128:	f004 fca9 	bl	8005a7e <HAL_I2CEx_ConfigDigitalFilter>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001132:	f000 fcc9 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000444 	.word	0x24000444
 8001140:	58001c00 	.word	0x58001c00
 8001144:	10707dbc 	.word	0x10707dbc

08001148 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09a      	sub	sp, #104	@ 0x68
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800114e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001152:	2234      	movs	r2, #52	@ 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f00a fec5 	bl	800bee6 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2234      	movs	r2, #52	@ 0x34
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00a febf 	bl	800bee6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001168:	4b4e      	ldr	r3, [pc, #312]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 800116a:	4a4f      	ldr	r2, [pc, #316]	@ (80012a8 <MX_LTDC_Init+0x160>)
 800116c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800116e:	4b4d      	ldr	r3, [pc, #308]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001174:	4b4b      	ldr	r3, [pc, #300]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800117a:	4b4a      	ldr	r3, [pc, #296]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001180:	4b48      	ldr	r3, [pc, #288]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001186:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 8001188:	2207      	movs	r2, #7
 800118a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800118c:	4b45      	ldr	r3, [pc, #276]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 800118e:	2203      	movs	r2, #3
 8001190:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001192:	4b44      	ldr	r3, [pc, #272]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 8001194:	220e      	movs	r2, #14
 8001196:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001198:	4b42      	ldr	r3, [pc, #264]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 800119a:	2205      	movs	r2, #5
 800119c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800119e:	4b41      	ldr	r3, [pc, #260]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011a0:	f240 228e 	movw	r2, #654	@ 0x28e
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80011a6:	4b3f      	ldr	r3, [pc, #252]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011a8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80011ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011b0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80011b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011b8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011be:	4b39      	ldr	r3, [pc, #228]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011c6:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011ce:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011d6:	4833      	ldr	r0, [pc, #204]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 80011d8:	f004 fc9e 	bl	8005b18 <HAL_LTDC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011e2:	f000 fc71 	bl	8001ac8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80011f6:	2300      	movs	r3, #0
 80011f8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001206:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001208:	2305      	movs	r3, #5
 800120a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800122a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	481c      	ldr	r0, [pc, #112]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 8001234:	f004 fd40 	bl	8005cb8 <HAL_LTDC_ConfigLayer>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800123e:	f000 fc43 	bl	8001ac8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800125e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001262:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001264:	2305      	movs	r3, #5
 8001266:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2201      	movs	r2, #1
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_LTDC_Init+0x15c>)
 800128e:	f004 fd13 	bl	8005cb8 <HAL_LTDC_ConfigLayer>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001298:	f000 fc16 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3768      	adds	r7, #104	@ 0x68
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000498 	.word	0x24000498
 80012a8:	50001000 	.word	0x50001000

080012ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012b2:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <MX_RTC_Init+0x4c>)
 80012b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012be:	227f      	movs	r2, #127	@ 0x7f
 80012c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012d4:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <MX_RTC_Init+0x48>)
 80012e2:	f008 fd1f 	bl	8009d24 <HAL_RTC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80012ec:	f000 fbec 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	24000540 	.word	0x24000540
 80012f8:	58004000 	.word	0x58004000

080012fc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001300:	4b58      	ldr	r3, [pc, #352]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001302:	4a59      	ldr	r2, [pc, #356]	@ (8001468 <MX_SAI2_Init+0x16c>)
 8001304:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001306:	4b57      	ldr	r3, [pc, #348]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800130c:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <MX_SAI2_Init+0x168>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001312:	4b54      	ldr	r3, [pc, #336]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001314:	2240      	movs	r2, #64	@ 0x40
 8001316:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001318:	4b52      	ldr	r3, [pc, #328]	@ (8001464 <MX_SAI2_Init+0x168>)
 800131a:	2200      	movs	r2, #0
 800131c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800131e:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001320:	2200      	movs	r2, #0
 8001322:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001324:	4b4f      	ldr	r3, [pc, #316]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800132a:	4b4e      	ldr	r3, [pc, #312]	@ (8001464 <MX_SAI2_Init+0x168>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001330:	4b4c      	ldr	r3, [pc, #304]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001336:	4b4b      	ldr	r3, [pc, #300]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800133c:	4b49      	ldr	r3, [pc, #292]	@ (8001464 <MX_SAI2_Init+0x168>)
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <MX_SAI2_Init+0x170>)
 8001340:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001342:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001348:	4b46      	ldr	r3, [pc, #280]	@ (8001464 <MX_SAI2_Init+0x168>)
 800134a:	2200      	movs	r2, #0
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800134e:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001354:	4b43      	ldr	r3, [pc, #268]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001356:	2200      	movs	r2, #0
 8001358:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800135a:	4b42      	ldr	r3, [pc, #264]	@ (8001464 <MX_SAI2_Init+0x168>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001362:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001364:	2201      	movs	r2, #1
 8001366:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001368:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <MX_SAI2_Init+0x168>)
 800136a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800136e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001370:	4b3c      	ldr	r3, [pc, #240]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001372:	2208      	movs	r2, #8
 8001374:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001376:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001378:	2201      	movs	r2, #1
 800137a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800137c:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <MX_SAI2_Init+0x168>)
 800137e:	2200      	movs	r2, #0
 8001380:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001382:	4b38      	ldr	r3, [pc, #224]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001384:	2200      	movs	r2, #0
 8001386:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001388:	4b36      	ldr	r3, [pc, #216]	@ (8001464 <MX_SAI2_Init+0x168>)
 800138a:	2200      	movs	r2, #0
 800138c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800138e:	4b35      	ldr	r3, [pc, #212]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001390:	2200      	movs	r2, #0
 8001392:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001394:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <MX_SAI2_Init+0x168>)
 8001396:	2200      	movs	r2, #0
 8001398:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800139a:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <MX_SAI2_Init+0x168>)
 800139c:	2201      	movs	r2, #1
 800139e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80013a0:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <MX_SAI2_Init+0x168>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80013a6:	482f      	ldr	r0, [pc, #188]	@ (8001464 <MX_SAI2_Init+0x168>)
 80013a8:	f008 fdd4 	bl	8009f54 <HAL_SAI_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80013b2:	f000 fb89 	bl	8001ac8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80013b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001474 <MX_SAI2_Init+0x178>)
 80013ba:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80013c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013c4:	2203      	movs	r2, #3
 80013c6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013ca:	2240      	movs	r2, #64	@ 0x40
 80013cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013ce:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013dc:	2201      	movs	r2, #1
 80013de:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013e6:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013ec:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <MX_SAI2_Init+0x174>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001400:	2200      	movs	r2, #0
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_SAI2_Init+0x174>)
 800140e:	2201      	movs	r2, #1
 8001410:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_SAI2_Init+0x174>)
 800141c:	2208      	movs	r2, #8
 800141e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001422:	2201      	movs	r2, #1
 8001424:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001428:	2200      	movs	r2, #0
 800142a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <MX_SAI2_Init+0x174>)
 800142e:	2200      	movs	r2, #0
 8001430:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001434:	2200      	movs	r2, #0
 8001436:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <MX_SAI2_Init+0x174>)
 800143a:	2200      	movs	r2, #0
 800143c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001440:	2200      	movs	r2, #0
 8001442:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001446:	2201      	movs	r2, #1
 8001448:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_SAI2_Init+0x174>)
 800144c:	2200      	movs	r2, #0
 800144e:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001450:	4807      	ldr	r0, [pc, #28]	@ (8001470 <MX_SAI2_Init+0x174>)
 8001452:	f008 fd7f 	bl	8009f54 <HAL_SAI_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 800145c:	f000 fb34 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	24000564 	.word	0x24000564
 8001468:	40015c04 	.word	0x40015c04
 800146c:	0002ee00 	.word	0x0002ee00
 8001470:	240005fc 	.word	0x240005fc
 8001474:	40015c24 	.word	0x40015c24

08001478 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800147e:	4a23      	ldr	r2, [pc, #140]	@ (800150c <MX_USART3_UART_Init+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014c2:	f009 f867 	bl	800a594 <HAL_UART_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014cc:	f000 fafc 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014d4:	f00a f86f 	bl	800b5b6 <HAL_UARTEx_SetTxFifoThreshold>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014de:	f000 faf3 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014e6:	f00a f8a4 	bl	800b632 <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014f0:	f000 faea 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014f6:	f00a f825 	bl	800b544 <HAL_UARTEx_DisableFifoMode>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001500:	f000 fae2 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24000694 	.word	0x24000694
 800150c:	40004800 	.word	0x40004800

08001510 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001516:	4a16      	ldr	r2, [pc, #88]	@ (8001570 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001518:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800151c:	2209      	movs	r2, #9
 800151e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001522:	2202      	movs	r2, #2
 8001524:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001528:	2200      	movs	r2, #0
 800152a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800152e:	2202      	movs	r2, #2
 8001530:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001534:	2200      	movs	r2, #0
 8001536:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800153a:	2200      	movs	r2, #0
 800153c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001540:	2200      	movs	r2, #0
 8001542:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001546:	2201      	movs	r2, #1
 8001548:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800154c:	2201      	movs	r2, #1
 800154e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001552:	2200      	movs	r2, #0
 8001554:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001558:	f004 fd86 	bl	8006068 <HAL_PCD_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001562:	f000 fab1 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	24000728 	.word	0x24000728
 8001570:	40080000 	.word	0x40080000

08001574 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <MX_FMC_Init+0x94>)
 800158e:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <MX_FMC_Init+0x98>)
 8001590:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_FMC_Init+0x94>)
 8001594:	2201      	movs	r2, #1
 8001596:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_FMC_Init+0x94>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_FMC_Init+0x94>)
 80015a0:	2204      	movs	r2, #4
 80015a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_FMC_Init+0x94>)
 80015a6:	2210      	movs	r2, #16
 80015a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_FMC_Init+0x94>)
 80015ac:	2240      	movs	r2, #64	@ 0x40
 80015ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_FMC_Init+0x94>)
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_FMC_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_FMC_Init+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_FMC_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_FMC_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80015ce:	2310      	movs	r3, #16
 80015d0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80015d2:	2310      	movs	r3, #16
 80015d4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80015d6:	2310      	movs	r3, #16
 80015d8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80015da:	2310      	movs	r3, #16
 80015dc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80015de:	2310      	movs	r3, #16
 80015e0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80015e2:	2310      	movs	r3, #16
 80015e4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80015e6:	2310      	movs	r3, #16
 80015e8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <MX_FMC_Init+0x94>)
 80015f0:	f008 ff94 	bl	800a51c <HAL_SDRAM_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80015fa:	f000 fa65 	bl	8001ac8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000c0c 	.word	0x24000c0c
 800160c:	52004140 	.word	0x52004140

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b090      	sub	sp, #64	@ 0x40
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001626:	4bbf      	ldr	r3, [pc, #764]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	4abd      	ldr	r2, [pc, #756]	@ (8001924 <MX_GPIO_Init+0x314>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001636:	4bbb      	ldr	r3, [pc, #748]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	4bb7      	ldr	r3, [pc, #732]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	4ab6      	ldr	r2, [pc, #728]	@ (8001924 <MX_GPIO_Init+0x314>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001654:	4bb3      	ldr	r3, [pc, #716]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001662:	4bb0      	ldr	r3, [pc, #704]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	4aae      	ldr	r2, [pc, #696]	@ (8001924 <MX_GPIO_Init+0x314>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001672:	4bac      	ldr	r3, [pc, #688]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001680:	4ba8      	ldr	r3, [pc, #672]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001686:	4aa7      	ldr	r2, [pc, #668]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800168c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001690:	4ba4      	ldr	r3, [pc, #656]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4ba1      	ldr	r3, [pc, #644]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ae:	4b9d      	ldr	r3, [pc, #628]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b99      	ldr	r3, [pc, #612]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c2:	4a98      	ldr	r2, [pc, #608]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016cc:	4b95      	ldr	r3, [pc, #596]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016da:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	4a90      	ldr	r2, [pc, #576]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001924 <MX_GPIO_Init+0x314>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fe:	4a89      	ldr	r2, [pc, #548]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001700:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001708:	4b86      	ldr	r3, [pc, #536]	@ (8001924 <MX_GPIO_Init+0x314>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	4a81      	ldr	r2, [pc, #516]	@ (8001924 <MX_GPIO_Init+0x314>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001726:	4b7f      	ldr	r3, [pc, #508]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001734:	4b7b      	ldr	r3, [pc, #492]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173a:	4a7a      	ldr	r2, [pc, #488]	@ (8001924 <MX_GPIO_Init+0x314>)
 800173c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001744:	4b77      	ldr	r3, [pc, #476]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001752:	4b74      	ldr	r3, [pc, #464]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001758:	4a72      	ldr	r2, [pc, #456]	@ (8001924 <MX_GPIO_Init+0x314>)
 800175a:	f043 0320 	orr.w	r3, r3, #32
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001762:	4b70      	ldr	r3, [pc, #448]	@ (8001924 <MX_GPIO_Init+0x314>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|MII_TX_ER_nINT_Pin|LCD_RST_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f249 0114 	movw	r1, #36884	@ 0x9014
 8001776:	486c      	ldr	r0, [pc, #432]	@ (8001928 <MX_GPIO_Init+0x318>)
 8001778:	f003 fd4e 	bl	8005218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001782:	486a      	ldr	r0, [pc, #424]	@ (800192c <MX_GPIO_Init+0x31c>)
 8001784:	f003 fd48 	bl	8005218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	2108      	movs	r1, #8
 800178c:	4868      	ldr	r0, [pc, #416]	@ (8001930 <MX_GPIO_Init+0x320>)
 800178e:	f003 fd43 	bl	8005218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001798:	4866      	ldr	r0, [pc, #408]	@ (8001934 <MX_GPIO_Init+0x324>)
 800179a:	f003 fd3d 	bl	8005218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2104      	movs	r1, #4
 80017a2:	4865      	ldr	r0, [pc, #404]	@ (8001938 <MX_GPIO_Init+0x328>)
 80017a4:	f003 fd38 	bl	8005218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_D0_Pin SDIO1_D1_Pin
                           SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_D0_Pin|SDIO1_D1_Pin
 80017a8:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80017ba:	230c      	movs	r3, #12
 80017bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c2:	4619      	mov	r1, r3
 80017c4:	485d      	ldr	r0, [pc, #372]	@ (800193c <MX_GPIO_Init+0x32c>)
 80017c6:	f003 fb5f 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017da:	230a      	movs	r3, #10
 80017dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	4850      	ldr	r0, [pc, #320]	@ (8001928 <MX_GPIO_Init+0x318>)
 80017e6:	f003 fb4f 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 MII_TX_ER_nINT_Pin LCD_RST_Pin PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|MII_TX_ER_nINT_Pin|LCD_RST_Pin|GPIO_PIN_15;
 80017ea:	f249 0314 	movw	r3, #36884	@ 0x9014
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001800:	4619      	mov	r1, r3
 8001802:	4849      	ldr	r0, [pc, #292]	@ (8001928 <MX_GPIO_Init+0x318>)
 8001804:	f003 fb40 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001808:	2308      	movs	r3, #8
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001818:	2305      	movs	r3, #5
 800181a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001820:	4619      	mov	r1, r3
 8001822:	4847      	ldr	r0, [pc, #284]	@ (8001940 <MX_GPIO_Init+0x330>)
 8001824:	f003 fb30 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001828:	2304      	movs	r3, #4
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001838:	2305      	movs	r3, #5
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	483c      	ldr	r0, [pc, #240]	@ (8001934 <MX_GPIO_Init+0x324>)
 8001844:	f003 fb20 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800185a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800185e:	4619      	mov	r1, r3
 8001860:	4832      	ldr	r0, [pc, #200]	@ (800192c <MX_GPIO_Init+0x31c>)
 8001862:	f003 fb11 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001866:	2380      	movs	r3, #128	@ 0x80
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001876:	4619      	mov	r1, r3
 8001878:	4831      	ldr	r0, [pc, #196]	@ (8001940 <MX_GPIO_Init+0x330>)
 800187a:	f003 fb05 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800187e:	2330      	movs	r3, #48	@ 0x30
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800188e:	230a      	movs	r3, #10
 8001890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001892:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001896:	4619      	mov	r1, r3
 8001898:	4825      	ldr	r0, [pc, #148]	@ (8001930 <MX_GPIO_Init+0x320>)
 800189a:	f003 faf5 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800189e:	2308      	movs	r3, #8
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b2:	4619      	mov	r1, r3
 80018b4:	481e      	ldr	r0, [pc, #120]	@ (8001930 <MX_GPIO_Init+0x320>)
 80018b6:	f003 fae7 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 80018ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80018cc:	230c      	movs	r3, #12
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4814      	ldr	r0, [pc, #80]	@ (8001928 <MX_GPIO_Init+0x318>)
 80018d8:	f003 fad6 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80018dc:	2304      	movs	r3, #4
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80018ec:	230c      	movs	r3, #12
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	@ (8001940 <MX_GPIO_Init+0x330>)
 80018f8:	f003 fac6 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190e:	4619      	mov	r1, r3
 8001910:	480a      	ldr	r0, [pc, #40]	@ (800193c <MX_GPIO_Init+0x32c>)
 8001912:	f003 fab9 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001920:	e010      	b.n	8001944 <MX_GPIO_Init+0x334>
 8001922:	bf00      	nop
 8001924:	58024400 	.word	0x58024400
 8001928:	58020400 	.word	0x58020400
 800192c:	58021c00 	.word	0x58021c00
 8001930:	58021000 	.word	0x58021000
 8001934:	58022000 	.word	0x58022000
 8001938:	58022400 	.word	0x58022400
 800193c:	58020800 	.word	0x58020800
 8001940:	58020c00 	.word	0x58020c00
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001944:	2302      	movs	r3, #2
 8001946:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800194c:	4619      	mov	r1, r3
 800194e:	4856      	ldr	r0, [pc, #344]	@ (8001aa8 <MX_GPIO_Init+0x498>)
 8001950:	f003 fa9a 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001954:	2340      	movs	r3, #64	@ 0x40
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800195c:	2302      	movs	r3, #2
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4851      	ldr	r0, [pc, #324]	@ (8001aac <MX_GPIO_Init+0x49c>)
 8001968:	f003 fa8e 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800197c:	2306      	movs	r3, #6
 800197e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	484a      	ldr	r0, [pc, #296]	@ (8001ab0 <MX_GPIO_Init+0x4a0>)
 8001988:	f003 fa7e 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800198c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	4840      	ldr	r0, [pc, #256]	@ (8001aa8 <MX_GPIO_Init+0x498>)
 80019a6:	f003 fa6f 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019aa:	2304      	movs	r3, #4
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019bc:	4619      	mov	r1, r3
 80019be:	483c      	ldr	r0, [pc, #240]	@ (8001ab0 <MX_GPIO_Init+0x4a0>)
 80019c0:	f003 fa62 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4837      	ldr	r0, [pc, #220]	@ (8001ab4 <MX_GPIO_Init+0x4a4>)
 80019d8:	f003 fa56 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019dc:	2302      	movs	r3, #2
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e4:	2302      	movs	r3, #2
 80019e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4831      	ldr	r0, [pc, #196]	@ (8001ab4 <MX_GPIO_Init+0x4a4>)
 80019f0:	f003 fa4a 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80019f4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a06:	2309      	movs	r3, #9
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4829      	ldr	r0, [pc, #164]	@ (8001ab8 <MX_GPIO_Init+0x4a8>)
 8001a12:	f003 fa39 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a28:	230a      	movs	r3, #10
 8001a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	4821      	ldr	r0, [pc, #132]	@ (8001ab8 <MX_GPIO_Init+0x4a8>)
 8001a34:	f003 fa28 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001a38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481b      	ldr	r0, [pc, #108]	@ (8001abc <MX_GPIO_Init+0x4ac>)
 8001a50:	f003 fa1a 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a54:	2340      	movs	r3, #64	@ 0x40
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a64:	4619      	mov	r1, r3
 8001a66:	4816      	ldr	r0, [pc, #88]	@ (8001ac0 <MX_GPIO_Init+0x4b0>)
 8001a68:	f003 fa0e 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_PSO_Pin;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS2_PSO_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4810      	ldr	r0, [pc, #64]	@ (8001ac0 <MX_GPIO_Init+0x4b0>)
 8001a80:	f003 fa02 	bl	8004e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001a84:	2304      	movs	r3, #4
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480a      	ldr	r0, [pc, #40]	@ (8001ac4 <MX_GPIO_Init+0x4b4>)
 8001a9c:	f003 f9f4 	bl	8004e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3740      	adds	r7, #64	@ 0x40
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	58022000 	.word	0x58022000
 8001aac:	58021000 	.word	0x58021000
 8001ab0:	58021800 	.word	0x58021800
 8001ab4:	58022800 	.word	0x58022800
 8001ab8:	58021400 	.word	0x58021400
 8001abc:	58021c00 	.word	0x58021c00
 8001ac0:	58020000 	.word	0x58020000
 8001ac4:	58022400 	.word	0x58022400

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <Error_Handler+0x8>

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_MspInit+0x30>)
 8001adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ae0:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <HAL_MspInit+0x30>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_MspInit+0x30>)
 8001aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	58024400 	.word	0x58024400

08001b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b090      	sub	sp, #64	@ 0x40
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a72      	ldr	r2, [pc, #456]	@ (8001cf0 <HAL_ADC_MspInit+0x1e8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d14e      	bne.n	8001bc8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b2a:	4b72      	ldr	r3, [pc, #456]	@ (8001cf4 <HAL_ADC_MspInit+0x1ec>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a70      	ldr	r2, [pc, #448]	@ (8001cf4 <HAL_ADC_MspInit+0x1ec>)
 8001b32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b34:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf4 <HAL_ADC_MspInit+0x1ec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10e      	bne.n	8001b5a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b3c:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b42:	4a6d      	ldr	r2, [pc, #436]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b67      	ldr	r3, [pc, #412]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b60:	4a65      	ldr	r2, [pc, #404]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b6a:	4b63      	ldr	r3, [pc, #396]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b88:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b96:	2301      	movs	r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4854      	ldr	r0, [pc, #336]	@ (8001cfc <HAL_ADC_MspInit+0x1f4>)
 8001baa:	f003 f96d 	bl	8004e88 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001bae:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001bb2:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001bb6:	f001 f83b 	bl	8002c30 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001bba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bbe:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001bc2:	f001 f835 	bl	8002c30 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bc6:	e08f      	b.n	8001ce8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d00 <HAL_ADC_MspInit+0x1f8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d133      	bne.n	8001c3a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bd2:	4b48      	ldr	r3, [pc, #288]	@ (8001cf4 <HAL_ADC_MspInit+0x1ec>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a46      	ldr	r2, [pc, #280]	@ (8001cf4 <HAL_ADC_MspInit+0x1ec>)
 8001bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bdc:	4b45      	ldr	r3, [pc, #276]	@ (8001cf4 <HAL_ADC_MspInit+0x1ec>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10e      	bne.n	8001c02 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001be4:	4b44      	ldr	r3, [pc, #272]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bea:	4a43      	ldr	r2, [pc, #268]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001bf4:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c08:	4a3b      	ldr	r2, [pc, #236]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c12:	4b39      	ldr	r3, [pc, #228]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001c20:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001c24:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001c28:	f001 f802 	bl	8002c30 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001c2c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c30:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001c34:	f000 fffc 	bl	8002c30 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001c38:	e056      	b.n	8001ce8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a31      	ldr	r2, [pc, #196]	@ (8001d04 <HAL_ADC_MspInit+0x1fc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d151      	bne.n	8001ce8 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c44:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c54:	4b28      	ldr	r3, [pc, #160]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c62:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c68:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c6a:	f043 0320 	orr.w	r3, r3, #32
 8001c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c86:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_ADC_MspInit+0x1f0>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4815      	ldr	r0, [pc, #84]	@ (8001d08 <HAL_ADC_MspInit+0x200>)
 8001cb4:	f003 f8e8 	bl	8004e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <HAL_ADC_MspInit+0x1f4>)
 8001ccc:	f003 f8dc 	bl	8004e88 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001cd0:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001cd4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001cd8:	f000 ffaa 	bl	8002c30 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001cdc:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001ce0:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001ce4:	f000 ffa4 	bl	8002c30 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ce8:	bf00      	nop
 8001cea:	3740      	adds	r7, #64	@ 0x40
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	24000c48 	.word	0x24000c48
 8001cf8:	58024400 	.word	0x58024400
 8001cfc:	58020800 	.word	0x58020800
 8001d00:	40022100 	.word	0x40022100
 8001d04:	58026000 	.word	0x58026000
 8001d08:	58021400 	.word	0x58021400

08001d0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b092      	sub	sp, #72	@ 0x48
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a87      	ldr	r2, [pc, #540]	@ (8001f48 <HAL_ETH_MspInit+0x23c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f040 8108 	bne.w	8001f40 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001d30:	4b86      	ldr	r3, [pc, #536]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d36:	4a85      	ldr	r2, [pc, #532]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d40:	4b82      	ldr	r3, [pc, #520]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d54:	4a7d      	ldr	r2, [pc, #500]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001d6c:	4b77      	ldr	r3, [pc, #476]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d72:	4a76      	ldr	r2, [pc, #472]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d7c:	4b73      	ldr	r3, [pc, #460]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d8a:	4b70      	ldr	r3, [pc, #448]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d90:	4a6e      	ldr	r2, [pc, #440]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da8:	4b68      	ldr	r3, [pc, #416]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a67      	ldr	r2, [pc, #412]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b64      	ldr	r3, [pc, #400]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dc6:	4b61      	ldr	r3, [pc, #388]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a5f      	ldr	r2, [pc, #380]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dea:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df4:	4b55      	ldr	r3, [pc, #340]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	4b52      	ldr	r3, [pc, #328]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e08:	4a50      	ldr	r2, [pc, #320]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e12:	4b4e      	ldr	r3, [pc, #312]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b4a      	ldr	r3, [pc, #296]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e26:	4a49      	ldr	r2, [pc, #292]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e30:	4b46      	ldr	r3, [pc, #280]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b43      	ldr	r3, [pc, #268]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	4a41      	ldr	r2, [pc, #260]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_ETH_MspInit+0x240>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001e5c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001e60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e6e:	230b      	movs	r3, #11
 8001e70:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e76:	4619      	mov	r1, r3
 8001e78:	4835      	ldr	r0, [pc, #212]	@ (8001f50 <HAL_ETH_MspInit+0x244>)
 8001e7a:	f003 f805 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e8e:	230b      	movs	r3, #11
 8001e90:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e96:	4619      	mov	r1, r3
 8001e98:	482e      	ldr	r0, [pc, #184]	@ (8001f54 <HAL_ETH_MspInit+0x248>)
 8001e9a:	f002 fff5 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ea2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eb0:	230b      	movs	r3, #11
 8001eb2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4827      	ldr	r0, [pc, #156]	@ (8001f58 <HAL_ETH_MspInit+0x24c>)
 8001ebc:	f002 ffe4 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001ec0:	233e      	movs	r3, #62	@ 0x3e
 8001ec2:	637b      	str	r3, [r7, #52]	@ 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ed0:	230b      	movs	r3, #11
 8001ed2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4820      	ldr	r0, [pc, #128]	@ (8001f5c <HAL_ETH_MspInit+0x250>)
 8001edc:	f002 ffd4 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ef0:	230b      	movs	r3, #11
 8001ef2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ef4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4819      	ldr	r0, [pc, #100]	@ (8001f60 <HAL_ETH_MspInit+0x254>)
 8001efc:	f002 ffc4 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001f00:	2386      	movs	r3, #134	@ 0x86
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f10:	230b      	movs	r3, #11
 8001f12:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <HAL_ETH_MspInit+0x258>)
 8001f1c:	f002 ffb4 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001f20:	2303      	movs	r3, #3
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f30:	230b      	movs	r3, #11
 8001f32:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480b      	ldr	r0, [pc, #44]	@ (8001f68 <HAL_ETH_MspInit+0x25c>)
 8001f3c:	f002 ffa4 	bl	8004e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3748      	adds	r7, #72	@ 0x48
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40028000 	.word	0x40028000
 8001f4c:	58024400 	.word	0x58024400
 8001f50:	58021800 	.word	0x58021800
 8001f54:	58021000 	.word	0x58021000
 8001f58:	58022000 	.word	0x58022000
 8001f5c:	58020800 	.word	0x58020800
 8001f60:	58021c00 	.word	0x58021c00
 8001f64:	58020000 	.word	0x58020000
 8001f68:	58020400 	.word	0x58020400

08001f6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0bc      	sub	sp, #240	@ 0xf0
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	22c0      	movs	r2, #192	@ 0xc0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f009 ffaa 	bl	800bee6 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a57      	ldr	r2, [pc, #348]	@ (80020f4 <HAL_FDCAN_MspInit+0x188>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d151      	bne.n	8002040 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001fa8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 f9b7 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001fc0:	f7ff fd82 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80020f8 <HAL_FDCAN_MspInit+0x18c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4a4b      	ldr	r2, [pc, #300]	@ (80020f8 <HAL_FDCAN_MspInit+0x18c>)
 8001fcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fce:	4b4a      	ldr	r3, [pc, #296]	@ (80020f8 <HAL_FDCAN_MspInit+0x18c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fd6:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8001fd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001fdc:	4a47      	ldr	r2, [pc, #284]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001fe6:	4b45      	ldr	r3, [pc, #276]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8001fe8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff4:	4b41      	ldr	r3, [pc, #260]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffa:	4a40      	ldr	r2, [pc, #256]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002004:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8002012:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800202c:	2309      	movs	r3, #9
 800202e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002032:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002036:	4619      	mov	r1, r3
 8002038:	4831      	ldr	r0, [pc, #196]	@ (8002100 <HAL_FDCAN_MspInit+0x194>)
 800203a:	f002 ff25 	bl	8004e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800203e:	e055      	b.n	80020ec <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2f      	ldr	r2, [pc, #188]	@ (8002104 <HAL_FDCAN_MspInit+0x198>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d150      	bne.n	80020ec <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800204a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002056:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800205a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205e:	f107 0318 	add.w	r3, r7, #24
 8002062:	4618      	mov	r0, r3
 8002064:	f005 f960 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 800206e:	f7ff fd2b 	bl	8001ac8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002072:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <HAL_FDCAN_MspInit+0x18c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a1f      	ldr	r2, [pc, #124]	@ (80020f8 <HAL_FDCAN_MspInit+0x18c>)
 800207a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800207c:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <HAL_FDCAN_MspInit+0x18c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10e      	bne.n	80020a2 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8002086:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002090:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 8002096:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b2:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <HAL_FDCAN_MspInit+0x190>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 80020c0:	f242 0320 	movw	r3, #8224	@ 0x2020
 80020c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80020da:	2309      	movs	r3, #9
 80020dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020e4:	4619      	mov	r1, r3
 80020e6:	4808      	ldr	r0, [pc, #32]	@ (8002108 <HAL_FDCAN_MspInit+0x19c>)
 80020e8:	f002 fece 	bl	8004e88 <HAL_GPIO_Init>
}
 80020ec:	bf00      	nop
 80020ee:	37f0      	adds	r7, #240	@ 0xf0
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	4000a000 	.word	0x4000a000
 80020f8:	24000c4c 	.word	0x24000c4c
 80020fc:	58024400 	.word	0x58024400
 8002100:	58021c00 	.word	0x58021c00
 8002104:	4000a400 	.word	0x4000a400
 8002108:	58020400 	.word	0x58020400

0800210c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0ba      	sub	sp, #232	@ 0xe8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	22c0      	movs	r2, #192	@ 0xc0
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f009 feda 	bl	800bee6 <memset>
  if(hi2c->Instance==I2C4)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <HAL_I2C_MspInit+0xc8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d146      	bne.n	80021ca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800213c:	f04f 0210 	mov.w	r2, #16
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4618      	mov	r0, r3
 8002154:	f005 f8e8 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800215e:	f7ff fcb3 	bl	8001ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_I2C_MspInit+0xcc>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	4a1b      	ldr	r2, [pc, #108]	@ (80021d8 <HAL_I2C_MspInit+0xcc>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_I2C_MspInit+0xcc>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002180:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002184:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002188:	2312      	movs	r3, #18
 800218a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800219a:	2304      	movs	r3, #4
 800219c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021a4:	4619      	mov	r1, r3
 80021a6:	480d      	ldr	r0, [pc, #52]	@ (80021dc <HAL_I2C_MspInit+0xd0>)
 80021a8:	f002 fe6e 	bl	8004e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_I2C_MspInit+0xcc>)
 80021ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021b2:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <HAL_I2C_MspInit+0xcc>)
 80021b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_I2C_MspInit+0xcc>)
 80021be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	37e8      	adds	r7, #232	@ 0xe8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	58001c00 	.word	0x58001c00
 80021d8:	58024400 	.word	0x58024400
 80021dc:	58020c00 	.word	0x58020c00

080021e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0be      	sub	sp, #248	@ 0xf8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	22c0      	movs	r2, #192	@ 0xc0
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f009 fe70 	bl	800bee6 <memset>
  if(hltdc->Instance==LTDC)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a66      	ldr	r2, [pc, #408]	@ (80023a4 <HAL_LTDC_MspInit+0x1c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	f040 80c4 	bne.w	800239a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002212:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800221e:	2320      	movs	r3, #32
 8002220:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8002222:	23c0      	movs	r3, #192	@ 0xc0
 8002224:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002226:	2302      	movs	r3, #2
 8002228:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800222a:	2302      	movs	r3, #2
 800222c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800222e:	2302      	movs	r3, #2
 8002230:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002232:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002236:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800223c:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002242:	f107 0320 	add.w	r3, r7, #32
 8002246:	4618      	mov	r0, r3
 8002248:	f005 f86e 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002252:	f7ff fc39 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002256:	4b54      	ldr	r3, [pc, #336]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 8002258:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002266:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 8002268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002274:	4b4c      	ldr	r3, [pc, #304]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227a:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 800227c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002284:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002292:	4b45      	ldr	r3, [pc, #276]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002298:	4a43      	ldr	r2, [pc, #268]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022b0:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b6:	4a3c      	ldr	r2, [pc, #240]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 80022b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c0:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ce:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	4a34      	ldr	r2, [pc, #208]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 80022d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022de:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_LTDC_MspInit+0x1c8>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80022ec:	23fc      	movs	r3, #252	@ 0xfc
 80022ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002304:	230e      	movs	r3, #14
 8002306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800230a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800230e:	4619      	mov	r1, r3
 8002310:	4826      	ldr	r0, [pc, #152]	@ (80023ac <HAL_LTDC_MspInit+0x1cc>)
 8002312:	f002 fdb9 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8002316:	f24d 2303 	movw	r3, #53763	@ 0xd203
 800231a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002330:	230e      	movs	r3, #14
 8002332:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002336:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800233a:	4619      	mov	r1, r3
 800233c:	481c      	ldr	r0, [pc, #112]	@ (80023b0 <HAL_LTDC_MspInit+0x1d0>)
 800233e:	f002 fda3 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002342:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8002346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800235c:	230e      	movs	r3, #14
 800235e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002362:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002366:	4619      	mov	r1, r3
 8002368:	4812      	ldr	r0, [pc, #72]	@ (80023b4 <HAL_LTDC_MspInit+0x1d4>)
 800236a:	f002 fd8d 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800236e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002388:	230e      	movs	r3, #14
 800238a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800238e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002392:	4619      	mov	r1, r3
 8002394:	4808      	ldr	r0, [pc, #32]	@ (80023b8 <HAL_LTDC_MspInit+0x1d8>)
 8002396:	f002 fd77 	bl	8004e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	37f8      	adds	r7, #248	@ 0xf8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	50001000 	.word	0x50001000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58022800 	.word	0x58022800
 80023b0:	58022000 	.word	0x58022000
 80023b4:	58022400 	.word	0x58022400
 80023b8:	58021c00 	.word	0x58021c00

080023bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0b2      	sub	sp, #200	@ 0xc8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	22c0      	movs	r2, #192	@ 0xc0
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f009 fd8a 	bl	800bee6 <memset>
  if(hrtc->Instance==RTC)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a10      	ldr	r2, [pc, #64]	@ (8002418 <HAL_RTC_MspInit+0x5c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d119      	bne.n	8002410 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f0:	f107 0308 	add.w	r3, r7, #8
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 ff97 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002400:	f7ff fb62 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RTC_MspInit+0x60>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002408:	4a04      	ldr	r2, [pc, #16]	@ (800241c <HAL_RTC_MspInit+0x60>)
 800240a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800240e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002410:	bf00      	nop
 8002412:	37c8      	adds	r7, #200	@ 0xc8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	58004000 	.word	0x58004000
 800241c:	58024400 	.word	0x58024400

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0ba      	sub	sp, #232	@ 0xe8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	22c0      	movs	r2, #192	@ 0xc0
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f009 fd50 	bl	800bee6 <memset>
  if(huart->Instance==USART3)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a27      	ldr	r2, [pc, #156]	@ (80024e8 <HAL_UART_MspInit+0xc8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d146      	bne.n	80024de <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002450:	f04f 0202 	mov.w	r2, #2
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4618      	mov	r0, r3
 8002468:	f004 ff5e 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002472:	f7ff fb29 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002476:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <HAL_UART_MspInit+0xcc>)
 8002478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800247c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <HAL_UART_MspInit+0xcc>)
 800247e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002482:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_UART_MspInit+0xcc>)
 8002488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800248c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <HAL_UART_MspInit+0xcc>)
 8002496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249a:	4a14      	ldr	r2, [pc, #80]	@ (80024ec <HAL_UART_MspInit+0xcc>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <HAL_UART_MspInit+0xcc>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80024b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024cc:	2307      	movs	r3, #7
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4805      	ldr	r0, [pc, #20]	@ (80024f0 <HAL_UART_MspInit+0xd0>)
 80024da:	f002 fcd5 	bl	8004e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024de:	bf00      	nop
 80024e0:	37e8      	adds	r7, #232	@ 0xe8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40004800 	.word	0x40004800
 80024ec:	58024400 	.word	0x58024400
 80024f0:	58020400 	.word	0x58020400

080024f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b0ba      	sub	sp, #232	@ 0xe8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	22c0      	movs	r2, #192	@ 0xc0
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f009 fce6 	bl	800bee6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a30      	ldr	r2, [pc, #192]	@ (80025e0 <HAL_PCD_MspInit+0xec>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d159      	bne.n	80025d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002524:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002530:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fef3 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002548:	f7ff fabe 	bl	8001ac8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800254c:	f003 fef6 	bl	800633c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002550:	4b24      	ldr	r3, [pc, #144]	@ (80025e4 <HAL_PCD_MspInit+0xf0>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002556:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <HAL_PCD_MspInit+0xf0>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002560:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_PCD_MspInit+0xf0>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800256e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002586:	4619      	mov	r1, r3
 8002588:	4817      	ldr	r0, [pc, #92]	@ (80025e8 <HAL_PCD_MspInit+0xf4>)
 800258a:	f002 fc7d 	bl	8004e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800258e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80025a8:	230a      	movs	r3, #10
 80025aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025b2:	4619      	mov	r1, r3
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <HAL_PCD_MspInit+0xf4>)
 80025b6:	f002 fc67 	bl	8004e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_PCD_MspInit+0xf0>)
 80025bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025c0:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <HAL_PCD_MspInit+0xf0>)
 80025c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80025c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_PCD_MspInit+0xf0>)
 80025cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80025d8:	bf00      	nop
 80025da:	37e8      	adds	r7, #232	@ 0xe8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40080000 	.word	0x40080000
 80025e4:	58024400 	.word	0x58024400
 80025e8:	58020000 	.word	0x58020000

080025ec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0b8      	sub	sp, #224	@ 0xe0
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025f2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002602:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <HAL_FMC_MspInit+0x15c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 8099 	bne.w	800273e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800260c:	4b4e      	ldr	r3, [pc, #312]	@ (8002748 <HAL_FMC_MspInit+0x15c>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	22c0      	movs	r2, #192	@ 0xc0
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f009 fc63 	bl	800bee6 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800262c:	2300      	movs	r3, #0
 800262e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4618      	mov	r0, r3
 8002636:	f004 fe77 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002640:	f7ff fa42 	bl	8001ac8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002644:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_FMC_MspInit+0x160>)
 8002646:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800264a:	4a40      	ldr	r2, [pc, #256]	@ (800274c <HAL_FMC_MspInit+0x160>)
 800264c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002650:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002654:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_FMC_MspInit+0x160>)
 8002656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800265a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002662:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002666:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800267c:	230c      	movs	r3, #12
 800267e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002682:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002686:	4619      	mov	r1, r3
 8002688:	4831      	ldr	r0, [pc, #196]	@ (8002750 <HAL_FMC_MspInit+0x164>)
 800268a:	f002 fbfd 	bl	8004e88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800268e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002692:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a8:	230c      	movs	r3, #12
 80026aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026b2:	4619      	mov	r1, r3
 80026b4:	4827      	ldr	r0, [pc, #156]	@ (8002754 <HAL_FMC_MspInit+0x168>)
 80026b6:	f002 fbe7 	bl	8004e88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80026ba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80026be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026d4:	230c      	movs	r3, #12
 80026d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026da:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026de:	4619      	mov	r1, r3
 80026e0:	481d      	ldr	r0, [pc, #116]	@ (8002758 <HAL_FMC_MspInit+0x16c>)
 80026e2:	f002 fbd1 	bl	8004e88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80026e6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80026ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002700:	230c      	movs	r3, #12
 8002702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002706:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800270a:	4619      	mov	r1, r3
 800270c:	4813      	ldr	r0, [pc, #76]	@ (800275c <HAL_FMC_MspInit+0x170>)
 800270e:	f002 fbbb 	bl	8004e88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002712:	23e0      	movs	r3, #224	@ 0xe0
 8002714:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800272a:	230c      	movs	r3, #12
 800272c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002730:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002734:	4619      	mov	r1, r3
 8002736:	480a      	ldr	r0, [pc, #40]	@ (8002760 <HAL_FMC_MspInit+0x174>)
 8002738:	f002 fba6 	bl	8004e88 <HAL_GPIO_Init>
 800273c:	e000      	b.n	8002740 <HAL_FMC_MspInit+0x154>
    return;
 800273e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002740:	37e0      	adds	r7, #224	@ 0xe0
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	24000c50 	.word	0x24000c50
 800274c:	58024400 	.word	0x58024400
 8002750:	58021000 	.word	0x58021000
 8002754:	58021800 	.word	0x58021800
 8002758:	58020c00 	.word	0x58020c00
 800275c:	58021400 	.word	0x58021400
 8002760:	58021c00 	.word	0x58021c00

08002764 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800276c:	f7ff ff3e 	bl	80025ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0ba      	sub	sp, #232	@ 0xe8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	22c0      	movs	r2, #192	@ 0xc0
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f009 fbac 	bl	800bee6 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a45      	ldr	r2, [pc, #276]	@ (80028a8 <HAL_SAI_MspInit+0x130>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d13e      	bne.n	8002816 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fdbb 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80027b8:	f7ff f986 	bl	8001ac8 <Error_Handler>
    }

    if (SAI2_client == 0)
 80027bc:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_SAI_MspInit+0x134>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10e      	bne.n	80027e2 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027c4:	4b3a      	ldr	r3, [pc, #232]	@ (80028b0 <HAL_SAI_MspInit+0x138>)
 80027c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ca:	4a39      	ldr	r2, [pc, #228]	@ (80028b0 <HAL_SAI_MspInit+0x138>)
 80027cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027d4:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <HAL_SAI_MspInit+0x138>)
 80027d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80027e2:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_SAI_MspInit+0x134>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a30      	ldr	r2, [pc, #192]	@ (80028ac <HAL_SAI_MspInit+0x134>)
 80027ea:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80027ec:	23f0      	movs	r3, #240	@ 0xf0
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002804:	230a      	movs	r3, #10
 8002806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800280a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800280e:	4619      	mov	r1, r3
 8002810:	4828      	ldr	r0, [pc, #160]	@ (80028b4 <HAL_SAI_MspInit+0x13c>)
 8002812:	f002 fb39 	bl	8004e88 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a27      	ldr	r2, [pc, #156]	@ (80028b8 <HAL_SAI_MspInit+0x140>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d13f      	bne.n	80028a0 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800282c:	2300      	movs	r3, #0
 800282e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4618      	mov	r0, r3
 8002836:	f004 fd77 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002840:	f7ff f942 	bl	8001ac8 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_SAI_MspInit+0x134>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10e      	bne.n	800286a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800284c:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <HAL_SAI_MspInit+0x138>)
 800284e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002852:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <HAL_SAI_MspInit+0x138>)
 8002854:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002858:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800285c:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <HAL_SAI_MspInit+0x138>)
 800285e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_SAI_MspInit+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <HAL_SAI_MspInit+0x134>)
 8002872:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002878:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800288e:	230a      	movs	r3, #10
 8002890:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002894:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002898:	4619      	mov	r1, r3
 800289a:	4808      	ldr	r0, [pc, #32]	@ (80028bc <HAL_SAI_MspInit+0x144>)
 800289c:	f002 faf4 	bl	8004e88 <HAL_GPIO_Init>

    }
}
 80028a0:	bf00      	nop
 80028a2:	37e8      	adds	r7, #232	@ 0xe8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40015c04 	.word	0x40015c04
 80028ac:	24000c54 	.word	0x24000c54
 80028b0:	58024400 	.word	0x58024400
 80028b4:	58022000 	.word	0x58022000
 80028b8:	40015c24 	.word	0x40015c24
 80028bc:	58021800 	.word	0x58021800

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <NMI_Handler+0x4>

080028c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <MemManage_Handler+0x4>

080028d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <BusFault_Handler+0x4>

080028e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <UsageFault_Handler+0x4>

080028e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002916:	f000 f927 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002924:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <SystemInit+0xe4>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	4a36      	ldr	r2, [pc, #216]	@ (8002a04 <SystemInit+0xe4>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002934:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <SystemInit+0xe8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	2b06      	cmp	r3, #6
 800293e:	d807      	bhi.n	8002950 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002940:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <SystemInit+0xe8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 030f 	bic.w	r3, r3, #15
 8002948:	4a2f      	ldr	r2, [pc, #188]	@ (8002a08 <SystemInit+0xe8>)
 800294a:	f043 0307 	orr.w	r3, r3, #7
 800294e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002950:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <SystemInit+0xec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2d      	ldr	r2, [pc, #180]	@ (8002a0c <SystemInit+0xec>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800295c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a0c <SystemInit+0xec>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002962:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <SystemInit+0xec>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4929      	ldr	r1, [pc, #164]	@ (8002a0c <SystemInit+0xec>)
 8002968:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <SystemInit+0xf0>)
 800296a:	4013      	ands	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800296e:	4b26      	ldr	r3, [pc, #152]	@ (8002a08 <SystemInit+0xe8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800297a:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <SystemInit+0xe8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 030f 	bic.w	r3, r3, #15
 8002982:	4a21      	ldr	r2, [pc, #132]	@ (8002a08 <SystemInit+0xe8>)
 8002984:	f043 0307 	orr.w	r3, r3, #7
 8002988:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800298a:	4b20      	ldr	r3, [pc, #128]	@ (8002a0c <SystemInit+0xec>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <SystemInit+0xec>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002996:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <SystemInit+0xec>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800299c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <SystemInit+0xec>)
 800299e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <SystemInit+0xf4>)
 80029a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <SystemInit+0xec>)
 80029a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a18 <SystemInit+0xf8>)
 80029a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029a8:	4b18      	ldr	r3, [pc, #96]	@ (8002a0c <SystemInit+0xec>)
 80029aa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <SystemInit+0xfc>)
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029ae:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <SystemInit+0xec>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029b4:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <SystemInit+0xec>)
 80029b6:	4a19      	ldr	r2, [pc, #100]	@ (8002a1c <SystemInit+0xfc>)
 80029b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <SystemInit+0xec>)
 80029bc:	2200      	movs	r2, #0
 80029be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029c0:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <SystemInit+0xec>)
 80029c2:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <SystemInit+0xfc>)
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029c6:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <SystemInit+0xec>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a0c <SystemInit+0xec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a0c <SystemInit+0xec>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <SystemInit+0xec>)
 80029da:	2200      	movs	r2, #0
 80029dc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <SystemInit+0x100>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <SystemInit+0x104>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ea:	d202      	bcs.n	80029f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <SystemInit+0x108>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <SystemInit+0x10c>)
 80029f4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80029f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	52002000 	.word	0x52002000
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a14:	02020200 	.word	0x02020200
 8002a18:	01ff0000 	.word	0x01ff0000
 8002a1c:	01010280 	.word	0x01010280
 8002a20:	5c001000 	.word	0x5c001000
 8002a24:	ffff0000 	.word	0xffff0000
 8002a28:	51008108 	.word	0x51008108
 8002a2c:	52004000 	.word	0x52004000

08002a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a34:	f7ff ff74 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	@ (8002a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	@ (8002a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f009 fa4b 	bl	800bef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a62:	f7fe f801 	bl	8000a68 <main>
  bx  lr
 8002a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a70:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002a74:	0800c008 	.word	0x0800c008
  ldr r2, =_sbss
 8002a78:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8002a7c:	24000c5c 	.word	0x24000c5c

08002a80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC3_IRQHandler>
	...

08002a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	f001 fa32 	bl	8003ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a90:	f004 fa74 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <HAL_Init+0x68>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	4913      	ldr	r1, [pc, #76]	@ (8002af0 <HAL_Init+0x6c>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <HAL_Init+0x68>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8002af0 <HAL_Init+0x6c>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8002af4 <HAL_Init+0x70>)
 8002ac6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <HAL_Init+0x74>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f814 	bl	8002afc <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e002      	b.n	8002ae4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ade:	f7fe fff9 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58024400 	.word	0x58024400
 8002af0:	0800bfc0 	.word	0x0800bfc0
 8002af4:	24000008 	.word	0x24000008
 8002af8:	24000004 	.word	0x24000004

08002afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_InitTick+0x60>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e021      	b.n	8002b54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b10:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <HAL_InitTick+0x64>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_InitTick+0x60>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 fa09 	bl	8003f3e <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b44:	f001 f9e1 	bl	8003f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	@ (8002b64 <HAL_InitTick+0x68>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	24000010 	.word	0x24000010
 8002b60:	24000004 	.word	0x24000004
 8002b64:	2400000c 	.word	0x2400000c

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	24000010 	.word	0x24000010
 8002b8c:	24000c58 	.word	0x24000c58

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	24000c58 	.word	0x24000c58

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bc0:	d005      	beq.n	8002bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <HAL_Delay+0x44>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bce:	bf00      	nop
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8f7      	bhi.n	8002bd0 <HAL_Delay+0x28>
  {
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	24000010 	.word	0x24000010

08002bf0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_GetREVID+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	5c001000 	.word	0x5c001000

08002c08 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002c18:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	58000400 	.word	0x58000400

08002c30 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002c3a:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	4904      	ldr	r1, [pc, #16]	@ (8002c58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	58000400 	.word	0x58000400

08002c5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	609a      	str	r2, [r3, #8]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3360      	adds	r3, #96	@ 0x60
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	611a      	str	r2, [r3, #16]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b087      	sub	sp, #28
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3360      	adds	r3, #96	@ 0x60
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	601a      	str	r2, [r3, #0]
  }
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3330      	adds	r3, #48	@ 0x30
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	4413      	add	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	211f      	movs	r1, #31
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 011f 	and.w	r1, r3, #31
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	431a      	orrs	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	0e5b      	lsrs	r3, r3, #25
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	4413      	add	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0d1b      	lsrs	r3, r3, #20
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2107      	movs	r1, #7
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0d1b      	lsrs	r3, r3, #20
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0318 	and.w	r3, r3, #24
 8002e3e:	4908      	ldr	r1, [pc, #32]	@ (8002e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e40:	40d9      	lsrs	r1, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	400b      	ands	r3, r1
 8002e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	000fffff 	.word	0x000fffff

08002e64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6093      	str	r3, [r2, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	5fffffc0 	.word	0x5fffffc0

08002e88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e9c:	d101      	bne.n	8002ea2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	6fffffc0 	.word	0x6fffffc0

08002ed8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eec:	d101      	bne.n	8002ef2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <LL_ADC_IsEnabled+0x18>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <LL_ADC_IsEnabled+0x1a>
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d101      	bne.n	8002f3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d101      	bne.n	8002f64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e18f      	b.n	80032ae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe fdb3 	bl	8001b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff67 	bl	8002e88 <LL_ADC_IsDeepPowerDownEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff4d 	bl	8002e64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff82 	bl	8002ed8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d114      	bne.n	8003004 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ff66 	bl	8002eb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe4:	4b87      	ldr	r3, [pc, #540]	@ (8003204 <HAL_ADC_Init+0x290>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	4a87      	ldr	r2, [pc, #540]	@ (8003208 <HAL_ADC_Init+0x294>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ff6:	e002      	b.n	8002ffe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f9      	bne.n	8002ff8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff65 	bl	8002ed8 <LL_ADC_IsInternalRegulatorEnabled>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	f043 0210 	orr.w	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff76 	bl	8002f26 <LL_ADC_REG_IsConversionOngoing>
 800303a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 8129 	bne.w	800329c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8125 	bne.w	800329c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003056:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff4a 	bl	8002f00 <LL_ADC_IsEnabled>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d136      	bne.n	80030e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a65      	ldr	r2, [pc, #404]	@ (800320c <HAL_ADC_Init+0x298>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_ADC_Init+0x112>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a63      	ldr	r2, [pc, #396]	@ (8003210 <HAL_ADC_Init+0x29c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10e      	bne.n	80030a4 <HAL_ADC_Init+0x130>
 8003086:	4861      	ldr	r0, [pc, #388]	@ (800320c <HAL_ADC_Init+0x298>)
 8003088:	f7ff ff3a 	bl	8002f00 <LL_ADC_IsEnabled>
 800308c:	4604      	mov	r4, r0
 800308e:	4860      	ldr	r0, [pc, #384]	@ (8003210 <HAL_ADC_Init+0x29c>)
 8003090:	f7ff ff36 	bl	8002f00 <LL_ADC_IsEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	4323      	orrs	r3, r4
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e008      	b.n	80030b6 <HAL_ADC_Init+0x142>
 80030a4:	485b      	ldr	r0, [pc, #364]	@ (8003214 <HAL_ADC_Init+0x2a0>)
 80030a6:	f7ff ff2b 	bl	8002f00 <LL_ADC_IsEnabled>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a53      	ldr	r2, [pc, #332]	@ (800320c <HAL_ADC_Init+0x298>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_ADC_Init+0x15a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a51      	ldr	r2, [pc, #324]	@ (8003210 <HAL_ADC_Init+0x29c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x15e>
 80030ce:	4a52      	ldr	r2, [pc, #328]	@ (8003218 <HAL_ADC_Init+0x2a4>)
 80030d0:	e000      	b.n	80030d4 <HAL_ADC_Init+0x160>
 80030d2:	4a52      	ldr	r2, [pc, #328]	@ (800321c <HAL_ADC_Init+0x2a8>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f7ff fdbe 	bl	8002c5c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030e0:	f7ff fd86 	bl	8002bf0 <HAL_GetREVID>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d914      	bls.n	8003118 <HAL_ADC_Init+0x1a4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d110      	bne.n	8003118 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7d5b      	ldrb	r3, [r3, #21]
 80030fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003100:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003106:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7f1b      	ldrb	r3, [r3, #28]
 800310c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800310e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003110:	f043 030c 	orr.w	r3, r3, #12
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e00d      	b.n	8003134 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7d5b      	ldrb	r3, [r3, #21]
 800311c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003122:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003128:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7f1b      	ldrb	r3, [r3, #28]
 800312e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7f1b      	ldrb	r3, [r3, #28]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	3b01      	subs	r3, #1
 8003142:	045b      	lsls	r3, r3, #17
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	4b2c      	ldr	r3, [pc, #176]	@ (8003220 <HAL_ADC_Init+0x2ac>)
 800316e:	4013      	ands	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	69b9      	ldr	r1, [r7, #24]
 8003176:	430b      	orrs	r3, r1
 8003178:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fed1 	bl	8002f26 <LL_ADC_REG_IsConversionOngoing>
 8003184:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fede 	bl	8002f4c <LL_ADC_INJ_IsConversionOngoing>
 8003190:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d15f      	bne.n	8003258 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d15c      	bne.n	8003258 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7d1b      	ldrb	r3, [r3, #20]
 80031a2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <HAL_ADC_Init+0x2b0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	430b      	orrs	r3, r1
 80031be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d130      	bne.n	800322c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <HAL_ADC_Init+0x2b4>)
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031de:	3a01      	subs	r2, #1
 80031e0:	0411      	lsls	r1, r2, #16
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031f2:	430a      	orrs	r2, r1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	611a      	str	r2, [r3, #16]
 8003200:	e01c      	b.n	800323c <HAL_ADC_Init+0x2c8>
 8003202:	bf00      	nop
 8003204:	24000004 	.word	0x24000004
 8003208:	053e2d63 	.word	0x053e2d63
 800320c:	40022000 	.word	0x40022000
 8003210:	40022100 	.word	0x40022100
 8003214:	58026000 	.word	0x58026000
 8003218:	40022300 	.word	0x40022300
 800321c:	58026300 	.word	0x58026300
 8003220:	fff0c003 	.word	0xfff0c003
 8003224:	ffffbffc 	.word	0xffffbffc
 8003228:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fb8c 	bl	8003970 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10c      	bne.n	800327a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f023 010f 	bic.w	r1, r3, #15
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	1e5a      	subs	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
 8003278:	e007      	b.n	800328a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 020f 	bic.w	r2, r2, #15
 8003288:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54
 800329a:	e007      	b.n	80032ac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	f043 0210 	orr.w	r2, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	@ 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}
 80032b6:	bf00      	nop

080032b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b0a1      	sub	sp, #132	@ 0x84
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_ADC_ConfigChannel+0x1b0>)
 80032d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x2a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e32e      	b.n	8003940 <HAL_ADC_ConfigChannel+0x688>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fe19 	bl	8002f26 <LL_ADC_REG_IsConversionOngoing>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 8313 	bne.w	8003922 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db2c      	blt.n	800335e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x6a>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2201      	movs	r2, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	e016      	b.n	8003350 <HAL_ADC_ConfigChannel+0x98>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003332:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e003      	b.n	8003346 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800333e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	69d1      	ldr	r1, [r2, #28]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	430b      	orrs	r3, r1
 800335c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7ff fcfe 	bl	8002d6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fdd6 	bl	8002f26 <LL_ADC_REG_IsConversionOngoing>
 800337a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fde3 	bl	8002f4c <LL_ADC_INJ_IsConversionOngoing>
 8003386:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 80b8 	bne.w	8003500 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 80b4 	bne.w	8003500 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f7ff fd0d 	bl	8002dc4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033aa:	4b30      	ldr	r3, [pc, #192]	@ (800346c <HAL_ADC_ConfigChannel+0x1b4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033b6:	d10b      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x118>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	e01d      	b.n	800340c <HAL_ADC_ConfigChannel+0x154>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x13e>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	e00a      	b.n	800340c <HAL_ADC_ConfigChannel+0x154>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d02c      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003424:	f7ff fc4e 	bl	8002cc4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6919      	ldr	r1, [r3, #16]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	7e5b      	ldrb	r3, [r3, #25]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_ADC_ConfigChannel+0x186>
 8003438:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800343c:	e000      	b.n	8003440 <HAL_ADC_ConfigChannel+0x188>
 800343e:	2300      	movs	r3, #0
 8003440:	461a      	mov	r2, r3
 8003442:	f7ff fc78 	bl	8002d36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6919      	ldr	r1, [r3, #16]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	7e1b      	ldrb	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_ADC_ConfigChannel+0x1a4>
 8003456:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800345a:	e000      	b.n	800345e <HAL_ADC_ConfigChannel+0x1a6>
 800345c:	2300      	movs	r3, #0
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fc50 	bl	8002d04 <LL_ADC_SetDataRightShift>
 8003464:	e04c      	b.n	8003500 <HAL_ADC_ConfigChannel+0x248>
 8003466:	bf00      	nop
 8003468:	47ff0000 	.word	0x47ff0000
 800346c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	069b      	lsls	r3, r3, #26
 8003480:	429a      	cmp	r2, r3
 8003482:	d107      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003492:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800349a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	069b      	lsls	r3, r3, #26
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d107      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034b6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	069b      	lsls	r3, r3, #26
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d107      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034da:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	069b      	lsls	r3, r3, #26
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d107      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fcfb 	bl	8002f00 <LL_ADC_IsEnabled>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 8211 	bne.w	8003934 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	461a      	mov	r2, r3
 8003520:	f7ff fc7c 	bl	8002e1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4aa1      	ldr	r2, [pc, #644]	@ (80037b0 <HAL_ADC_ConfigChannel+0x4f8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	f040 812e 	bne.w	800378c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10b      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x2a0>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	3301      	adds	r3, #1
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2b09      	cmp	r3, #9
 800354e:	bf94      	ite	ls
 8003550:	2301      	movls	r3, #1
 8003552:	2300      	movhi	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e019      	b.n	800358c <HAL_ADC_ConfigChannel+0x2d4>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003568:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800356a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e003      	b.n	800357c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2b09      	cmp	r3, #9
 8003584:	bf94      	ite	ls
 8003586:	2301      	movls	r3, #1
 8003588:	2300      	movhi	r3, #0
 800358a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358c:	2b00      	cmp	r3, #0
 800358e:	d079      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x2f4>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	3301      	adds	r3, #1
 80035a4:	069b      	lsls	r3, r3, #26
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035aa:	e015      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x320>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80035be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80035c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	069b      	lsls	r3, r3, #26
 80035d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x340>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	e017      	b.n	8003628 <HAL_ADC_ConfigChannel+0x370>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003608:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800360a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e003      	b.n	800361c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	ea42 0103 	orr.w	r1, r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_ADC_ConfigChannel+0x396>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0e9b      	lsrs	r3, r3, #26
 800363e:	3301      	adds	r3, #1
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	051b      	lsls	r3, r3, #20
 800364c:	e018      	b.n	8003680 <HAL_ADC_ConfigChannel+0x3c8>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e003      	b.n	8003672 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003680:	430b      	orrs	r3, r1
 8003682:	e07e      	b.n	8003782 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x3e8>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	3301      	adds	r3, #1
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800369e:	e015      	b.n	80036cc <HAL_ADC_ConfigChannel+0x414>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80036bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	069b      	lsls	r3, r3, #26
 80036c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x434>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	e017      	b.n	800371c <HAL_ADC_ConfigChannel+0x464>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	61bb      	str	r3, [r7, #24]
  return result;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e003      	b.n	8003710 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	ea42 0103 	orr.w	r1, r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x490>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0e9b      	lsrs	r3, r3, #26
 8003732:	3301      	adds	r3, #1
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	3b1e      	subs	r3, #30
 8003740:	051b      	lsls	r3, r3, #20
 8003742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003746:	e01b      	b.n	8003780 <HAL_ADC_ConfigChannel+0x4c8>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	60fb      	str	r3, [r7, #12]
  return result;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	3b1e      	subs	r3, #30
 800377a:	051b      	lsls	r3, r3, #20
 800377c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	430b      	orrs	r3, r1
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	4619      	mov	r1, r3
 8003788:	f7ff fb1c 	bl	8002dc4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f280 80cf 	bge.w	8003934 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a06      	ldr	r2, [pc, #24]	@ (80037b4 <HAL_ADC_ConfigChannel+0x4fc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x4f2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_ADC_ConfigChannel+0x500>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10a      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x508>
 80037aa:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <HAL_ADC_ConfigChannel+0x504>)
 80037ac:	e009      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x50a>
 80037ae:	bf00      	nop
 80037b0:	47ff0000 	.word	0x47ff0000
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40022100 	.word	0x40022100
 80037bc:	40022300 	.word	0x40022300
 80037c0:	4b61      	ldr	r3, [pc, #388]	@ (8003948 <HAL_ADC_ConfigChannel+0x690>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fa70 	bl	8002ca8 <LL_ADC_GetCommonPathInternalCh>
 80037c8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5f      	ldr	r2, [pc, #380]	@ (800394c <HAL_ADC_ConfigChannel+0x694>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_ADC_ConfigChannel+0x526>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003950 <HAL_ADC_ConfigChannel+0x698>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10e      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x544>
 80037de:	485b      	ldr	r0, [pc, #364]	@ (800394c <HAL_ADC_ConfigChannel+0x694>)
 80037e0:	f7ff fb8e 	bl	8002f00 <LL_ADC_IsEnabled>
 80037e4:	4604      	mov	r4, r0
 80037e6:	485a      	ldr	r0, [pc, #360]	@ (8003950 <HAL_ADC_ConfigChannel+0x698>)
 80037e8:	f7ff fb8a 	bl	8002f00 <LL_ADC_IsEnabled>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4323      	orrs	r3, r4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e008      	b.n	800380e <HAL_ADC_ConfigChannel+0x556>
 80037fc:	4855      	ldr	r0, [pc, #340]	@ (8003954 <HAL_ADC_ConfigChannel+0x69c>)
 80037fe:	f7ff fb7f 	bl	8002f00 <LL_ADC_IsEnabled>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07d      	beq.n	800390e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a50      	ldr	r2, [pc, #320]	@ (8003958 <HAL_ADC_ConfigChannel+0x6a0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d130      	bne.n	800387e <HAL_ADC_ConfigChannel+0x5c6>
 800381c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800381e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d12b      	bne.n	800387e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a4a      	ldr	r2, [pc, #296]	@ (8003954 <HAL_ADC_ConfigChannel+0x69c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	f040 8081 	bne.w	8003934 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a45      	ldr	r2, [pc, #276]	@ (800394c <HAL_ADC_ConfigChannel+0x694>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_ADC_ConfigChannel+0x58e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a43      	ldr	r2, [pc, #268]	@ (8003950 <HAL_ADC_ConfigChannel+0x698>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_ADC_ConfigChannel+0x592>
 8003846:	4a45      	ldr	r2, [pc, #276]	@ (800395c <HAL_ADC_ConfigChannel+0x6a4>)
 8003848:	e000      	b.n	800384c <HAL_ADC_ConfigChannel+0x594>
 800384a:	4a3f      	ldr	r2, [pc, #252]	@ (8003948 <HAL_ADC_ConfigChannel+0x690>)
 800384c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7ff fa14 	bl	8002c82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800385a:	4b41      	ldr	r3, [pc, #260]	@ (8003960 <HAL_ADC_ConfigChannel+0x6a8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	4a40      	ldr	r2, [pc, #256]	@ (8003964 <HAL_ADC_ConfigChannel+0x6ac>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	3301      	adds	r3, #1
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800386e:	e002      	b.n	8003876 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3b01      	subs	r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f9      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800387c:	e05a      	b.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a39      	ldr	r2, [pc, #228]	@ (8003968 <HAL_ADC_ConfigChannel+0x6b0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d11e      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x60e>
 8003888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800388a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d119      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2f      	ldr	r2, [pc, #188]	@ (8003954 <HAL_ADC_ConfigChannel+0x69c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d14b      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	@ (800394c <HAL_ADC_ConfigChannel+0x694>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x5f8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <HAL_ADC_ConfigChannel+0x698>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5fc>
 80038b0:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <HAL_ADC_ConfigChannel+0x6a4>)
 80038b2:	e000      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x5fe>
 80038b4:	4a24      	ldr	r2, [pc, #144]	@ (8003948 <HAL_ADC_ConfigChannel+0x690>)
 80038b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7ff f9df 	bl	8002c82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c4:	e036      	b.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a28      	ldr	r2, [pc, #160]	@ (800396c <HAL_ADC_ConfigChannel+0x6b4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d131      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
 80038d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d12c      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HAL_ADC_ConfigChannel+0x69c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d127      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	@ (800394c <HAL_ADC_ConfigChannel+0x694>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_ADC_ConfigChannel+0x640>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a17      	ldr	r2, [pc, #92]	@ (8003950 <HAL_ADC_ConfigChannel+0x698>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x644>
 80038f8:	4a18      	ldr	r2, [pc, #96]	@ (800395c <HAL_ADC_ConfigChannel+0x6a4>)
 80038fa:	e000      	b.n	80038fe <HAL_ADC_ConfigChannel+0x646>
 80038fc:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <HAL_ADC_ConfigChannel+0x690>)
 80038fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003900:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7ff f9bb 	bl	8002c82 <LL_ADC_SetCommonPathInternalCh>
 800390c:	e012      	b.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003920:	e008      	b.n	8003934 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800393c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003940:	4618      	mov	r0, r3
 8003942:	3784      	adds	r7, #132	@ 0x84
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	58026300 	.word	0x58026300
 800394c:	40022000 	.word	0x40022000
 8003950:	40022100 	.word	0x40022100
 8003954:	58026000 	.word	0x58026000
 8003958:	cb840000 	.word	0xcb840000
 800395c:	40022300 	.word	0x40022300
 8003960:	24000004 	.word	0x24000004
 8003964:	053e2d63 	.word	0x053e2d63
 8003968:	c7520000 	.word	0xc7520000
 800396c:	cfb80000 	.word	0xcfb80000

08003970 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a7a      	ldr	r2, [pc, #488]	@ (8003b68 <ADC_ConfigureBoostMode+0x1f8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <ADC_ConfigureBoostMode+0x1c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a79      	ldr	r2, [pc, #484]	@ (8003b6c <ADC_ConfigureBoostMode+0x1fc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d109      	bne.n	80039a0 <ADC_ConfigureBoostMode+0x30>
 800398c:	4b78      	ldr	r3, [pc, #480]	@ (8003b70 <ADC_ConfigureBoostMode+0x200>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e008      	b.n	80039b2 <ADC_ConfigureBoostMode+0x42>
 80039a0:	4b74      	ldr	r3, [pc, #464]	@ (8003b74 <ADC_ConfigureBoostMode+0x204>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01c      	beq.n	80039f0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039b6:	f003 fc5b 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80039ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039c4:	d010      	beq.n	80039e8 <ADC_ConfigureBoostMode+0x78>
 80039c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039ca:	d873      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x144>
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d0:	d002      	beq.n	80039d8 <ADC_ConfigureBoostMode+0x68>
 80039d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d6:	d16d      	bne.n	8003ab4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	60fb      	str	r3, [r7, #12]
        break;
 80039e6:	e068      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	60fb      	str	r3, [r7, #12]
        break;
 80039ee:	e064      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	f004 fea0 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 80039fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a06:	d051      	beq.n	8003aac <ADC_ConfigureBoostMode+0x13c>
 8003a08:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a0c:	d854      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a0e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a12:	d047      	beq.n	8003aa4 <ADC_ConfigureBoostMode+0x134>
 8003a14:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a18:	d84e      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a1a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a1e:	d03d      	beq.n	8003a9c <ADC_ConfigureBoostMode+0x12c>
 8003a20:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a24:	d848      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a2a:	d033      	beq.n	8003a94 <ADC_ConfigureBoostMode+0x124>
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a30:	d842      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a32:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a36:	d029      	beq.n	8003a8c <ADC_ConfigureBoostMode+0x11c>
 8003a38:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a3c:	d83c      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a3e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a42:	d01a      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x10a>
 8003a44:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a48:	d836      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a4a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a4e:	d014      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x10a>
 8003a50:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a54:	d830      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a5a:	d00e      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x10a>
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a60:	d82a      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a66:	d008      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x10a>
 8003a68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a6c:	d824      	bhi.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
 8003a6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a72:	d002      	beq.n	8003a7a <ADC_ConfigureBoostMode+0x10a>
 8003a74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a78:	d11e      	bne.n	8003ab8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0c9b      	lsrs	r3, r3, #18
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	60fb      	str	r3, [r7, #12]
        break;
 8003a8a:	e016      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
        break;
 8003a92:	e012      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	60fb      	str	r3, [r7, #12]
        break;
 8003a9a:	e00e      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	e00a      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	09db      	lsrs	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
        break;
 8003aaa:	e006      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	60fb      	str	r3, [r7, #12]
        break;
 8003ab2:	e002      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ab8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003aba:	f7ff f899 	bl	8002bf0 <HAL_GetREVID>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d815      	bhi.n	8003af4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a2b      	ldr	r2, [pc, #172]	@ (8003b78 <ADC_ConfigureBoostMode+0x208>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d908      	bls.n	8003ae2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ade:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ae0:	e03e      	b.n	8003b60 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003af0:	609a      	str	r2, [r3, #8]
}
 8003af2:	e035      	b.n	8003b60 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b7c <ADC_ConfigureBoostMode+0x20c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d808      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	e025      	b.n	8003b60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a1a      	ldr	r2, [pc, #104]	@ (8003b80 <ADC_ConfigureBoostMode+0x210>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d80a      	bhi.n	8003b32 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	e016      	b.n	8003b60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a13      	ldr	r2, [pc, #76]	@ (8003b84 <ADC_ConfigureBoostMode+0x214>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d80a      	bhi.n	8003b50 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4c:	609a      	str	r2, [r3, #8]
}
 8003b4e:	e007      	b.n	8003b60 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40022100 	.word	0x40022100
 8003b70:	40022300 	.word	0x40022300
 8003b74:	58026300 	.word	0x58026300
 8003b78:	01312d00 	.word	0x01312d00
 8003b7c:	005f5e10 	.word	0x005f5e10
 8003b80:	00bebc20 	.word	0x00bebc20
 8003b84:	017d7840 	.word	0x017d7840

08003b88 <LL_ADC_IsEnabled>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <LL_ADC_IsEnabled+0x18>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <LL_ADC_IsEnabled+0x1a>
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_ADC_REG_IsConversionOngoing>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d101      	bne.n	8003bc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b09f      	sub	sp, #124	@ 0x7c
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0be      	b.n	8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5c      	ldr	r2, [pc, #368]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d102      	bne.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	e001      	b.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e09d      	b.n	8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ffb9 	bl	8003bae <LL_ADC_REG_IsConversionOngoing>
 8003c3c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ffb3 	bl	8003bae <LL_ADC_REG_IsConversionOngoing>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d17f      	bne.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d17c      	bne.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a47      	ldr	r2, [pc, #284]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a46      	ldr	r2, [pc, #280]	@ (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c68:	4b45      	ldr	r3, [pc, #276]	@ (8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c6a:	e000      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c6c:	4b45      	ldr	r3, [pc, #276]	@ (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d039      	beq.n	8003cec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c88:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a38      	ldr	r2, [pc, #224]	@ (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10e      	bne.n	8003cbc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c9e:	4836      	ldr	r0, [pc, #216]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ca0:	f7ff ff72 	bl	8003b88 <LL_ADC_IsEnabled>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	4835      	ldr	r0, [pc, #212]	@ (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ca8:	f7ff ff6e 	bl	8003b88 <LL_ADC_IsEnabled>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4323      	orrs	r3, r4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e008      	b.n	8003cce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003cbc:	4832      	ldr	r0, [pc, #200]	@ (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003cbe:	f7ff ff63 	bl	8003b88 <LL_ADC_IsEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d047      	beq.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	6892      	ldr	r2, [r2, #8]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cea:	e03a      	b.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cf6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10e      	bne.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003d0c:	481a      	ldr	r0, [pc, #104]	@ (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d0e:	f7ff ff3b 	bl	8003b88 <LL_ADC_IsEnabled>
 8003d12:	4604      	mov	r4, r0
 8003d14:	4819      	ldr	r0, [pc, #100]	@ (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d16:	f7ff ff37 	bl	8003b88 <LL_ADC_IsEnabled>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4323      	orrs	r3, r4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e008      	b.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d2a:	4817      	ldr	r0, [pc, #92]	@ (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d2c:	f7ff ff2c 	bl	8003b88 <LL_ADC_IsEnabled>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf0c      	ite	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	2300      	movne	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	4b11      	ldr	r3, [pc, #68]	@ (8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d4a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d4c:	e009      	b.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003d60:	e000      	b.n	8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d62:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d6c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	377c      	adds	r7, #124	@ 0x7c
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40022100 	.word	0x40022100
 8003d80:	40022300 	.word	0x40022300
 8003d84:	58026300 	.word	0x58026300
 8003d88:	58026000 	.word	0x58026000
 8003d8c:	fffff0e0 	.word	0xfffff0e0

08003d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003db8:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60d3      	str	r3, [r2, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00
 8003dd4:	05fa0000 	.word	0x05fa0000

08003dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	@ (8003df0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 0307 	and.w	r3, r3, #7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db0a      	blt.n	8003e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	490c      	ldr	r1, [pc, #48]	@ (8003e40 <__NVIC_SetPriority+0x4c>)
 8003e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	440b      	add	r3, r1
 8003e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e1c:	e00a      	b.n	8003e34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4908      	ldr	r1, [pc, #32]	@ (8003e44 <__NVIC_SetPriority+0x50>)
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	440b      	add	r3, r1
 8003e32:	761a      	strb	r2, [r3, #24]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000e100 	.word	0xe000e100
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	@ 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f1c3 0307 	rsb	r3, r3, #7
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	bf28      	it	cs
 8003e66:	2304      	movcs	r3, #4
 8003e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d902      	bls.n	8003e78 <NVIC_EncodePriority+0x30>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3b03      	subs	r3, #3
 8003e76:	e000      	b.n	8003e7a <NVIC_EncodePriority+0x32>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	43d9      	mvns	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	4313      	orrs	r3, r2
         );
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	@ 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec0:	d301      	bcc.n	8003ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e00f      	b.n	8003ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <SysTick_Config+0x40>)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ece:	210f      	movs	r1, #15
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ed4:	f7ff ff8e 	bl	8003df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ed8:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <SysTick_Config+0x40>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ede:	4b04      	ldr	r3, [pc, #16]	@ (8003ef0 <SysTick_Config+0x40>)
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	e000e010 	.word	0xe000e010

08003ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ff47 	bl	8003d90 <__NVIC_SetPriorityGrouping>
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	4603      	mov	r3, r0
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f18:	f7ff ff5e 	bl	8003dd8 <__NVIC_GetPriorityGrouping>
 8003f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	6978      	ldr	r0, [r7, #20]
 8003f24:	f7ff ff90 	bl	8003e48 <NVIC_EncodePriority>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ff5f 	bl	8003df4 <__NVIC_SetPriority>
}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ffb2 	bl	8003eb0 <SysTick_Config>
 8003f4c:	4603      	mov	r3, r0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e0e3      	b.n	8004132 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2223      	movs	r2, #35	@ 0x23
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7fd fec5 	bl	8001d0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f82:	4b6e      	ldr	r3, [pc, #440]	@ (800413c <HAL_ETH_Init+0x1e4>)
 8003f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f88:	4a6c      	ldr	r2, [pc, #432]	@ (800413c <HAL_ETH_Init+0x1e4>)
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f92:	4b6a      	ldr	r3, [pc, #424]	@ (800413c <HAL_ETH_Init+0x1e4>)
 8003f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7a1b      	ldrb	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fe fe2d 	bl	8002c08 <HAL_SYSCFG_ETHInterfaceSelect>
 8003fae:	e003      	b.n	8003fb8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fb0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003fb4:	f7fe fe28 	bl	8002c08 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fb8:	4b61      	ldr	r3, [pc, #388]	@ (8004140 <HAL_ETH_Init+0x1e8>)
 8003fba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fd4:	f7fe fddc 	bl	8002b90 <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fda:	e011      	b.n	8004000 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fdc:	f7fe fdd8 	bl	8002b90 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003fea:	d909      	bls.n	8004000 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	22e0      	movs	r2, #224	@ 0xe0
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e098      	b.n	8004132 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e4      	bne.n	8003fdc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f89e 	bl	8004154 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004018:	f003 f92a 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 800401c:	4603      	mov	r3, r0
 800401e:	4a49      	ldr	r2, [pc, #292]	@ (8004144 <HAL_ETH_Init+0x1ec>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	0c9a      	lsrs	r2, r3, #18
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3a01      	subs	r2, #1
 800402c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fa81 	bl	8004538 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800403e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004042:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800404e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004052:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	22e0      	movs	r2, #224	@ 0xe0
 800406e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e05d      	b.n	8004132 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004082:	4b31      	ldr	r3, [pc, #196]	@ (8004148 <HAL_ETH_Init+0x1f0>)
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6952      	ldr	r2, [r2, #20]
 800408a:	0051      	lsls	r1, r2, #1
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004096:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fae9 	bl	8004672 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb2f 	bl	8004704 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	3305      	adds	r3, #5
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	021a      	lsls	r2, r3, #8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	3303      	adds	r3, #3
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	061a      	lsls	r2, r3, #24
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	3302      	adds	r3, #2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	3301      	adds	r3, #1
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040f4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <HAL_ETH_Init+0x1f4>)
 8004106:	430b      	orrs	r3, r1
 8004108:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <HAL_ETH_Init+0x1f8>)
 800411a:	430b      	orrs	r3, r1
 800411c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2210      	movs	r2, #16
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400
 8004140:	58000400 	.word	0x58000400
 8004144:	431bde83 	.word	0x431bde83
 8004148:	ffff8001 	.word	0xffff8001
 800414c:	0c020060 	.word	0x0c020060
 8004150:	0c20c000 	.word	0x0c20c000

08004154 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004164:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800416c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800416e:	f003 f87f 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8004172:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a1a      	ldr	r2, [pc, #104]	@ (80041e0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d804      	bhi.n	8004186 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e022      	b.n	80041cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4a16      	ldr	r2, [pc, #88]	@ (80041e4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d204      	bcs.n	8004198 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e019      	b.n	80041cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d915      	bls.n	80041cc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a12      	ldr	r2, [pc, #72]	@ (80041ec <HAL_ETH_SetMDIOClockRange+0x98>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d804      	bhi.n	80041b2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e00c      	b.n	80041cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4a0e      	ldr	r2, [pc, #56]	@ (80041f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d804      	bhi.n	80041c4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e003      	b.n	80041cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	02160ebf 	.word	0x02160ebf
 80041e4:	03938700 	.word	0x03938700
 80041e8:	05f5e0ff 	.word	0x05f5e0ff
 80041ec:	08f0d17f 	.word	0x08f0d17f
 80041f0:	0ee6b27f 	.word	0x0ee6b27f

080041f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004206:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	791b      	ldrb	r3, [r3, #4]
 800420c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800420e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	7b1b      	ldrb	r3, [r3, #12]
 8004214:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	7b5b      	ldrb	r3, [r3, #13]
 800421c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800421e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	7b9b      	ldrb	r3, [r3, #14]
 8004224:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	7bdb      	ldrb	r3, [r3, #15]
 800422c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800422e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	7c12      	ldrb	r2, [r2, #16]
 8004234:	2a00      	cmp	r2, #0
 8004236:	d102      	bne.n	800423e <ETH_SetMACConfig+0x4a>
 8004238:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800423c:	e000      	b.n	8004240 <ETH_SetMACConfig+0x4c>
 800423e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004240:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	7c52      	ldrb	r2, [r2, #17]
 8004246:	2a00      	cmp	r2, #0
 8004248:	d102      	bne.n	8004250 <ETH_SetMACConfig+0x5c>
 800424a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800424e:	e000      	b.n	8004252 <ETH_SetMACConfig+0x5e>
 8004250:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004252:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	7c9b      	ldrb	r3, [r3, #18]
 8004258:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800425a:	431a      	orrs	r2, r3
               macconf->Speed |
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004260:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	7f1b      	ldrb	r3, [r3, #28]
 800426c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800426e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	7f5b      	ldrb	r3, [r3, #29]
 8004274:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004276:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	7f92      	ldrb	r2, [r2, #30]
 800427c:	2a00      	cmp	r2, #0
 800427e:	d102      	bne.n	8004286 <ETH_SetMACConfig+0x92>
 8004280:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004284:	e000      	b.n	8004288 <ETH_SetMACConfig+0x94>
 8004286:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004288:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	7fdb      	ldrb	r3, [r3, #31]
 800428e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004290:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004298:	2a00      	cmp	r2, #0
 800429a:	d102      	bne.n	80042a2 <ETH_SetMACConfig+0xae>
 800429c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042a0:	e000      	b.n	80042a4 <ETH_SetMACConfig+0xb0>
 80042a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80042a4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80042aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042b2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80042b4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b56      	ldr	r3, [pc, #344]	@ (8004420 <ETH_SetMACConfig+0x22c>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	430b      	orrs	r3, r1
 80042d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80042f2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80042fc:	2a00      	cmp	r2, #0
 80042fe:	d102      	bne.n	8004306 <ETH_SetMACConfig+0x112>
 8004300:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004304:	e000      	b.n	8004308 <ETH_SetMACConfig+0x114>
 8004306:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004308:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	4b42      	ldr	r3, [pc, #264]	@ (8004424 <ETH_SetMACConfig+0x230>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	68f9      	ldr	r1, [r7, #12]
 8004322:	430b      	orrs	r3, r1
 8004324:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800432c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	4b3a      	ldr	r3, [pc, #232]	@ (8004428 <ETH_SetMACConfig+0x234>)
 800433e:	4013      	ands	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	68f9      	ldr	r1, [r7, #12]
 8004346:	430b      	orrs	r3, r1
 8004348:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004350:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004356:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800435e:	2a00      	cmp	r2, #0
 8004360:	d101      	bne.n	8004366 <ETH_SetMACConfig+0x172>
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	e000      	b.n	8004368 <ETH_SetMACConfig+0x174>
 8004366:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004368:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800437a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800437e:	4013      	ands	r3, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	430b      	orrs	r3, r1
 8004388:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004390:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004398:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f023 0103 	bic.w	r1, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80043be:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d101      	bne.n	80043e2 <ETH_SetMACConfig+0x1ee>
 80043de:	2240      	movs	r2, #64	@ 0x40
 80043e0:	e000      	b.n	80043e4 <ETH_SetMACConfig+0x1f0>
 80043e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80043ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80043f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004404:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	430a      	orrs	r2, r1
 8004410:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	00048083 	.word	0x00048083
 8004424:	c0f88000 	.word	0xc0f88000
 8004428:	fffffef0 	.word	0xfffffef0

0800442c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b38      	ldr	r3, [pc, #224]	@ (8004524 <ETH_SetDMAConfig+0xf8>)
 8004442:	4013      	ands	r3, r2
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	6811      	ldr	r1, [r2, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	430b      	orrs	r3, r1
 800444e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004452:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	791b      	ldrb	r3, [r3, #4]
 8004458:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800445e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	7b1b      	ldrb	r3, [r3, #12]
 8004464:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4b2c      	ldr	r3, [pc, #176]	@ (8004528 <ETH_SetDMAConfig+0xfc>)
 8004476:	4013      	ands	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	430b      	orrs	r3, r1
 8004480:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004484:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	7b5b      	ldrb	r3, [r3, #13]
 800448a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80044a0:	4b22      	ldr	r3, [pc, #136]	@ (800452c <ETH_SetDMAConfig+0x100>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	68f9      	ldr	r1, [r7, #12]
 80044aa:	430b      	orrs	r3, r1
 80044ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044b0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	7d1b      	ldrb	r3, [r3, #20]
 80044bc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80044be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	7f5b      	ldrb	r3, [r3, #29]
 80044c4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80044d6:	4b16      	ldr	r3, [pc, #88]	@ (8004530 <ETH_SetDMAConfig+0x104>)
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044e6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	7f1b      	ldrb	r3, [r3, #28]
 80044ee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004500:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <ETH_SetDMAConfig+0x108>)
 8004506:	4013      	ands	r3, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	430b      	orrs	r3, r1
 8004510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004514:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	ffff87fd 	.word	0xffff87fd
 8004528:	ffff2ffe 	.word	0xffff2ffe
 800452c:	fffec000 	.word	0xfffec000
 8004530:	ffc0efef 	.word	0xffc0efef
 8004534:	7fc0ffff 	.word	0x7fc0ffff

08004538 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b0a4      	sub	sp, #144	@ 0x90
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004546:	2300      	movs	r3, #0
 8004548:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004550:	2300      	movs	r3, #0
 8004552:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004578:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004580:	2300      	movs	r3, #0
 8004582:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004590:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004594:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800459c:	2300      	movs	r3, #0
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80045b2:	2300      	movs	r3, #0
 80045b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80045ba:	2300      	movs	r3, #0
 80045bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80045d0:	2320      	movs	r3, #32
 80045d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045e2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045ec:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045f4:	2302      	movs	r3, #2
 80045f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004606:	2300      	movs	r3, #0
 8004608:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004612:	2300      	movs	r3, #0
 8004614:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800461c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fde6 	bl	80041f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004628:	2301      	movs	r3, #1
 800462a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800462c:	2301      	movs	r3, #1
 800462e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004642:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004646:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004648:	2300      	movs	r3, #0
 800464a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800464c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004650:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004652:	2300      	movs	r3, #0
 8004654:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004658:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800465e:	f107 0308 	add.w	r3, r7, #8
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fee1 	bl	800442c <ETH_SetDMAConfig>
}
 800466a:	bf00      	nop
 800466c:	3790      	adds	r7, #144	@ 0x90
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	e01d      	b.n	80046bc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68d9      	ldr	r1, [r3, #12]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	440b      	add	r3, r1
 8004690:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2200      	movs	r2, #0
 80046a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	3206      	adds	r2, #6
 80046b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3301      	adds	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d9de      	bls.n	8004680 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d0:	461a      	mov	r2, r3
 80046d2:	2303      	movs	r3, #3
 80046d4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e023      	b.n	800475a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6919      	ldr	r1, [r3, #16]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	440b      	add	r3, r1
 8004722:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	3212      	adds	r2, #18
 8004750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d9d8      	bls.n	8004712 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004786:	461a      	mov	r2, r3
 8004788:	2303      	movs	r3, #3
 800478a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800479a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b098      	sub	sp, #96	@ 0x60
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80047c8:	4a84      	ldr	r2, [pc, #528]	@ (80049dc <HAL_FDCAN_Init+0x21c>)
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	4611      	mov	r1, r2
 80047d0:	224c      	movs	r2, #76	@ 0x4c
 80047d2:	4618      	mov	r0, r3
 80047d4:	f007 fbb4 	bl	800bf40 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1c6      	b.n	8004b70 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7e      	ldr	r2, [pc, #504]	@ (80049e0 <HAL_FDCAN_Init+0x220>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d106      	bne.n	80047fa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fd fbac 	bl	8001f6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0210 	bic.w	r2, r2, #16
 8004822:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004824:	f7fe f9b4 	bl	8002b90 <HAL_GetTick>
 8004828:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800482a:	e014      	b.n	8004856 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800482c:	f7fe f9b0 	bl	8002b90 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b0a      	cmp	r3, #10
 8004838:	d90d      	bls.n	8004856 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004840:	f043 0201 	orr.w	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2203      	movs	r2, #3
 800484e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e18c      	b.n	8004b70 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b08      	cmp	r3, #8
 8004862:	d0e3      	beq.n	800482c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004874:	f7fe f98c 	bl	8002b90 <HAL_GetTick>
 8004878:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800487a:	e014      	b.n	80048a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800487c:	f7fe f988 	bl	8002b90 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b0a      	cmp	r3, #10
 8004888:	d90d      	bls.n	80048a6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2203      	movs	r2, #3
 800489e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e164      	b.n	8004b70 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0e3      	beq.n	800487c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0202 	orr.w	r2, r2, #2
 80048c2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	7c1b      	ldrb	r3, [r3, #16]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d108      	bne.n	80048de <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048da:	619a      	str	r2, [r3, #24]
 80048dc:	e007      	b.n	80048ee <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7c5b      	ldrb	r3, [r3, #17]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d108      	bne.n	8004908 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004904:	619a      	str	r2, [r3, #24]
 8004906:	e007      	b.n	8004918 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004916:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	7c9b      	ldrb	r3, [r3, #18]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d108      	bne.n	8004932 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800492e:	619a      	str	r2, [r3, #24]
 8004930:	e007      	b.n	8004942 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004940:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004966:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0210 	bic.w	r2, r2, #16
 8004976:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d108      	bne.n	8004992 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0204 	orr.w	r2, r2, #4
 800498e:	619a      	str	r2, [r3, #24]
 8004990:	e030      	b.n	80049f4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02c      	beq.n	80049f4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d020      	beq.n	80049e4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049b0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0210 	orr.w	r2, r2, #16
 80049c0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d114      	bne.n	80049f4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0220 	orr.w	r2, r2, #32
 80049d8:	619a      	str	r2, [r3, #24]
 80049da:	e00b      	b.n	80049f4 <HAL_FDCAN_Init+0x234>
 80049dc:	0800bf74 	.word	0x0800bf74
 80049e0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0220 	orr.w	r2, r2, #32
 80049f2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a04:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a0c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a1c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a1e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a28:	d115      	bne.n	8004a56 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	3b01      	subs	r3, #1
 8004a36:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a38:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a42:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a52:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a54:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7c:	4413      	add	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d011      	beq.n	8004aa6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004a8a:	f023 0107 	bic.w	r1, r3, #7
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	3360      	adds	r3, #96	@ 0x60
 8004a96:	443b      	add	r3, r7
 8004a98:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d011      	beq.n	8004ad2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ab6:	f023 0107 	bic.w	r1, r3, #7
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	3360      	adds	r3, #96	@ 0x60
 8004ac2:	443b      	add	r3, r7
 8004ac4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d012      	beq.n	8004b00 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ae2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	3360      	adds	r3, #96	@ 0x60
 8004aee:	443b      	add	r3, r7
 8004af0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004af4:	011a      	lsls	r2, r3, #4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b10:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	3360      	adds	r3, #96	@ 0x60
 8004b1c:	443b      	add	r3, r7
 8004b1e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004b22:	021a      	lsls	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <HAL_FDCAN_Init+0x3b8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d107      	bne.n	8004b48 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f022 0203 	bic.w	r2, r2, #3
 8004b46:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f80b 	bl	8004b7c <FDCAN_CalcultateRamBlockAddresses>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004b6c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3760      	adds	r7, #96	@ 0x60
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	4000a000 	.word	0x4000a000

08004b7c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b88:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b92:	4ba7      	ldr	r3, [pc, #668]	@ (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0091      	lsls	r1, r2, #2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bac:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb4:	041a      	lsls	r2, r3, #16
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bd2:	4b97      	ldr	r3, [pc, #604]	@ (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	0091      	lsls	r1, r2, #2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	430b      	orrs	r3, r1
 8004be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bec:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf4:	041a      	lsls	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004c14:	4b86      	ldr	r3, [pc, #536]	@ (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	0091      	lsls	r1, r2, #2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c2e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	041a      	lsls	r2, r3, #16
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4413      	add	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004c5c:	4b74      	ldr	r3, [pc, #464]	@ (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	0091      	lsls	r1, r2, #2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c76:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c7e:	041a      	lsls	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4413      	add	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004ca4:	4b62      	ldr	r3, [pc, #392]	@ (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	0091      	lsls	r1, r2, #2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004cd0:	4b57      	ldr	r3, [pc, #348]	@ (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	0091      	lsls	r1, r2, #2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cea:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf2:	041a      	lsls	r2, r3, #16
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	4413      	add	r3, r2
 8004d08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004d12:	4b47      	ldr	r3, [pc, #284]	@ (8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	0091      	lsls	r1, r2, #2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d2c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	041a      	lsls	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d48:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d50:	061a      	lsls	r2, r3, #24
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d60:	4b34      	ldr	r3, [pc, #208]	@ (8004e34 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004d62:	4413      	add	r3, r2
 8004d64:	009a      	lsls	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d9c:	441a      	add	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004dcc:	441a      	add	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004df6:	fb01 f303 	mul.w	r3, r1, r3
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004e18:	441a      	add	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	4a04      	ldr	r2, [pc, #16]	@ (8004e38 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d915      	bls.n	8004e58 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004e2c:	e006      	b.n	8004e3c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004e2e:	bf00      	nop
 8004e30:	ffff0003 	.word	0xffff0003
 8004e34:	10002b00 	.word	0x10002b00
 8004e38:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e42:	f043 0220 	orr.w	r2, r3, #32
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e010      	b.n	8004e7a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e005      	b.n	8004e6c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3f3      	bcc.n	8004e60 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop

08004e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	@ 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e96:	4b89      	ldr	r3, [pc, #548]	@ (80050bc <HAL_GPIO_Init+0x234>)
 8004e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e9a:	e194      	b.n	80051c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8186 	beq.w	80051c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d005      	beq.n	8004ecc <HAL_GPIO_Init+0x44>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d130      	bne.n	8004f2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f02:	2201      	movs	r2, #1
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	f003 0201 	and.w	r2, r3, #1
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d017      	beq.n	8004f6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	2203      	movs	r2, #3
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d123      	bne.n	8004fbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	08da      	lsrs	r2, r3, #3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3208      	adds	r2, #8
 8004f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	08da      	lsrs	r2, r3, #3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3208      	adds	r2, #8
 8004fb8:	69b9      	ldr	r1, [r7, #24]
 8004fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	2203      	movs	r2, #3
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0203 	and.w	r2, r3, #3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80e0 	beq.w	80051c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005000:	4b2f      	ldr	r3, [pc, #188]	@ (80050c0 <HAL_GPIO_Init+0x238>)
 8005002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005006:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <HAL_GPIO_Init+0x238>)
 8005008:	f043 0302 	orr.w	r3, r3, #2
 800500c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005010:	4b2b      	ldr	r3, [pc, #172]	@ (80050c0 <HAL_GPIO_Init+0x238>)
 8005012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800501e:	4a29      	ldr	r2, [pc, #164]	@ (80050c4 <HAL_GPIO_Init+0x23c>)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	3302      	adds	r3, #2
 8005026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	220f      	movs	r2, #15
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a20      	ldr	r2, [pc, #128]	@ (80050c8 <HAL_GPIO_Init+0x240>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d052      	beq.n	80050f0 <HAL_GPIO_Init+0x268>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a1f      	ldr	r2, [pc, #124]	@ (80050cc <HAL_GPIO_Init+0x244>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d031      	beq.n	80050b6 <HAL_GPIO_Init+0x22e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1e      	ldr	r2, [pc, #120]	@ (80050d0 <HAL_GPIO_Init+0x248>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d02b      	beq.n	80050b2 <HAL_GPIO_Init+0x22a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1d      	ldr	r2, [pc, #116]	@ (80050d4 <HAL_GPIO_Init+0x24c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d025      	beq.n	80050ae <HAL_GPIO_Init+0x226>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1c      	ldr	r2, [pc, #112]	@ (80050d8 <HAL_GPIO_Init+0x250>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01f      	beq.n	80050aa <HAL_GPIO_Init+0x222>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <HAL_GPIO_Init+0x254>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d019      	beq.n	80050a6 <HAL_GPIO_Init+0x21e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1a      	ldr	r2, [pc, #104]	@ (80050e0 <HAL_GPIO_Init+0x258>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d013      	beq.n	80050a2 <HAL_GPIO_Init+0x21a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <HAL_GPIO_Init+0x25c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00d      	beq.n	800509e <HAL_GPIO_Init+0x216>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <HAL_GPIO_Init+0x260>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <HAL_GPIO_Init+0x212>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <HAL_GPIO_Init+0x264>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <HAL_GPIO_Init+0x20e>
 8005092:	2309      	movs	r3, #9
 8005094:	e02d      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 8005096:	230a      	movs	r3, #10
 8005098:	e02b      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 800509a:	2308      	movs	r3, #8
 800509c:	e029      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 800509e:	2307      	movs	r3, #7
 80050a0:	e027      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 80050a2:	2306      	movs	r3, #6
 80050a4:	e025      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 80050a6:	2305      	movs	r3, #5
 80050a8:	e023      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 80050aa:	2304      	movs	r3, #4
 80050ac:	e021      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 80050ae:	2303      	movs	r3, #3
 80050b0:	e01f      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e01d      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e01b      	b.n	80050f2 <HAL_GPIO_Init+0x26a>
 80050ba:	bf00      	nop
 80050bc:	58000080 	.word	0x58000080
 80050c0:	58024400 	.word	0x58024400
 80050c4:	58000400 	.word	0x58000400
 80050c8:	58020000 	.word	0x58020000
 80050cc:	58020400 	.word	0x58020400
 80050d0:	58020800 	.word	0x58020800
 80050d4:	58020c00 	.word	0x58020c00
 80050d8:	58021000 	.word	0x58021000
 80050dc:	58021400 	.word	0x58021400
 80050e0:	58021800 	.word	0x58021800
 80050e4:	58021c00 	.word	0x58021c00
 80050e8:	58022000 	.word	0x58022000
 80050ec:	58022400 	.word	0x58022400
 80050f0:	2300      	movs	r3, #0
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	f002 0203 	and.w	r2, r2, #3
 80050f8:	0092      	lsls	r2, r2, #2
 80050fa:	4093      	lsls	r3, r2
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005102:	4938      	ldr	r1, [pc, #224]	@ (80051e4 <HAL_GPIO_Init+0x35c>)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	3302      	adds	r3, #2
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	43db      	mvns	r3, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4013      	ands	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	43db      	mvns	r3, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005164:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f ae63 	bne.w	8004e9c <HAL_GPIO_Init+0x14>
  }
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	3724      	adds	r7, #36	@ 0x24
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	58000400 	.word	0x58000400

080051e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
 8005204:	e001      	b.n	800520a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	807b      	strh	r3, [r7, #2]
 8005224:	4613      	mov	r3, r2
 8005226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005228:	787b      	ldrb	r3, [r7, #1]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005234:	e003      	b.n	800523e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	041a      	lsls	r2, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	619a      	str	r2, [r3, #24]
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e08b      	b.n	8005376 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fc ff4a 	bl	800210c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2224      	movs	r2, #36	@ 0x24
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0201 	bic.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800529c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	e006      	b.n	80052d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d108      	bne.n	80052ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	e007      	b.n	80052fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <HAL_I2C_Init+0x134>)
 800530a:	430b      	orrs	r3, r1
 800530c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800531c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69d9      	ldr	r1, [r3, #28]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	02008000 	.word	0x02008000

08005384 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	461a      	mov	r2, r3
 8005390:	460b      	mov	r3, r1
 8005392:	817b      	strh	r3, [r7, #10]
 8005394:	4613      	mov	r3, r2
 8005396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	f040 80fd 	bne.w	80055a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_I2C_Master_Transmit+0x30>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e0f6      	b.n	80055a2 <HAL_I2C_Master_Transmit+0x21e>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053bc:	f7fd fbe8 	bl	8002b90 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2319      	movs	r3, #25
 80053c8:	2201      	movs	r2, #1
 80053ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f914 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e0e1      	b.n	80055a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2221      	movs	r2, #33	@ 0x21
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2210      	movs	r2, #16
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	893a      	ldrh	r2, [r7, #8]
 80053fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2bff      	cmp	r3, #255	@ 0xff
 800540e:	d906      	bls.n	800541e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	22ff      	movs	r2, #255	@ 0xff
 8005414:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005416:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e007      	b.n	800542e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800542c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d024      	beq.n	8005480 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	781a      	ldrb	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546a:	b2db      	uxtb	r3, r3
 800546c:	3301      	adds	r3, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	8979      	ldrh	r1, [r7, #10]
 8005472:	4b4e      	ldr	r3, [pc, #312]	@ (80055ac <HAL_I2C_Master_Transmit+0x228>)
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fa83 	bl	8005984 <I2C_TransferConfig>
 800547e:	e066      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005484:	b2da      	uxtb	r2, r3
 8005486:	8979      	ldrh	r1, [r7, #10]
 8005488:	4b48      	ldr	r3, [pc, #288]	@ (80055ac <HAL_I2C_Master_Transmit+0x228>)
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fa78 	bl	8005984 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005494:	e05b      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f907 	bl	80056ae <I2C_WaitOnTXISFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e07b      	b.n	80055a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d034      	beq.n	800554e <HAL_I2C_Master_Transmit+0x1ca>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d130      	bne.n	800554e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2200      	movs	r2, #0
 80054f4:	2180      	movs	r1, #128	@ 0x80
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f880 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e04d      	b.n	80055a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	2bff      	cmp	r3, #255	@ 0xff
 800550e:	d90e      	bls.n	800552e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	22ff      	movs	r2, #255	@ 0xff
 8005514:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551a:	b2da      	uxtb	r2, r3
 800551c:	8979      	ldrh	r1, [r7, #10]
 800551e:	2300      	movs	r3, #0
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fa2c 	bl	8005984 <I2C_TransferConfig>
 800552c:	e00f      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553c:	b2da      	uxtb	r2, r3
 800553e:	8979      	ldrh	r1, [r7, #10]
 8005540:	2300      	movs	r3, #0
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fa1b 	bl	8005984 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d19e      	bne.n	8005496 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	6a39      	ldr	r1, [r7, #32]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f8ed 	bl	800573c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e01a      	b.n	80055a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2220      	movs	r2, #32
 8005572:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b0c      	ldr	r3, [pc, #48]	@ (80055b0 <HAL_I2C_Master_Transmit+0x22c>)
 8005580:	400b      	ands	r3, r1
 8005582:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	80002000 	.word	0x80002000
 80055b0:	fe00e800 	.word	0xfe00e800

080055b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d103      	bne.n	80055d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d007      	beq.n	80055f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	619a      	str	r2, [r3, #24]
  }
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800560c:	e03b      	b.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f8d6 	bl	80057c4 <I2C_IsErrorOccurred>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e041      	b.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005628:	d02d      	beq.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fd fab1 	bl	8002b90 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <I2C_WaitOnFlagUntilTimeout+0x44>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d122      	bne.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4013      	ands	r3, r2
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	429a      	cmp	r2, r3
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	429a      	cmp	r2, r3
 800565c:	d113      	bne.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e00f      	b.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d0b4      	beq.n	800560e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ba:	e033      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f87f 	bl	80057c4 <I2C_IsErrorOccurred>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e031      	b.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056d6:	d025      	beq.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d8:	f7fd fa5a 	bl	8002b90 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d302      	bcc.n	80056ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11a      	bne.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d013      	beq.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e007      	b.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d1c4      	bne.n	80056bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005748:	e02f      	b.n	80057aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f838 	bl	80057c4 <I2C_IsErrorOccurred>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e02d      	b.n	80057ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575e:	f7fd fa17 	bl	8002b90 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11a      	bne.n	80057aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b20      	cmp	r3, #32
 8005780:	d013      	beq.n	80057aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e007      	b.n	80057ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d1c8      	bne.n	800574a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	@ 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d068      	beq.n	80058c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2210      	movs	r2, #16
 80057f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057f8:	e049      	b.n	800588e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005800:	d045      	beq.n	800588e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005802:	f7fd f9c5 	bl	8002b90 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	d302      	bcc.n	8005818 <I2C_IsErrorOccurred+0x54>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d13a      	bne.n	800588e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005822:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800582a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583a:	d121      	bne.n	8005880 <I2C_IsErrorOccurred+0xbc>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005842:	d01d      	beq.n	8005880 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005844:	7cfb      	ldrb	r3, [r7, #19]
 8005846:	2b20      	cmp	r3, #32
 8005848:	d01a      	beq.n	8005880 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005858:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800585a:	f7fd f999 	bl	8002b90 <HAL_GetTick>
 800585e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005860:	e00e      	b.n	8005880 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005862:	f7fd f995 	bl	8002b90 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b19      	cmp	r3, #25
 800586e:	d907      	bls.n	8005880 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	f043 0320 	orr.w	r3, r3, #32
 8005876:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800587e:	e006      	b.n	800588e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b20      	cmp	r3, #32
 800588c:	d1e9      	bne.n	8005862 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b20      	cmp	r3, #32
 800589a:	d003      	beq.n	80058a4 <I2C_IsErrorOccurred+0xe0>
 800589c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0aa      	beq.n	80057fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2220      	movs	r2, #32
 80058b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f043 0308 	orr.w	r3, r3, #8
 80058fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005906:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	f043 0302 	orr.w	r3, r3, #2
 800591e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01c      	beq.n	8005972 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fe3b 	bl	80055b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b0d      	ldr	r3, [pc, #52]	@ (8005980 <I2C_IsErrorOccurred+0x1bc>)
 800594a:	400b      	ands	r3, r1
 800594c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	431a      	orrs	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005976:	4618      	mov	r0, r3
 8005978:	3728      	adds	r7, #40	@ 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	fe00e800 	.word	0xfe00e800

08005984 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	817b      	strh	r3, [r7, #10]
 8005992:	4613      	mov	r3, r2
 8005994:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800599c:	7a7b      	ldrb	r3, [r7, #9]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	0d5b      	lsrs	r3, r3, #21
 80059be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80059c2:	4b08      	ldr	r3, [pc, #32]	@ (80059e4 <I2C_TransferConfig+0x60>)
 80059c4:	430b      	orrs	r3, r1
 80059c6:	43db      	mvns	r3, r3
 80059c8:	ea02 0103 	and.w	r1, r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	03ff63ff 	.word	0x03ff63ff

080059e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d138      	bne.n	8005a70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e032      	b.n	8005a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	@ 0x24
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6819      	ldr	r1, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d139      	bne.n	8005b08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e033      	b.n	8005b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2224      	movs	r2, #36	@ 0x24
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ad0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	e000      	b.n	8005b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
  }
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e0bf      	b.n	8005caa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc fb4e 	bl	80021e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005b5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6999      	ldr	r1, [r3, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6899      	ldr	r1, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005cb4 <HAL_LTDC_Init+0x19c>)
 8005b8c:	400b      	ands	r3, r1
 8005b8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6899      	ldr	r1, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68d9      	ldr	r1, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb4 <HAL_LTDC_Init+0x19c>)
 8005bba:	400b      	ands	r3, r1
 8005bbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	041b      	lsls	r3, r3, #16
 8005bc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68d9      	ldr	r1, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6919      	ldr	r1, [r3, #16]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4b33      	ldr	r3, [pc, #204]	@ (8005cb4 <HAL_LTDC_Init+0x19c>)
 8005be8:	400b      	ands	r3, r1
 8005bea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6919      	ldr	r1, [r3, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6959      	ldr	r1, [r3, #20]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b27      	ldr	r3, [pc, #156]	@ (8005cb4 <HAL_LTDC_Init+0x19c>)
 8005c16:	400b      	ands	r3, r1
 8005c18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6959      	ldr	r1, [r3, #20]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0206 	orr.w	r2, r2, #6
 8005c86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	f000f800 	.word	0xf000f800

08005cb8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cb8:	b5b0      	push	{r4, r5, r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_LTDC_ConfigLayer+0x1a>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e02c      	b.n	8005d2c <HAL_LTDC_ConfigLayer+0x74>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2134      	movs	r1, #52	@ 0x34
 8005ce8:	fb01 f303 	mul.w	r3, r1, r3
 8005cec:	4413      	add	r3, r2
 8005cee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f811 	bl	8005d34 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bdb0      	pop	{r4, r5, r7, pc}

08005d34 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	@ 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d50:	4413      	add	r3, r2
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	01db      	lsls	r3, r3, #7
 8005d60:	4413      	add	r3, r2
 8005d62:	3384      	adds	r3, #132	@ 0x84
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	01d2      	lsls	r2, r2, #7
 8005d70:	440a      	add	r2, r1
 8005d72:	3284      	adds	r2, #132	@ 0x84
 8005d74:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005d78:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d8a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d8c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4619      	mov	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	01db      	lsls	r3, r3, #7
 8005d98:	440b      	add	r3, r1
 8005d9a:	3384      	adds	r3, #132	@ 0x84
 8005d9c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005da2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005db2:	4413      	add	r3, r2
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	01db      	lsls	r3, r3, #7
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3384      	adds	r3, #132	@ 0x84
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	4611      	mov	r1, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	01d2      	lsls	r2, r2, #7
 8005dd2:	440a      	add	r2, r1
 8005dd4:	3284      	adds	r2, #132	@ 0x84
 8005dd6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005dda:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dea:	4413      	add	r3, r2
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	01db      	lsls	r3, r3, #7
 8005df8:	440b      	add	r3, r1
 8005dfa:	3384      	adds	r3, #132	@ 0x84
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	01db      	lsls	r3, r3, #7
 8005e0e:	4413      	add	r3, r2
 8005e10:	3384      	adds	r3, #132	@ 0x84
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	01d2      	lsls	r2, r2, #7
 8005e1e:	440a      	add	r2, r1
 8005e20:	3284      	adds	r2, #132	@ 0x84
 8005e22:	f023 0307 	bic.w	r3, r3, #7
 8005e26:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	01db      	lsls	r3, r3, #7
 8005e32:	4413      	add	r3, r2
 8005e34:	3384      	adds	r3, #132	@ 0x84
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005e4e:	041b      	lsls	r3, r3, #16
 8005e50:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	061b      	lsls	r3, r3, #24
 8005e58:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	01db      	lsls	r3, r3, #7
 8005e64:	4413      	add	r3, r2
 8005e66:	3384      	adds	r3, #132	@ 0x84
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	01db      	lsls	r3, r3, #7
 8005e74:	4413      	add	r3, r2
 8005e76:	3384      	adds	r3, #132	@ 0x84
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e84:	461a      	mov	r2, r3
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	01db      	lsls	r3, r3, #7
 8005e98:	440b      	add	r3, r1
 8005e9a:	3384      	adds	r3, #132	@ 0x84
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	01db      	lsls	r3, r3, #7
 8005eae:	4413      	add	r3, r2
 8005eb0:	3384      	adds	r3, #132	@ 0x84
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	01d2      	lsls	r2, r2, #7
 8005ebe:	440a      	add	r2, r1
 8005ec0:	3284      	adds	r2, #132	@ 0x84
 8005ec2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ec6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	01db      	lsls	r3, r3, #7
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3384      	adds	r3, #132	@ 0x84
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	01db      	lsls	r3, r3, #7
 8005ee8:	4413      	add	r3, r2
 8005eea:	3384      	adds	r3, #132	@ 0x84
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	01db      	lsls	r3, r3, #7
 8005ef8:	440b      	add	r3, r1
 8005efa:	3384      	adds	r3, #132	@ 0x84
 8005efc:	4619      	mov	r1, r3
 8005efe:	4b58      	ldr	r3, [pc, #352]	@ (8006060 <LTDC_SetConfig+0x32c>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	68f9      	ldr	r1, [r7, #12]
 8005f0e:	6809      	ldr	r1, [r1, #0]
 8005f10:	4608      	mov	r0, r1
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	01c9      	lsls	r1, r1, #7
 8005f16:	4401      	add	r1, r0
 8005f18:	3184      	adds	r1, #132	@ 0x84
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	01db      	lsls	r3, r3, #7
 8005f28:	4413      	add	r3, r2
 8005f2a:	3384      	adds	r3, #132	@ 0x84
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	01db      	lsls	r3, r3, #7
 8005f38:	4413      	add	r3, r2
 8005f3a:	3384      	adds	r3, #132	@ 0x84
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	01db      	lsls	r3, r3, #7
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3384      	adds	r3, #132	@ 0x84
 8005f50:	461a      	mov	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005f60:	2304      	movs	r3, #4
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	e01b      	b.n	8005f9e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d102      	bne.n	8005f74 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	e014      	b.n	8005f9e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d00b      	beq.n	8005f94 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d007      	beq.n	8005f94 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d003      	beq.n	8005f94 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f90:	2b07      	cmp	r3, #7
 8005f92:	d102      	bne.n	8005f9a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005f94:	2302      	movs	r3, #2
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	e001      	b.n	8005f9e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	01db      	lsls	r3, r3, #7
 8005fa8:	4413      	add	r3, r2
 8005faa:	3384      	adds	r3, #132	@ 0x84
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	01d2      	lsls	r2, r2, #7
 8005fb8:	440a      	add	r2, r1
 8005fba:	3284      	adds	r2, #132	@ 0x84
 8005fbc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
 8005fcc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1acb      	subs	r3, r1, r3
 8005fd8:	69f9      	ldr	r1, [r7, #28]
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8005fe0:	68f9      	ldr	r1, [r7, #12]
 8005fe2:	6809      	ldr	r1, [r1, #0]
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	01c9      	lsls	r1, r1, #7
 8005fea:	4401      	add	r1, r0
 8005fec:	3184      	adds	r1, #132	@ 0x84
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	01db      	lsls	r3, r3, #7
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3384      	adds	r3, #132	@ 0x84
 8006000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4619      	mov	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	01db      	lsls	r3, r3, #7
 800600c:	440b      	add	r3, r1
 800600e:	3384      	adds	r3, #132	@ 0x84
 8006010:	4619      	mov	r1, r3
 8006012:	4b14      	ldr	r3, [pc, #80]	@ (8006064 <LTDC_SetConfig+0x330>)
 8006014:	4013      	ands	r3, r2
 8006016:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	01db      	lsls	r3, r3, #7
 8006022:	4413      	add	r3, r2
 8006024:	3384      	adds	r3, #132	@ 0x84
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	01db      	lsls	r3, r3, #7
 8006038:	4413      	add	r3, r2
 800603a:	3384      	adds	r3, #132	@ 0x84
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	4611      	mov	r1, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	01d2      	lsls	r2, r2, #7
 8006048:	440a      	add	r2, r1
 800604a:	3284      	adds	r2, #132	@ 0x84
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6013      	str	r3, [r2, #0]
}
 8006052:	bf00      	nop
 8006054:	3724      	adds	r7, #36	@ 0x24
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	fffff8f8 	.word	0xfffff8f8
 8006064:	fffff800 	.word	0xfffff800

08006068 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af02      	add	r7, sp, #8
 800606e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e0fe      	b.n	8006278 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fc fa30 	bl	80024f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2203      	movs	r2, #3
 8006098:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f005 fc8b 	bl	800b9bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7c1a      	ldrb	r2, [r3, #16]
 80060ae:	f88d 2000 	strb.w	r2, [sp]
 80060b2:	3304      	adds	r3, #4
 80060b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060b6:	f005 fc0f 	bl	800b8d8 <USB_CoreInit>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0d5      	b.n	8006278 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f005 fc83 	bl	800b9de <USB_SetCurrentMode>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e0c6      	b.n	8006278 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
 80060ee:	e04a      	b.n	8006186 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060f0:	7bfa      	ldrb	r2, [r7, #15]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	3315      	adds	r3, #21
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	3314      	adds	r3, #20
 8006114:	7bfa      	ldrb	r2, [r7, #15]
 8006116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	b298      	uxth	r0, r3
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	332e      	adds	r3, #46	@ 0x2e
 800612c:	4602      	mov	r2, r0
 800612e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	3318      	adds	r3, #24
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006144:	7bfa      	ldrb	r2, [r7, #15]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	331c      	adds	r3, #28
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	3320      	adds	r3, #32
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800616c:	7bfa      	ldrb	r2, [r7, #15]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	3324      	adds	r3, #36	@ 0x24
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	3301      	adds	r3, #1
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	791b      	ldrb	r3, [r3, #4]
 800618a:	7bfa      	ldrb	r2, [r7, #15]
 800618c:	429a      	cmp	r2, r3
 800618e:	d3af      	bcc.n	80060f0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]
 8006194:	e044      	b.n	8006220 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80061a8:	2200      	movs	r2, #0
 80061aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061ac:	7bfa      	ldrb	r2, [r7, #15]
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80061be:	7bfa      	ldrb	r2, [r7, #15]
 80061c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061c2:	7bfa      	ldrb	r2, [r7, #15]
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4613      	mov	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061ee:	7bfa      	ldrb	r2, [r7, #15]
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006204:	7bfa      	ldrb	r2, [r7, #15]
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	3301      	adds	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	791b      	ldrb	r3, [r3, #4]
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	429a      	cmp	r2, r3
 8006228:	d3b5      	bcc.n	8006196 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7c1a      	ldrb	r2, [r3, #16]
 8006232:	f88d 2000 	strb.w	r2, [sp]
 8006236:	3304      	adds	r3, #4
 8006238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800623a:	f005 fc1d 	bl	800ba78 <USB_DevInit>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e013      	b.n	8006278 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7b1b      	ldrb	r3, [r3, #12]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d102      	bne.n	800626c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f80a 	bl	8006280 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f005 fdd8 	bl	800be26 <USB_DevDisconnect>

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ae:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	10000003 	.word	0x10000003

080062c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80062d0:	4b19      	ldr	r3, [pc, #100]	@ (8006338 <HAL_PWREx_ConfigSupply+0x70>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d00a      	beq.n	80062f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062dc:	4b16      	ldr	r3, [pc, #88]	@ (8006338 <HAL_PWREx_ConfigSupply+0x70>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d001      	beq.n	80062ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e01f      	b.n	800632e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e01d      	b.n	800632e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062f2:	4b11      	ldr	r3, [pc, #68]	@ (8006338 <HAL_PWREx_ConfigSupply+0x70>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f023 0207 	bic.w	r2, r3, #7
 80062fa:	490f      	ldr	r1, [pc, #60]	@ (8006338 <HAL_PWREx_ConfigSupply+0x70>)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006302:	f7fc fc45 	bl	8002b90 <HAL_GetTick>
 8006306:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006308:	e009      	b.n	800631e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800630a:	f7fc fc41 	bl	8002b90 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006318:	d901      	bls.n	800631e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e007      	b.n	800632e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_PWREx_ConfigSupply+0x70>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632a:	d1ee      	bne.n	800630a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	58024800 	.word	0x58024800

0800633c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4a04      	ldr	r2, [pc, #16]	@ (8006358 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800634a:	60d3      	str	r3, [r2, #12]
}
 800634c:	bf00      	nop
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	58024800 	.word	0x58024800

0800635c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	@ 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f000 bc48 	b.w	8006c00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8088 	beq.w	800648e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637e:	4b99      	ldr	r3, [pc, #612]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006388:	4b96      	ldr	r3, [pc, #600]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	2b10      	cmp	r3, #16
 8006392:	d007      	beq.n	80063a4 <HAL_RCC_OscConfig+0x48>
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006396:	2b18      	cmp	r3, #24
 8006398:	d111      	bne.n	80063be <HAL_RCC_OscConfig+0x62>
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d10c      	bne.n	80063be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a4:	4b8f      	ldr	r3, [pc, #572]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d06d      	beq.n	800648c <HAL_RCC_OscConfig+0x130>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d169      	bne.n	800648c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f000 bc21 	b.w	8006c00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c6:	d106      	bne.n	80063d6 <HAL_RCC_OscConfig+0x7a>
 80063c8:	4b86      	ldr	r3, [pc, #536]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a85      	ldr	r2, [pc, #532]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80063ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	e02e      	b.n	8006434 <HAL_RCC_OscConfig+0xd8>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10c      	bne.n	80063f8 <HAL_RCC_OscConfig+0x9c>
 80063de:	4b81      	ldr	r3, [pc, #516]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a80      	ldr	r2, [pc, #512]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80063e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	4b7e      	ldr	r3, [pc, #504]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a7d      	ldr	r2, [pc, #500]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80063f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e01d      	b.n	8006434 <HAL_RCC_OscConfig+0xd8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006400:	d10c      	bne.n	800641c <HAL_RCC_OscConfig+0xc0>
 8006402:	4b78      	ldr	r3, [pc, #480]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a77      	ldr	r2, [pc, #476]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	4b75      	ldr	r3, [pc, #468]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a74      	ldr	r2, [pc, #464]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e00b      	b.n	8006434 <HAL_RCC_OscConfig+0xd8>
 800641c:	4b71      	ldr	r3, [pc, #452]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a70      	ldr	r2, [pc, #448]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	4b6e      	ldr	r3, [pc, #440]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a6d      	ldr	r2, [pc, #436]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800642e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d013      	beq.n	8006464 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fc fba8 	bl	8002b90 <HAL_GetTick>
 8006440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fc fba4 	bl	8002b90 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	@ 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e3d4      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006456:	4b63      	ldr	r3, [pc, #396]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f0      	beq.n	8006444 <HAL_RCC_OscConfig+0xe8>
 8006462:	e014      	b.n	800648e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fc fb94 	bl	8002b90 <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800646c:	f7fc fb90 	bl	8002b90 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b64      	cmp	r3, #100	@ 0x64
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e3c0      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800647e:	4b59      	ldr	r3, [pc, #356]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x110>
 800648a:	e000      	b.n	800648e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800648c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80ca 	beq.w	8006630 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800649c:	4b51      	ldr	r3, [pc, #324]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064a6:	4b4f      	ldr	r3, [pc, #316]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_RCC_OscConfig+0x166>
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2b18      	cmp	r3, #24
 80064b6:	d156      	bne.n	8006566 <HAL_RCC_OscConfig+0x20a>
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d151      	bne.n	8006566 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064c2:	4b48      	ldr	r3, [pc, #288]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCC_OscConfig+0x17e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e392      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064da:	4b42      	ldr	r3, [pc, #264]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 0219 	bic.w	r2, r3, #25
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	493f      	ldr	r1, [pc, #252]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fc fb50 	bl	8002b90 <HAL_GetTick>
 80064f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f4:	f7fc fb4c 	bl	8002b90 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e37c      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006506:	4b37      	ldr	r3, [pc, #220]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006512:	f7fc fb6d 	bl	8002bf0 <HAL_GetREVID>
 8006516:	4603      	mov	r3, r0
 8006518:	f241 0203 	movw	r2, #4099	@ 0x1003
 800651c:	4293      	cmp	r3, r2
 800651e:	d817      	bhi.n	8006550 <HAL_RCC_OscConfig+0x1f4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b40      	cmp	r3, #64	@ 0x40
 8006526:	d108      	bne.n	800653a <HAL_RCC_OscConfig+0x1de>
 8006528:	4b2e      	ldr	r3, [pc, #184]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006530:	4a2c      	ldr	r2, [pc, #176]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006536:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006538:	e07a      	b.n	8006630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653a:	4b2a      	ldr	r3, [pc, #168]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	031b      	lsls	r3, r3, #12
 8006548:	4926      	ldr	r1, [pc, #152]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800654a:	4313      	orrs	r3, r2
 800654c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800654e:	e06f      	b.n	8006630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b24      	ldr	r3, [pc, #144]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	061b      	lsls	r3, r3, #24
 800655e:	4921      	ldr	r1, [pc, #132]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006560:	4313      	orrs	r3, r2
 8006562:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006564:	e064      	b.n	8006630 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d047      	beq.n	80065fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800656e:	4b1d      	ldr	r3, [pc, #116]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f023 0219 	bic.w	r2, r3, #25
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	491a      	ldr	r1, [pc, #104]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800657c:	4313      	orrs	r3, r2
 800657e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fc fb06 	bl	8002b90 <HAL_GetTick>
 8006584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006588:	f7fc fb02 	bl	8002b90 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e332      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0f0      	beq.n	8006588 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a6:	f7fc fb23 	bl	8002bf0 <HAL_GetREVID>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d819      	bhi.n	80065e8 <HAL_RCC_OscConfig+0x28c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b40      	cmp	r3, #64	@ 0x40
 80065ba:	d108      	bne.n	80065ce <HAL_RCC_OscConfig+0x272>
 80065bc:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065c4:	4a07      	ldr	r2, [pc, #28]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80065c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ca:	6053      	str	r3, [r2, #4]
 80065cc:	e030      	b.n	8006630 <HAL_RCC_OscConfig+0x2d4>
 80065ce:	4b05      	ldr	r3, [pc, #20]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	031b      	lsls	r3, r3, #12
 80065dc:	4901      	ldr	r1, [pc, #4]	@ (80065e4 <HAL_RCC_OscConfig+0x288>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	604b      	str	r3, [r1, #4]
 80065e2:	e025      	b.n	8006630 <HAL_RCC_OscConfig+0x2d4>
 80065e4:	58024400 	.word	0x58024400
 80065e8:	4b9a      	ldr	r3, [pc, #616]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	061b      	lsls	r3, r3, #24
 80065f6:	4997      	ldr	r1, [pc, #604]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	604b      	str	r3, [r1, #4]
 80065fc:	e018      	b.n	8006630 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fe:	4b95      	ldr	r3, [pc, #596]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a94      	ldr	r2, [pc, #592]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660a:	f7fc fac1 	bl	8002b90 <HAL_GetTick>
 800660e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006612:	f7fc fabd 	bl	8002b90 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e2ed      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006624:	4b8b      	ldr	r3, [pc, #556]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f0      	bne.n	8006612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 80a9 	beq.w	8006790 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800663e:	4b85      	ldr	r3, [pc, #532]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006646:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006648:	4b82      	ldr	r3, [pc, #520]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 800664a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b08      	cmp	r3, #8
 8006652:	d007      	beq.n	8006664 <HAL_RCC_OscConfig+0x308>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b18      	cmp	r3, #24
 8006658:	d13a      	bne.n	80066d0 <HAL_RCC_OscConfig+0x374>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	2b01      	cmp	r3, #1
 8006662:	d135      	bne.n	80066d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006664:	4b7b      	ldr	r3, [pc, #492]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_RCC_OscConfig+0x320>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b80      	cmp	r3, #128	@ 0x80
 8006676:	d001      	beq.n	800667c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e2c1      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800667c:	f7fc fab8 	bl	8002bf0 <HAL_GetREVID>
 8006680:	4603      	mov	r3, r0
 8006682:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006686:	4293      	cmp	r3, r2
 8006688:	d817      	bhi.n	80066ba <HAL_RCC_OscConfig+0x35e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	2b20      	cmp	r3, #32
 8006690:	d108      	bne.n	80066a4 <HAL_RCC_OscConfig+0x348>
 8006692:	4b70      	ldr	r3, [pc, #448]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800669a:	4a6e      	ldr	r2, [pc, #440]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 800669c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066a2:	e075      	b.n	8006790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066a4:	4b6b      	ldr	r3, [pc, #428]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	069b      	lsls	r3, r3, #26
 80066b2:	4968      	ldr	r1, [pc, #416]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066b8:	e06a      	b.n	8006790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066ba:	4b66      	ldr	r3, [pc, #408]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	061b      	lsls	r3, r3, #24
 80066c8:	4962      	ldr	r1, [pc, #392]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ce:	e05f      	b.n	8006790 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d042      	beq.n	800675e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80066de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fc fa54 	bl	8002b90 <HAL_GetTick>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066ec:	f7fc fa50 	bl	8002b90 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e280      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066fe:	4b55      	ldr	r3, [pc, #340]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800670a:	f7fc fa71 	bl	8002bf0 <HAL_GetREVID>
 800670e:	4603      	mov	r3, r0
 8006710:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006714:	4293      	cmp	r3, r2
 8006716:	d817      	bhi.n	8006748 <HAL_RCC_OscConfig+0x3ec>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	2b20      	cmp	r3, #32
 800671e:	d108      	bne.n	8006732 <HAL_RCC_OscConfig+0x3d6>
 8006720:	4b4c      	ldr	r3, [pc, #304]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006728:	4a4a      	ldr	r2, [pc, #296]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 800672a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800672e:	6053      	str	r3, [r2, #4]
 8006730:	e02e      	b.n	8006790 <HAL_RCC_OscConfig+0x434>
 8006732:	4b48      	ldr	r3, [pc, #288]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	069b      	lsls	r3, r3, #26
 8006740:	4944      	ldr	r1, [pc, #272]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006742:	4313      	orrs	r3, r2
 8006744:	604b      	str	r3, [r1, #4]
 8006746:	e023      	b.n	8006790 <HAL_RCC_OscConfig+0x434>
 8006748:	4b42      	ldr	r3, [pc, #264]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	061b      	lsls	r3, r3, #24
 8006756:	493f      	ldr	r1, [pc, #252]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006758:	4313      	orrs	r3, r2
 800675a:	60cb      	str	r3, [r1, #12]
 800675c:	e018      	b.n	8006790 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800675e:	4b3d      	ldr	r3, [pc, #244]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a3c      	ldr	r2, [pc, #240]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676a:	f7fc fa11 	bl	8002b90 <HAL_GetTick>
 800676e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006770:	e008      	b.n	8006784 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006772:	f7fc fa0d 	bl	8002b90 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e23d      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006784:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f0      	bne.n	8006772 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d036      	beq.n	800680a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d019      	beq.n	80067d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80067a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b0:	f7fc f9ee 	bl	8002b90 <HAL_GetTick>
 80067b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b8:	f7fc f9ea 	bl	8002b90 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e21a      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ca:	4b22      	ldr	r3, [pc, #136]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80067cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f0      	beq.n	80067b8 <HAL_RCC_OscConfig+0x45c>
 80067d6:	e018      	b.n	800680a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80067da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e4:	f7fc f9d4 	bl	8002b90 <HAL_GetTick>
 80067e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ec:	f7fc f9d0 	bl	8002b90 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e200      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067fe:	4b15      	ldr	r3, [pc, #84]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d039      	beq.n	800688a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01c      	beq.n	8006858 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a0c      	ldr	r2, [pc, #48]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006824:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800682a:	f7fc f9b1 	bl	8002b90 <HAL_GetTick>
 800682e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006832:	f7fc f9ad 	bl	8002b90 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e1dd      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006844:	4b03      	ldr	r3, [pc, #12]	@ (8006854 <HAL_RCC_OscConfig+0x4f8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0f0      	beq.n	8006832 <HAL_RCC_OscConfig+0x4d6>
 8006850:	e01b      	b.n	800688a <HAL_RCC_OscConfig+0x52e>
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006858:	4b9b      	ldr	r3, [pc, #620]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a9a      	ldr	r2, [pc, #616]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 800685e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006862:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006864:	f7fc f994 	bl	8002b90 <HAL_GetTick>
 8006868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800686c:	f7fc f990 	bl	8002b90 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e1c0      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800687e:	4b92      	ldr	r3, [pc, #584]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f0      	bne.n	800686c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8081 	beq.w	800699a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006898:	4b8c      	ldr	r3, [pc, #560]	@ (8006acc <HAL_RCC_OscConfig+0x770>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a8b      	ldr	r2, [pc, #556]	@ (8006acc <HAL_RCC_OscConfig+0x770>)
 800689e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068a4:	f7fc f974 	bl	8002b90 <HAL_GetTick>
 80068a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ac:	f7fc f970 	bl	8002b90 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	@ 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e1a0      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068be:	4b83      	ldr	r3, [pc, #524]	@ (8006acc <HAL_RCC_OscConfig+0x770>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d106      	bne.n	80068e0 <HAL_RCC_OscConfig+0x584>
 80068d2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80068d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80068de:	e02d      	b.n	800693c <HAL_RCC_OscConfig+0x5e0>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10c      	bne.n	8006902 <HAL_RCC_OscConfig+0x5a6>
 80068e8:	4b77      	ldr	r3, [pc, #476]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80068ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ec:	4a76      	ldr	r2, [pc, #472]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80068ee:	f023 0301 	bic.w	r3, r3, #1
 80068f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f4:	4b74      	ldr	r3, [pc, #464]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80068f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f8:	4a73      	ldr	r2, [pc, #460]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80068fa:	f023 0304 	bic.w	r3, r3, #4
 80068fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006900:	e01c      	b.n	800693c <HAL_RCC_OscConfig+0x5e0>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b05      	cmp	r3, #5
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x5c8>
 800690a:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	4a6e      	ldr	r2, [pc, #440]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006910:	f043 0304 	orr.w	r3, r3, #4
 8006914:	6713      	str	r3, [r2, #112]	@ 0x70
 8006916:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	4a6b      	ldr	r2, [pc, #428]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	6713      	str	r3, [r2, #112]	@ 0x70
 8006922:	e00b      	b.n	800693c <HAL_RCC_OscConfig+0x5e0>
 8006924:	4b68      	ldr	r3, [pc, #416]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006928:	4a67      	ldr	r2, [pc, #412]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006930:	4b65      	ldr	r3, [pc, #404]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006934:	4a64      	ldr	r2, [pc, #400]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006936:	f023 0304 	bic.w	r3, r3, #4
 800693a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fc f924 	bl	8002b90 <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fc f920 	bl	8002b90 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e14e      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006962:	4b59      	ldr	r3, [pc, #356]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0ee      	beq.n	800694c <HAL_RCC_OscConfig+0x5f0>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006970:	f7fc f90e 	bl	8002b90 <HAL_GetTick>
 8006974:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006976:	e00a      	b.n	800698e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006978:	f7fc f90a 	bl	8002b90 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e138      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800698e:	4b4e      	ldr	r3, [pc, #312]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1ee      	bne.n	8006978 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 812d 	beq.w	8006bfe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069a4:	4b48      	ldr	r3, [pc, #288]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069ac:	2b18      	cmp	r3, #24
 80069ae:	f000 80bd 	beq.w	8006b2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	f040 809e 	bne.w	8006af8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069bc:	4b42      	ldr	r3, [pc, #264]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a41      	ldr	r2, [pc, #260]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80069c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fc f8e2 	bl	8002b90 <HAL_GetTick>
 80069cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d0:	f7fc f8de 	bl	8002b90 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e10e      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069e2:	4b39      	ldr	r3, [pc, #228]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ee:	4b36      	ldr	r3, [pc, #216]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 80069f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069f2:	4b37      	ldr	r3, [pc, #220]	@ (8006ad0 <HAL_RCC_OscConfig+0x774>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069fe:	0112      	lsls	r2, r2, #4
 8006a00:	430a      	orrs	r2, r1
 8006a02:	4931      	ldr	r1, [pc, #196]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a16:	3b01      	subs	r3, #1
 8006a18:	025b      	lsls	r3, r3, #9
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	3b01      	subs	r3, #1
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a30:	3b01      	subs	r3, #1
 8006a32:	061b      	lsls	r3, r3, #24
 8006a34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a38:	4923      	ldr	r1, [pc, #140]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a3e:	4b22      	ldr	r3, [pc, #136]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	4a21      	ldr	r2, [pc, #132]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a4e:	4b21      	ldr	r3, [pc, #132]	@ (8006ad4 <HAL_RCC_OscConfig+0x778>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a56:	00d2      	lsls	r2, r2, #3
 8006a58:	491b      	ldr	r1, [pc, #108]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	f023 020c 	bic.w	r2, r3, #12
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	4917      	ldr	r1, [pc, #92]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a70:	4b15      	ldr	r3, [pc, #84]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	f023 0202 	bic.w	r2, r3, #2
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7c:	4912      	ldr	r1, [pc, #72]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a82:	4b11      	ldr	r3, [pc, #68]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	4a10      	ldr	r2, [pc, #64]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006aa6:	4b08      	ldr	r3, [pc, #32]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	4a07      	ldr	r2, [pc, #28]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	f043 0301 	orr.w	r3, r3, #1
 8006ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ab2:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a04      	ldr	r2, [pc, #16]	@ (8006ac8 <HAL_RCC_OscConfig+0x76c>)
 8006ab8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abe:	f7fc f867 	bl	8002b90 <HAL_GetTick>
 8006ac2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ac4:	e011      	b.n	8006aea <HAL_RCC_OscConfig+0x78e>
 8006ac6:	bf00      	nop
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	58024800 	.word	0x58024800
 8006ad0:	fffffc0c 	.word	0xfffffc0c
 8006ad4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fc f85a 	bl	8002b90 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e08a      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aea:	4b47      	ldr	r3, [pc, #284]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x77c>
 8006af6:	e082      	b.n	8006bfe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af8:	4b43      	ldr	r3, [pc, #268]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a42      	ldr	r2, [pc, #264]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b04:	f7fc f844 	bl	8002b90 <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b0c:	f7fc f840 	bl	8002b90 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e070      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x7b0>
 8006b2a:	e068      	b.n	8006bfe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b2c:	4b36      	ldr	r3, [pc, #216]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b32:	4b35      	ldr	r3, [pc, #212]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d031      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f003 0203 	and.w	r2, r3, #3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d12a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	091b      	lsrs	r3, r3, #4
 8006b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d122      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d11a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	0a5b      	lsrs	r3, r3, #9
 8006b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d111      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	0c1b      	lsrs	r3, r3, #16
 8006b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d108      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	0e1b      	lsrs	r3, r3, #24
 8006b96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e02b      	b.n	8006c00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ba8:	4b17      	ldr	r3, [pc, #92]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bac:	08db      	lsrs	r3, r3, #3
 8006bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d01f      	beq.n	8006bfe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bbe:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc2:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bca:	f7fb ffe1 	bl	8002b90 <HAL_GetTick>
 8006bce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006bd0:	bf00      	nop
 8006bd2:	f7fb ffdd 	bl	8002b90 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d0f9      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bde:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be2:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <HAL_RCC_OscConfig+0x8b0>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006bea:	00d2      	lsls	r2, r2, #3
 8006bec:	4906      	ldr	r1, [pc, #24]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bf2:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	4a04      	ldr	r2, [pc, #16]	@ (8006c08 <HAL_RCC_OscConfig+0x8ac>)
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
 8006bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3730      	adds	r7, #48	@ 0x30
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	ffff0007 	.word	0xffff0007

08006c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e19c      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c24:	4b8a      	ldr	r3, [pc, #552]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d910      	bls.n	8006c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b87      	ldr	r3, [pc, #540]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 020f 	bic.w	r2, r3, #15
 8006c3a:	4985      	ldr	r1, [pc, #532]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b83      	ldr	r3, [pc, #524]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e184      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	4b7b      	ldr	r3, [pc, #492]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d908      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c70:	4b78      	ldr	r3, [pc, #480]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	4975      	ldr	r1, [pc, #468]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	4b70      	ldr	r3, [pc, #448]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d908      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	496a      	ldr	r1, [pc, #424]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699a      	ldr	r2, [r3, #24]
 8006cc0:	4b64      	ldr	r3, [pc, #400]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d908      	bls.n	8006cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ccc:	4b61      	ldr	r3, [pc, #388]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	495e      	ldr	r1, [pc, #376]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d010      	beq.n	8006d0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	4b59      	ldr	r3, [pc, #356]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d908      	bls.n	8006d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cfa:	4b56      	ldr	r3, [pc, #344]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	4953      	ldr	r1, [pc, #332]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d010      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d908      	bls.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d28:	4b4a      	ldr	r3, [pc, #296]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f023 020f 	bic.w	r2, r3, #15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4947      	ldr	r1, [pc, #284]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d055      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d46:	4b43      	ldr	r3, [pc, #268]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4940      	ldr	r1, [pc, #256]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d107      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d60:	4b3c      	ldr	r3, [pc, #240]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d121      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0f6      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d78:	4b36      	ldr	r3, [pc, #216]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d115      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0ea      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d90:	4b30      	ldr	r3, [pc, #192]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0de      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006da0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0d6      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006db0:	4b28      	ldr	r3, [pc, #160]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f023 0207 	bic.w	r2, r3, #7
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4925      	ldr	r1, [pc, #148]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc2:	f7fb fee5 	bl	8002b90 <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc8:	e00a      	b.n	8006de0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dca:	f7fb fee1 	bl	8002b90 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e0be      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d1eb      	bne.n	8006dca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d010      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	4b14      	ldr	r3, [pc, #80]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d208      	bcs.n	8006e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e0e:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f023 020f 	bic.w	r2, r3, #15
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	490e      	ldr	r1, [pc, #56]	@ (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d214      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b08      	ldr	r3, [pc, #32]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 020f 	bic.w	r2, r3, #15
 8006e36:	4906      	ldr	r1, [pc, #24]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d005      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e086      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
 8006e50:	52002000 	.word	0x52002000
 8006e54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	4b3f      	ldr	r3, [pc, #252]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d208      	bcs.n	8006e86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e74:	4b3c      	ldr	r3, [pc, #240]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	4939      	ldr	r1, [pc, #228]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	4b34      	ldr	r3, [pc, #208]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d208      	bcs.n	8006eb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ea2:	4b31      	ldr	r3, [pc, #196]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	492e      	ldr	r1, [pc, #184]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699a      	ldr	r2, [r3, #24]
 8006ec4:	4b28      	ldr	r3, [pc, #160]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d208      	bcs.n	8006ee2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ed0:	4b25      	ldr	r3, [pc, #148]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	4922      	ldr	r1, [pc, #136]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d010      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69da      	ldr	r2, [r3, #28]
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d208      	bcs.n	8006f10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006efe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	4917      	ldr	r1, [pc, #92]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f10:	f000 f834 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	4912      	ldr	r1, [pc, #72]	@ (8006f6c <HAL_RCC_ClockConfig+0x35c>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	4a0d      	ldr	r2, [pc, #52]	@ (8006f6c <HAL_RCC_ClockConfig+0x35c>)
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	4a0a      	ldr	r2, [pc, #40]	@ (8006f70 <HAL_RCC_ClockConfig+0x360>)
 8006f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f48:	4a0a      	ldr	r2, [pc, #40]	@ (8006f74 <HAL_RCC_ClockConfig+0x364>)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f78 <HAL_RCC_ClockConfig+0x368>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fb fdd2 	bl	8002afc <HAL_InitTick>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	0800bfc0 	.word	0x0800bfc0
 8006f70:	24000008 	.word	0x24000008
 8006f74:	24000004 	.word	0x24000004
 8006f78:	2400000c 	.word	0x2400000c

08006f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	@ 0x24
 8006f80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f82:	4bb3      	ldr	r3, [pc, #716]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f8a:	2b18      	cmp	r3, #24
 8006f8c:	f200 8155 	bhi.w	800723a <HAL_RCC_GetSysClockFreq+0x2be>
 8006f90:	a201      	add	r2, pc, #4	@ (adr r2, 8006f98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006ffd 	.word	0x08006ffd
 8006f9c:	0800723b 	.word	0x0800723b
 8006fa0:	0800723b 	.word	0x0800723b
 8006fa4:	0800723b 	.word	0x0800723b
 8006fa8:	0800723b 	.word	0x0800723b
 8006fac:	0800723b 	.word	0x0800723b
 8006fb0:	0800723b 	.word	0x0800723b
 8006fb4:	0800723b 	.word	0x0800723b
 8006fb8:	08007023 	.word	0x08007023
 8006fbc:	0800723b 	.word	0x0800723b
 8006fc0:	0800723b 	.word	0x0800723b
 8006fc4:	0800723b 	.word	0x0800723b
 8006fc8:	0800723b 	.word	0x0800723b
 8006fcc:	0800723b 	.word	0x0800723b
 8006fd0:	0800723b 	.word	0x0800723b
 8006fd4:	0800723b 	.word	0x0800723b
 8006fd8:	08007029 	.word	0x08007029
 8006fdc:	0800723b 	.word	0x0800723b
 8006fe0:	0800723b 	.word	0x0800723b
 8006fe4:	0800723b 	.word	0x0800723b
 8006fe8:	0800723b 	.word	0x0800723b
 8006fec:	0800723b 	.word	0x0800723b
 8006ff0:	0800723b 	.word	0x0800723b
 8006ff4:	0800723b 	.word	0x0800723b
 8006ff8:	0800702f 	.word	0x0800702f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ffc:	4b94      	ldr	r3, [pc, #592]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007008:	4b91      	ldr	r3, [pc, #580]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	08db      	lsrs	r3, r3, #3
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	4a90      	ldr	r2, [pc, #576]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800701a:	e111      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800701c:	4b8d      	ldr	r3, [pc, #564]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800701e:	61bb      	str	r3, [r7, #24]
      break;
 8007020:	e10e      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007022:	4b8d      	ldr	r3, [pc, #564]	@ (8007258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007024:	61bb      	str	r3, [r7, #24]
      break;
 8007026:	e10b      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007028:	4b8c      	ldr	r3, [pc, #560]	@ (800725c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800702a:	61bb      	str	r3, [r7, #24]
      break;
 800702c:	e108      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800702e:	4b88      	ldr	r3, [pc, #544]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007038:	4b85      	ldr	r3, [pc, #532]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007042:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007044:	4b82      	ldr	r3, [pc, #520]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800704e:	4b80      	ldr	r3, [pc, #512]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80e1 	beq.w	8007234 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f000 8083 	beq.w	8007180 <HAL_RCC_GetSysClockFreq+0x204>
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b02      	cmp	r3, #2
 800707e:	f200 80a1 	bhi.w	80071c4 <HAL_RCC_GetSysClockFreq+0x248>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x114>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d056      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x1c0>
 800708e:	e099      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007090:	4b6f      	ldr	r3, [pc, #444]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02d      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800709c:	4b6c      	ldr	r3, [pc, #432]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	08db      	lsrs	r3, r3, #3
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	4a6b      	ldr	r2, [pc, #428]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b62      	ldr	r3, [pc, #392]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070f6:	e087      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007264 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b51      	ldr	r3, [pc, #324]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a02 	vldr	s12, [r7, #8]
 800711e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800713a:	e065      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007268 <HAL_RCC_GetSysClockFreq+0x2ec>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b40      	ldr	r3, [pc, #256]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007162:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800717e:	e043      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800726c <HAL_RCC_GetSysClockFreq+0x2f0>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b2f      	ldr	r3, [pc, #188]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071c2:	e021      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007268 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007206:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007208:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720c:	0a5b      	lsrs	r3, r3, #9
 800720e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007212:	3301      	adds	r3, #1
 8007214:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007220:	edd7 6a07 	vldr	s13, [r7, #28]
 8007224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722c:	ee17 3a90 	vmov	r3, s15
 8007230:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007232:	e005      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	61bb      	str	r3, [r7, #24]
      break;
 8007238:	e002      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800723c:	61bb      	str	r3, [r7, #24]
      break;
 800723e:	bf00      	nop
  }

  return sysclockfreq;
 8007240:	69bb      	ldr	r3, [r7, #24]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3724      	adds	r7, #36	@ 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	58024400 	.word	0x58024400
 8007254:	03d09000 	.word	0x03d09000
 8007258:	003d0900 	.word	0x003d0900
 800725c:	017d7840 	.word	0x017d7840
 8007260:	46000000 	.word	0x46000000
 8007264:	4c742400 	.word	0x4c742400
 8007268:	4a742400 	.word	0x4a742400
 800726c:	4bbebc20 	.word	0x4bbebc20

08007270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007276:	f7ff fe81 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 800727a:	4602      	mov	r2, r0
 800727c:	4b10      	ldr	r3, [pc, #64]	@ (80072c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	490f      	ldr	r1, [pc, #60]	@ (80072c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007288:	5ccb      	ldrb	r3, [r1, r3]
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007294:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	4a09      	ldr	r2, [pc, #36]	@ (80072c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800729e:	5cd3      	ldrb	r3, [r2, r3]
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	4a07      	ldr	r2, [pc, #28]	@ (80072c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ae:	4a07      	ldr	r2, [pc, #28]	@ (80072cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072b4:	4b04      	ldr	r3, [pc, #16]	@ (80072c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	58024400 	.word	0x58024400
 80072c4:	0800bfc0 	.word	0x0800bfc0
 80072c8:	24000008 	.word	0x24000008
 80072cc:	24000004 	.word	0x24000004

080072d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072d4:	f7ff ffcc 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b06      	ldr	r3, [pc, #24]	@ (80072f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	091b      	lsrs	r3, r3, #4
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4904      	ldr	r1, [pc, #16]	@ (80072f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	58024400 	.word	0x58024400
 80072f8:	0800bfc0 	.word	0x0800bfc0

080072fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007300:	f7ff ffb6 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8007304:	4602      	mov	r2, r0
 8007306:	4b06      	ldr	r3, [pc, #24]	@ (8007320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4904      	ldr	r1, [pc, #16]	@ (8007324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	58024400 	.word	0x58024400
 8007324:	0800bfc0 	.word	0x0800bfc0

08007328 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800732c:	b0ca      	sub	sp, #296	@ 0x128
 800732e:	af00      	add	r7, sp, #0
 8007330:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007334:	2300      	movs	r3, #0
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800733a:	2300      	movs	r3, #0
 800733c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800734c:	2500      	movs	r5, #0
 800734e:	ea54 0305 	orrs.w	r3, r4, r5
 8007352:	d049      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800735a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800735e:	d02f      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007360:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007364:	d828      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800736a:	d01a      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800736c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007370:	d822      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800737a:	d007      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800737c:	e01c      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800737e:	4bb8      	ldr	r3, [pc, #736]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007382:	4ab7      	ldr	r2, [pc, #732]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800738a:	e01a      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007390:	3308      	adds	r3, #8
 8007392:	2102      	movs	r1, #2
 8007394:	4618      	mov	r0, r3
 8007396:	f002 fb61 	bl	8009a5c <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073a0:	e00f      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a6:	3328      	adds	r3, #40	@ 0x28
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f002 fc08 	bl	8009bc0 <RCCEx_PLL3_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073b6:	e004      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073be:	e000      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073ca:	4ba5      	ldr	r3, [pc, #660]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073d8:	4aa1      	ldr	r2, [pc, #644]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073da:	430b      	orrs	r3, r1
 80073dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80073f4:	f04f 0900 	mov.w	r9, #0
 80073f8:	ea58 0309 	orrs.w	r3, r8, r9
 80073fc:	d047      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007404:	2b04      	cmp	r3, #4
 8007406:	d82a      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007408:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007425 	.word	0x08007425
 8007414:	08007433 	.word	0x08007433
 8007418:	08007449 	.word	0x08007449
 800741c:	08007467 	.word	0x08007467
 8007420:	08007467 	.word	0x08007467
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007424:	4b8e      	ldr	r3, [pc, #568]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	4a8d      	ldr	r2, [pc, #564]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800742a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007430:	e01a      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007436:	3308      	adds	r3, #8
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f002 fb0e 	bl	8009a5c <RCCEx_PLL2_Config>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007446:	e00f      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744c:	3328      	adds	r3, #40	@ 0x28
 800744e:	2100      	movs	r1, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f002 fbb5 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800745c:	e004      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007464:	e000      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007470:	4b7b      	ldr	r3, [pc, #492]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007474:	f023 0107 	bic.w	r1, r3, #7
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800747e:	4a78      	ldr	r2, [pc, #480]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007480:	430b      	orrs	r3, r1
 8007482:	6513      	str	r3, [r2, #80]	@ 0x50
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800749a:	f04f 0b00 	mov.w	fp, #0
 800749e:	ea5a 030b 	orrs.w	r3, sl, fp
 80074a2:	d04c      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80074a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ae:	d030      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80074b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074b4:	d829      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80074b8:	d02d      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80074bc:	d825      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074be:	2b80      	cmp	r3, #128	@ 0x80
 80074c0:	d018      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80074c2:	2b80      	cmp	r3, #128	@ 0x80
 80074c4:	d821      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80074ca:	2b40      	cmp	r3, #64	@ 0x40
 80074cc:	d007      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074ce:	e01c      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d0:	4b63      	ldr	r3, [pc, #396]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	4a62      	ldr	r2, [pc, #392]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074dc:	e01c      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e2:	3308      	adds	r3, #8
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f002 fab8 	bl	8009a5c <RCCEx_PLL2_Config>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074f2:	e011      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f8:	3328      	adds	r3, #40	@ 0x28
 80074fa:	2100      	movs	r1, #0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f002 fb5f 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007508:	e006      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007510:	e002      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007520:	4b4f      	ldr	r3, [pc, #316]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007524:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752e:	4a4c      	ldr	r2, [pc, #304]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007530:	430b      	orrs	r3, r1
 8007532:	6513      	str	r3, [r2, #80]	@ 0x50
 8007534:	e003      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800753a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800754a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800754e:	2300      	movs	r3, #0
 8007550:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007554:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007558:	460b      	mov	r3, r1
 800755a:	4313      	orrs	r3, r2
 800755c:	d053      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007566:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800756a:	d035      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800756c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007570:	d82e      	bhi.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007572:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007576:	d031      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007578:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800757c:	d828      	bhi.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800757e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007582:	d01a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007588:	d822      	bhi.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800758e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007592:	d007      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007594:	e01c      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007596:	4b32      	ldr	r3, [pc, #200]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	4a31      	ldr	r2, [pc, #196]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800759c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075a2:	e01c      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a8:	3308      	adds	r3, #8
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f002 fa55 	bl	8009a5c <RCCEx_PLL2_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075b8:	e011      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075be:	3328      	adds	r3, #40	@ 0x28
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f002 fafc 	bl	8009bc0 <RCCEx_PLL3_Config>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ce:	e006      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075d6:	e002      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075d8:	bf00      	nop
 80075da:	e000      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80075fc:	e003      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007612:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007616:	2300      	movs	r3, #0
 8007618:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800761c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007620:	460b      	mov	r3, r1
 8007622:	4313      	orrs	r3, r2
 8007624:	d056      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800762e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007632:	d038      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007634:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007638:	d831      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800763a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800763e:	d034      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007640:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007644:	d82b      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800764a:	d01d      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800764c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007650:	d825      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d006      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800765a:	d00a      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800765c:	e01f      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007664:	4ba2      	ldr	r3, [pc, #648]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	4aa1      	ldr	r2, [pc, #644]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800766a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007670:	e01c      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007676:	3308      	adds	r3, #8
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f002 f9ee 	bl	8009a5c <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007686:	e011      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768c:	3328      	adds	r3, #40	@ 0x28
 800768e:	2100      	movs	r1, #0
 8007690:	4618      	mov	r0, r3
 8007692:	f002 fa95 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800769c:	e006      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076a6:	bf00      	nop
 80076a8:	e000      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076b4:	4b8e      	ldr	r3, [pc, #568]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076c4:	4a8a      	ldr	r2, [pc, #552]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076c6:	430b      	orrs	r3, r1
 80076c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ca:	e003      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80076e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076e4:	2300      	movs	r3, #0
 80076e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80076ee:	460b      	mov	r3, r1
 80076f0:	4313      	orrs	r3, r2
 80076f2:	d03a      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fa:	2b30      	cmp	r3, #48	@ 0x30
 80076fc:	d01f      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80076fe:	2b30      	cmp	r3, #48	@ 0x30
 8007700:	d819      	bhi.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007702:	2b20      	cmp	r3, #32
 8007704:	d00c      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007706:	2b20      	cmp	r3, #32
 8007708:	d815      	bhi.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d019      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800770e:	2b10      	cmp	r3, #16
 8007710:	d111      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007712:	4b77      	ldr	r3, [pc, #476]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007716:	4a76      	ldr	r2, [pc, #472]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800771c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800771e:	e011      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007724:	3308      	adds	r3, #8
 8007726:	2102      	movs	r1, #2
 8007728:	4618      	mov	r0, r3
 800772a:	f002 f997 	bl	8009a5c <RCCEx_PLL2_Config>
 800772e:	4603      	mov	r3, r0
 8007730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800774c:	4b68      	ldr	r3, [pc, #416]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800774e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007750:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800775a:	4a65      	ldr	r2, [pc, #404]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800775c:	430b      	orrs	r3, r1
 800775e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007760:	e003      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007776:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800777a:	2300      	movs	r3, #0
 800777c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007780:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007784:	460b      	mov	r3, r1
 8007786:	4313      	orrs	r3, r2
 8007788:	d051      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007790:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007794:	d035      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007796:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800779a:	d82e      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800779c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077a0:	d031      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077a6:	d828      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ac:	d01a      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077b2:	d822      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80077b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077bc:	d007      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077be:	e01c      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c0:	4b4b      	ldr	r3, [pc, #300]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c4:	4a4a      	ldr	r2, [pc, #296]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077cc:	e01c      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d2:	3308      	adds	r3, #8
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f002 f940 	bl	8009a5c <RCCEx_PLL2_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077e2:	e011      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	3328      	adds	r3, #40	@ 0x28
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f002 f9e7 	bl	8009bc0 <RCCEx_PLL3_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077f8:	e006      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007800:	e002      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007810:	4b37      	ldr	r3, [pc, #220]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007814:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800781e:	4a34      	ldr	r2, [pc, #208]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007820:	430b      	orrs	r3, r1
 8007822:	6513      	str	r3, [r2, #80]	@ 0x50
 8007824:	e003      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800782e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800783a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800783e:	2300      	movs	r3, #0
 8007840:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007844:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007848:	460b      	mov	r3, r1
 800784a:	4313      	orrs	r3, r2
 800784c:	d056      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007858:	d033      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800785a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800785e:	d82c      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007860:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007864:	d02f      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007866:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800786a:	d826      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800786c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007870:	d02b      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007872:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007876:	d820      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800787c:	d012      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800787e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007882:	d81a      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d022      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800788c:	d115      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007892:	3308      	adds	r3, #8
 8007894:	2101      	movs	r1, #1
 8007896:	4618      	mov	r0, r3
 8007898:	f002 f8e0 	bl	8009a5c <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078a2:	e015      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a8:	3328      	adds	r3, #40	@ 0x28
 80078aa:	2101      	movs	r1, #1
 80078ac:	4618      	mov	r0, r3
 80078ae:	f002 f987 	bl	8009bc0 <RCCEx_PLL3_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078b8:	e00a      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078c2:	bf00      	nop
 80078c4:	e004      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078c6:	bf00      	nop
 80078c8:	e002      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10d      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078d8:	4b05      	ldr	r3, [pc, #20]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e6:	4a02      	ldr	r2, [pc, #8]	@ (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078e8:	430b      	orrs	r3, r1
 80078ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80078ec:	e006      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078ee:	bf00      	nop
 80078f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007912:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	d055      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007928:	d033      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800792a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800792e:	d82c      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007934:	d02f      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800793a:	d826      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800793c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007940:	d02b      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007946:	d820      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800794c:	d012      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800794e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007952:	d81a      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d022      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800795c:	d115      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	3308      	adds	r3, #8
 8007964:	2101      	movs	r1, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f002 f878 	bl	8009a5c <RCCEx_PLL2_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007972:	e015      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	3328      	adds	r3, #40	@ 0x28
 800797a:	2101      	movs	r1, #1
 800797c:	4618      	mov	r0, r3
 800797e:	f002 f91f 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007988:	e00a      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007990:	e006      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007992:	bf00      	nop
 8007994:	e004      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007996:	bf00      	nop
 8007998:	e002      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800799a:	bf00      	nop
 800799c:	e000      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800799e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079a8:	4ba3      	ldr	r3, [pc, #652]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079b8:	4a9f      	ldr	r2, [pc, #636]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ba:	430b      	orrs	r3, r1
 80079bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80079d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079d8:	2300      	movs	r3, #0
 80079da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079e2:	460b      	mov	r3, r1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	d037      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f2:	d00e      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f8:	d816      	bhi.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d018      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80079fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a02:	d111      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a04:	4b8c      	ldr	r3, [pc, #560]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	4a8b      	ldr	r2, [pc, #556]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a10:	e00f      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	3308      	adds	r3, #8
 8007a18:	2101      	movs	r1, #1
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f002 f81e 	bl	8009a5c <RCCEx_PLL2_Config>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a26:	e004      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a2e:	e000      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a48:	4a7b      	ldr	r2, [pc, #492]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a4e:	e003      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4313      	orrs	r3, r2
 8007a76:	d039      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d81c      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a82:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007ac5 	.word	0x08007ac5
 8007a8c:	08007a99 	.word	0x08007a99
 8007a90:	08007aa7 	.word	0x08007aa7
 8007a94:	08007ac5 	.word	0x08007ac5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a98:	4b67      	ldr	r3, [pc, #412]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	4a66      	ldr	r2, [pc, #408]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007aa4:	e00f      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	3308      	adds	r3, #8
 8007aac:	2102      	movs	r1, #2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 ffd4 	bl	8009a5c <RCCEx_PLL2_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007aba:	e004      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ace:	4b5a      	ldr	r3, [pc, #360]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ad2:	f023 0103 	bic.w	r1, r3, #3
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007adc:	4a56      	ldr	r2, [pc, #344]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ae2:	e003      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007afc:	2300      	movs	r3, #0
 8007afe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b06:	460b      	mov	r3, r1
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f000 809f 	beq.w	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a4a      	ldr	r2, [pc, #296]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b1a:	f7fb f839 	bl	8002b90 <HAL_GetTick>
 8007b1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b22:	e00b      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b24:	f7fb f834 	bl	8002b90 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b64      	cmp	r3, #100	@ 0x64
 8007b32:	d903      	bls.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b3a:	e005      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0ed      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d179      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b50:	4b39      	ldr	r3, [pc, #228]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b5c:	4053      	eors	r3, r2
 8007b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d015      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b66:	4b34      	ldr	r3, [pc, #208]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b72:	4b31      	ldr	r3, [pc, #196]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b76:	4a30      	ldr	r2, [pc, #192]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b82:	4a2d      	ldr	r2, [pc, #180]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007b90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b9e:	d118      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba0:	f7fa fff6 	bl	8002b90 <HAL_GetTick>
 8007ba4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba8:	e00d      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007baa:	f7fa fff1 	bl	8002b90 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bb4:	1ad2      	subs	r2, r2, r3
 8007bb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d903      	bls.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007bc4:	e005      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0eb      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d129      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bea:	d10e      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007bec:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bfc:	091a      	lsrs	r2, r3, #4
 8007bfe:	4b10      	ldr	r3, [pc, #64]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	4a0d      	ldr	r2, [pc, #52]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6113      	str	r3, [r2, #16]
 8007c08:	e005      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c14:	6113      	str	r3, [r2, #16]
 8007c16:	4b08      	ldr	r3, [pc, #32]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c26:	4a04      	ldr	r2, [pc, #16]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c2c:	e00e      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007c36:	e009      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	58024800 	.word	0x58024800
 8007c40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f002 0301 	and.w	r3, r2, #1
 8007c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f000 8089 	beq.w	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c74:	2b28      	cmp	r3, #40	@ 0x28
 8007c76:	d86b      	bhi.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c78:	a201      	add	r2, pc, #4	@ (adr r2, 8007c80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007d59 	.word	0x08007d59
 8007c84:	08007d51 	.word	0x08007d51
 8007c88:	08007d51 	.word	0x08007d51
 8007c8c:	08007d51 	.word	0x08007d51
 8007c90:	08007d51 	.word	0x08007d51
 8007c94:	08007d51 	.word	0x08007d51
 8007c98:	08007d51 	.word	0x08007d51
 8007c9c:	08007d51 	.word	0x08007d51
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d51 	.word	0x08007d51
 8007ca8:	08007d51 	.word	0x08007d51
 8007cac:	08007d51 	.word	0x08007d51
 8007cb0:	08007d51 	.word	0x08007d51
 8007cb4:	08007d51 	.word	0x08007d51
 8007cb8:	08007d51 	.word	0x08007d51
 8007cbc:	08007d51 	.word	0x08007d51
 8007cc0:	08007d3b 	.word	0x08007d3b
 8007cc4:	08007d51 	.word	0x08007d51
 8007cc8:	08007d51 	.word	0x08007d51
 8007ccc:	08007d51 	.word	0x08007d51
 8007cd0:	08007d51 	.word	0x08007d51
 8007cd4:	08007d51 	.word	0x08007d51
 8007cd8:	08007d51 	.word	0x08007d51
 8007cdc:	08007d51 	.word	0x08007d51
 8007ce0:	08007d59 	.word	0x08007d59
 8007ce4:	08007d51 	.word	0x08007d51
 8007ce8:	08007d51 	.word	0x08007d51
 8007cec:	08007d51 	.word	0x08007d51
 8007cf0:	08007d51 	.word	0x08007d51
 8007cf4:	08007d51 	.word	0x08007d51
 8007cf8:	08007d51 	.word	0x08007d51
 8007cfc:	08007d51 	.word	0x08007d51
 8007d00:	08007d59 	.word	0x08007d59
 8007d04:	08007d51 	.word	0x08007d51
 8007d08:	08007d51 	.word	0x08007d51
 8007d0c:	08007d51 	.word	0x08007d51
 8007d10:	08007d51 	.word	0x08007d51
 8007d14:	08007d51 	.word	0x08007d51
 8007d18:	08007d51 	.word	0x08007d51
 8007d1c:	08007d51 	.word	0x08007d51
 8007d20:	08007d59 	.word	0x08007d59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d28:	3308      	adds	r3, #8
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fe95 	bl	8009a5c <RCCEx_PLL2_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d38:	e00f      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3e:	3328      	adds	r3, #40	@ 0x28
 8007d40:	2101      	movs	r1, #1
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 ff3c 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d4e:	e004      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d56:	e000      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d62:	4bbf      	ldr	r3, [pc, #764]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d70:	4abb      	ldr	r2, [pc, #748]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d72:	430b      	orrs	r3, r1
 8007d74:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d76:	e003      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f002 0302 	and.w	r3, r2, #2
 8007d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	d041      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	d824      	bhi.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007daa:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dfd 	.word	0x08007dfd
 8007db4:	08007dc9 	.word	0x08007dc9
 8007db8:	08007ddf 	.word	0x08007ddf
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007dfd 	.word	0x08007dfd
 8007dc4:	08007dfd 	.word	0x08007dfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dcc:	3308      	adds	r3, #8
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 fe43 	bl	8009a5c <RCCEx_PLL2_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ddc:	e00f      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	3328      	adds	r3, #40	@ 0x28
 8007de4:	2101      	movs	r1, #1
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 feea 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007df2:	e004      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dfa:	e000      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e06:	4b96      	ldr	r3, [pc, #600]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0a:	f023 0107 	bic.w	r1, r3, #7
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e14:	4a92      	ldr	r2, [pc, #584]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e16:	430b      	orrs	r3, r1
 8007e18:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e1a:	e003      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f002 0304 	and.w	r3, r2, #4
 8007e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	d044      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d825      	bhi.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e50:	a201      	add	r2, pc, #4	@ (adr r2, 8007e58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007ea5 	.word	0x08007ea5
 8007e5c:	08007e71 	.word	0x08007e71
 8007e60:	08007e87 	.word	0x08007e87
 8007e64:	08007ea5 	.word	0x08007ea5
 8007e68:	08007ea5 	.word	0x08007ea5
 8007e6c:	08007ea5 	.word	0x08007ea5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e74:	3308      	adds	r3, #8
 8007e76:	2101      	movs	r1, #1
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fdef 	bl	8009a5c <RCCEx_PLL2_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e84:	e00f      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	3328      	adds	r3, #40	@ 0x28
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 fe96 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e9a:	e004      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ea2:	e000      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007eae:	4b6c      	ldr	r3, [pc, #432]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb2:	f023 0107 	bic.w	r1, r3, #7
 8007eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ebe:	4a68      	ldr	r2, [pc, #416]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ec4:	e003      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f002 0320 	and.w	r3, r2, #32
 8007eda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4313      	orrs	r3, r2
 8007eec:	d055      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007efa:	d033      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f00:	d82c      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f06:	d02f      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0c:	d826      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f12:	d02b      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f18:	d820      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1e:	d012      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f24:	d81a      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d022      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f2e:	d115      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	3308      	adds	r3, #8
 8007f36:	2100      	movs	r1, #0
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 fd8f 	bl	8009a5c <RCCEx_PLL2_Config>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f44:	e015      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	3328      	adds	r3, #40	@ 0x28
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fe36 	bl	8009bc0 <RCCEx_PLL3_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f5a:	e00a      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f62:	e006      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f64:	bf00      	nop
 8007f66:	e004      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f68:	bf00      	nop
 8007f6a:	e002      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f6c:	bf00      	nop
 8007f6e:	e000      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10b      	bne.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f7a:	4b39      	ldr	r3, [pc, #228]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8a:	4a35      	ldr	r2, [pc, #212]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f90:	e003      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007faa:	2300      	movs	r3, #0
 8007fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	d058      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fc6:	d033      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007fc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fcc:	d82c      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd2:	d02f      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd8:	d826      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fde:	d02b      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fe4:	d820      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fea:	d012      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ff0:	d81a      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d022      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ffa:	d115      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008000:	3308      	adds	r3, #8
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fd29 	bl	8009a5c <RCCEx_PLL2_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008010:	e015      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008016:	3328      	adds	r3, #40	@ 0x28
 8008018:	2102      	movs	r1, #2
 800801a:	4618      	mov	r0, r3
 800801c:	f001 fdd0 	bl	8009bc0 <RCCEx_PLL3_Config>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008026:	e00a      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800802e:	e006      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008030:	bf00      	nop
 8008032:	e004      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008034:	bf00      	nop
 8008036:	e002      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008038:	bf00      	nop
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800803c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10e      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008046:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800804a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008056:	4a02      	ldr	r2, [pc, #8]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008058:	430b      	orrs	r3, r1
 800805a:	6593      	str	r3, [r2, #88]	@ 0x58
 800805c:	e006      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800805e:	bf00      	nop
 8008060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800806c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008082:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008086:	460b      	mov	r3, r1
 8008088:	4313      	orrs	r3, r2
 800808a:	d055      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008094:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008098:	d033      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800809a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800809e:	d82c      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a4:	d02f      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80080a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080aa:	d826      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080b0:	d02b      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80080b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080b6:	d820      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080bc:	d012      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80080be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080c2:	d81a      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d022      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80080c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080cc:	d115      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	3308      	adds	r3, #8
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fcc0 	bl	8009a5c <RCCEx_PLL2_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080e2:	e015      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	3328      	adds	r3, #40	@ 0x28
 80080ea:	2102      	movs	r1, #2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fd67 	bl	8009bc0 <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080f8:	e00a      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008100:	e006      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008102:	bf00      	nop
 8008104:	e004      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008106:	bf00      	nop
 8008108:	e002      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800810e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10b      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008118:	4ba1      	ldr	r3, [pc, #644]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800811a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800811c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008128:	4a9d      	ldr	r2, [pc, #628]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800812a:	430b      	orrs	r3, r1
 800812c:	6593      	str	r3, [r2, #88]	@ 0x58
 800812e:	e003      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f002 0308 	and.w	r3, r2, #8
 8008144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008148:	2300      	movs	r3, #0
 800814a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800814e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008152:	460b      	mov	r3, r1
 8008154:	4313      	orrs	r3, r2
 8008156:	d01e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008164:	d10c      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816a:	3328      	adds	r3, #40	@ 0x28
 800816c:	2102      	movs	r1, #2
 800816e:	4618      	mov	r0, r3
 8008170:	f001 fd26 	bl	8009bc0 <RCCEx_PLL3_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008180:	4b87      	ldr	r3, [pc, #540]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008184:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008190:	4a83      	ldr	r2, [pc, #524]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008192:	430b      	orrs	r3, r1
 8008194:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f002 0310 	and.w	r3, r2, #16
 80081a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081a6:	2300      	movs	r3, #0
 80081a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80081b0:	460b      	mov	r3, r1
 80081b2:	4313      	orrs	r3, r2
 80081b4:	d01e      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081c2:	d10c      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c8:	3328      	adds	r3, #40	@ 0x28
 80081ca:	2102      	movs	r1, #2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fcf7 	bl	8009bc0 <RCCEx_PLL3_Config>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081de:	4b70      	ldr	r3, [pc, #448]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081ee:	4a6c      	ldr	r2, [pc, #432]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800820a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800820e:	460b      	mov	r3, r1
 8008210:	4313      	orrs	r3, r2
 8008212:	d03e      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800821c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008220:	d022      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008226:	d81b      	bhi.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008230:	d00b      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008232:	e015      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008238:	3308      	adds	r3, #8
 800823a:	2100      	movs	r1, #0
 800823c:	4618      	mov	r0, r3
 800823e:	f001 fc0d 	bl	8009a5c <RCCEx_PLL2_Config>
 8008242:	4603      	mov	r3, r0
 8008244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008248:	e00f      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824e:	3328      	adds	r3, #40	@ 0x28
 8008250:	2102      	movs	r1, #2
 8008252:	4618      	mov	r0, r3
 8008254:	f001 fcb4 	bl	8009bc0 <RCCEx_PLL3_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800825e:	e004      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008266:	e000      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800826a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10b      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008272:	4b4b      	ldr	r3, [pc, #300]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008276:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008282:	4a47      	ldr	r2, [pc, #284]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008284:	430b      	orrs	r3, r1
 8008286:	6593      	str	r3, [r2, #88]	@ 0x58
 8008288:	e003      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800829e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082a0:	2300      	movs	r3, #0
 80082a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80082a8:	460b      	mov	r3, r1
 80082aa:	4313      	orrs	r3, r2
 80082ac:	d03b      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082ba:	d01f      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80082bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082c0:	d818      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80082c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082c6:	d003      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80082c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082cc:	d007      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082ce:	e011      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d0:	4b33      	ldr	r3, [pc, #204]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	4a32      	ldr	r2, [pc, #200]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082dc:	e00f      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e2:	3328      	adds	r3, #40	@ 0x28
 80082e4:	2101      	movs	r1, #1
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 fc6a 	bl	8009bc0 <RCCEx_PLL3_Config>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80082f2:	e004      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082fa:	e000      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80082fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008306:	4b26      	ldr	r3, [pc, #152]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008316:	4a22      	ldr	r2, [pc, #136]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008318:	430b      	orrs	r3, r1
 800831a:	6553      	str	r3, [r2, #84]	@ 0x54
 800831c:	e003      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008332:	673b      	str	r3, [r7, #112]	@ 0x70
 8008334:	2300      	movs	r3, #0
 8008336:	677b      	str	r3, [r7, #116]	@ 0x74
 8008338:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800833c:	460b      	mov	r3, r1
 800833e:	4313      	orrs	r3, r2
 8008340:	d034      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800834c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008350:	d007      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008352:	e011      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008354:	4b12      	ldr	r3, [pc, #72]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008358:	4a11      	ldr	r2, [pc, #68]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800835a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800835e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008360:	e00e      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008366:	3308      	adds	r3, #8
 8008368:	2102      	movs	r1, #2
 800836a:	4618      	mov	r0, r3
 800836c:	f001 fb76 	bl	8009a5c <RCCEx_PLL2_Config>
 8008370:	4603      	mov	r3, r0
 8008372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008376:	e003      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800837e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10d      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008388:	4b05      	ldr	r3, [pc, #20]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800838a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800838c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008396:	4a02      	ldr	r2, [pc, #8]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008398:	430b      	orrs	r3, r1
 800839a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800839c:	e006      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800839e:	bf00      	nop
 80083a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80083b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083ba:	2300      	movs	r3, #0
 80083bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80083c2:	460b      	mov	r3, r1
 80083c4:	4313      	orrs	r3, r2
 80083c6:	d00c      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	3328      	adds	r3, #40	@ 0x28
 80083ce:	2102      	movs	r1, #2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fbf5 	bl	8009bc0 <RCCEx_PLL3_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80083ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80083f0:	2300      	movs	r3, #0
 80083f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80083f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083f8:	460b      	mov	r3, r1
 80083fa:	4313      	orrs	r3, r2
 80083fc:	d038      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800840a:	d018      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800840c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008410:	d811      	bhi.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008416:	d014      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841c:	d80b      	bhi.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d011      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008426:	d106      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008428:	4bc3      	ldr	r3, [pc, #780]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800842a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842c:	4ac2      	ldr	r2, [pc, #776]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800842e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008434:	e008      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800843c:	e004      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800843e:	bf00      	nop
 8008440:	e002      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008442:	bf00      	nop
 8008444:	e000      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10b      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008450:	4bb9      	ldr	r3, [pc, #740]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008454:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008460:	4ab5      	ldr	r2, [pc, #724]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008462:	430b      	orrs	r3, r1
 8008464:	6553      	str	r3, [r2, #84]	@ 0x54
 8008466:	e003      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800847c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800847e:	2300      	movs	r3, #0
 8008480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008482:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008486:	460b      	mov	r3, r1
 8008488:	4313      	orrs	r3, r2
 800848a:	d009      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800848c:	4baa      	ldr	r3, [pc, #680]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800848e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008490:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800849a:	4aa7      	ldr	r2, [pc, #668]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800849c:	430b      	orrs	r3, r1
 800849e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80084ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ae:	2300      	movs	r3, #0
 80084b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80084b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80084b6:	460b      	mov	r3, r1
 80084b8:	4313      	orrs	r3, r2
 80084ba:	d00a      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084bc:	4b9e      	ldr	r3, [pc, #632]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084cc:	4a9a      	ldr	r2, [pc, #616]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ce:	430b      	orrs	r3, r1
 80084d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e0:	2300      	movs	r3, #0
 80084e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80084e8:	460b      	mov	r3, r1
 80084ea:	4313      	orrs	r3, r2
 80084ec:	d009      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ee:	4b92      	ldr	r3, [pc, #584]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084fc:	4a8e      	ldr	r2, [pc, #568]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084fe:	430b      	orrs	r3, r1
 8008500:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800850e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008510:	2300      	movs	r3, #0
 8008512:	647b      	str	r3, [r7, #68]	@ 0x44
 8008514:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008518:	460b      	mov	r3, r1
 800851a:	4313      	orrs	r3, r2
 800851c:	d00e      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800851e:	4b86      	ldr	r3, [pc, #536]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	4a85      	ldr	r2, [pc, #532]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008524:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008528:	6113      	str	r3, [r2, #16]
 800852a:	4b83      	ldr	r3, [pc, #524]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800852c:	6919      	ldr	r1, [r3, #16]
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008536:	4a80      	ldr	r2, [pc, #512]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008538:	430b      	orrs	r3, r1
 800853a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008548:	63bb      	str	r3, [r7, #56]	@ 0x38
 800854a:	2300      	movs	r3, #0
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008552:	460b      	mov	r3, r1
 8008554:	4313      	orrs	r3, r2
 8008556:	d009      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008558:	4b77      	ldr	r3, [pc, #476]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800855a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008566:	4a74      	ldr	r2, [pc, #464]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008568:	430b      	orrs	r3, r1
 800856a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008578:	633b      	str	r3, [r7, #48]	@ 0x30
 800857a:	2300      	movs	r3, #0
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
 800857e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008582:	460b      	mov	r3, r1
 8008584:	4313      	orrs	r3, r2
 8008586:	d00a      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008588:	4b6b      	ldr	r3, [pc, #428]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800858a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008598:	4a67      	ldr	r2, [pc, #412]	@ (8008738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859a:	430b      	orrs	r3, r1
 800859c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	2100      	movs	r1, #0
 80085a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80085b4:	460b      	mov	r3, r1
 80085b6:	4313      	orrs	r3, r2
 80085b8:	d011      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085be:	3308      	adds	r3, #8
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fa4a 	bl	8009a5c <RCCEx_PLL2_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	2100      	movs	r1, #0
 80085e8:	6239      	str	r1, [r7, #32]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085f4:	460b      	mov	r3, r1
 80085f6:	4313      	orrs	r3, r2
 80085f8:	d011      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fe:	3308      	adds	r3, #8
 8008600:	2101      	movs	r1, #1
 8008602:	4618      	mov	r0, r3
 8008604:	f001 fa2a 	bl	8009a5c <RCCEx_PLL2_Config>
 8008608:	4603      	mov	r3, r0
 800860a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800860e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	2100      	movs	r1, #0
 8008628:	61b9      	str	r1, [r7, #24]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008634:	460b      	mov	r3, r1
 8008636:	4313      	orrs	r3, r2
 8008638:	d011      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	3308      	adds	r3, #8
 8008640:	2102      	movs	r1, #2
 8008642:	4618      	mov	r0, r3
 8008644:	f001 fa0a 	bl	8009a5c <RCCEx_PLL2_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800864e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	2100      	movs	r1, #0
 8008668:	6139      	str	r1, [r7, #16]
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008674:	460b      	mov	r3, r1
 8008676:	4313      	orrs	r3, r2
 8008678:	d011      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867e:	3328      	adds	r3, #40	@ 0x28
 8008680:	2100      	movs	r1, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fa9c 	bl	8009bc0 <RCCEx_PLL3_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800868e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800869a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	2100      	movs	r1, #0
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086b4:	460b      	mov	r3, r1
 80086b6:	4313      	orrs	r3, r2
 80086b8:	d011      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	3328      	adds	r3, #40	@ 0x28
 80086c0:	2101      	movs	r1, #1
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 fa7c 	bl	8009bc0 <RCCEx_PLL3_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	2100      	movs	r1, #0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	f003 0320 	and.w	r3, r3, #32
 80086ee:	607b      	str	r3, [r7, #4]
 80086f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086f4:	460b      	mov	r3, r1
 80086f6:	4313      	orrs	r3, r2
 80086f8:	d011      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fe:	3328      	adds	r3, #40	@ 0x28
 8008700:	2102      	movs	r1, #2
 8008702:	4618      	mov	r0, r3
 8008704:	f001 fa5c 	bl	8009bc0 <RCCEx_PLL3_Config>
 8008708:	4603      	mov	r3, r0
 800870a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800870e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800871a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800871e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	e000      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
}
 800872c:	4618      	mov	r0, r3
 800872e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008732:	46bd      	mov	sp, r7
 8008734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008738:	58024400 	.word	0x58024400

0800873c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b090      	sub	sp, #64	@ 0x40
 8008740:	af00      	add	r7, sp, #0
 8008742:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800874e:	430b      	orrs	r3, r1
 8008750:	f040 8094 	bne.w	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008754:	4b9e      	ldr	r3, [pc, #632]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	2b04      	cmp	r3, #4
 8008762:	f200 8087 	bhi.w	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008766:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008781 	.word	0x08008781
 8008770:	080087a9 	.word	0x080087a9
 8008774:	080087d1 	.word	0x080087d1
 8008778:	0800886d 	.word	0x0800886d
 800877c:	080087f9 	.word	0x080087f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008780:	4b93      	ldr	r3, [pc, #588]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008788:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800878c:	d108      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800878e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008792:	4618      	mov	r0, r3
 8008794:	f001 f810 	bl	80097b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800879c:	f000 bd45 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a4:	f000 bd41 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087a8:	4b89      	ldr	r3, [pc, #548]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b4:	d108      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b6:	f107 0318 	add.w	r3, r7, #24
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fd54 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c4:	f000 bd31 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087cc:	f000 bd2d 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d0:	4b7f      	ldr	r3, [pc, #508]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087dc:	d108      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087de:	f107 030c 	add.w	r3, r7, #12
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fe94 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ec:	f000 bd1d 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f4:	f000 bd19 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087f8:	4b75      	ldr	r3, [pc, #468]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008800:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008802:	4b73      	ldr	r3, [pc, #460]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b04      	cmp	r3, #4
 800880c:	d10c      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800880e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008810:	2b00      	cmp	r3, #0
 8008812:	d109      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008814:	4b6e      	ldr	r3, [pc, #440]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	08db      	lsrs	r3, r3, #3
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	4a6d      	ldr	r2, [pc, #436]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008826:	e01f      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008828:	4b69      	ldr	r3, [pc, #420]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008834:	d106      	bne.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800883c:	d102      	bne.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800883e:	4b66      	ldr	r3, [pc, #408]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008842:	e011      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008844:	4b62      	ldr	r3, [pc, #392]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008850:	d106      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008858:	d102      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800885a:	4b60      	ldr	r3, [pc, #384]	@ (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885e:	e003      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008864:	f000 bce1 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008868:	f000 bcdf 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800886c:	4b5c      	ldr	r3, [pc, #368]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008870:	f000 bcdb 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008878:	f000 bcd7 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800887c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008880:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008884:	430b      	orrs	r3, r1
 8008886:	f040 80ad 	bne.w	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800888a:	4b51      	ldr	r3, [pc, #324]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800888c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008892:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800889a:	d056      	beq.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088a2:	f200 8090 	bhi.w	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80088aa:	f000 8088 	beq.w	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80088b2:	f200 8088 	bhi.w	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	2b80      	cmp	r3, #128	@ 0x80
 80088ba:	d032      	beq.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	2b80      	cmp	r3, #128	@ 0x80
 80088c0:	f200 8081 	bhi.w	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	2b40      	cmp	r3, #64	@ 0x40
 80088ce:	d014      	beq.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088d0:	e079      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088d2:	4b3f      	ldr	r3, [pc, #252]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088de:	d108      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 ff67 	bl	80097b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ee:	f000 bc9c 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f6:	f000 bc98 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088fa:	4b35      	ldr	r3, [pc, #212]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008902:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008906:	d108      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008908:	f107 0318 	add.w	r3, r7, #24
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fcab 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008916:	f000 bc88 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891e:	f000 bc84 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008922:	4b2b      	ldr	r3, [pc, #172]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800892a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800892e:	d108      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008930:	f107 030c 	add.w	r3, r7, #12
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fdeb 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893e:	f000 bc74 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008946:	f000 bc70 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800894a:	4b21      	ldr	r3, [pc, #132]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800894c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800894e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008952:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008954:	4b1e      	ldr	r3, [pc, #120]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b04      	cmp	r3, #4
 800895e:	d10c      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008966:	4b1a      	ldr	r3, [pc, #104]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	08db      	lsrs	r3, r3, #3
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	4a18      	ldr	r2, [pc, #96]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008972:	fa22 f303 	lsr.w	r3, r2, r3
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008978:	e01f      	b.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800897a:	4b15      	ldr	r3, [pc, #84]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008986:	d106      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800898e:	d102      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008990:	4b11      	ldr	r3, [pc, #68]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008994:	e011      	b.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008996:	4b0e      	ldr	r3, [pc, #56]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800899e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089a2:	d106      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80089a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089aa:	d102      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089ac:	4b0b      	ldr	r3, [pc, #44]	@ (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b0:	e003      	b.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089b6:	f000 bc38 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089ba:	f000 bc36 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089be:	4b08      	ldr	r3, [pc, #32]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c2:	f000 bc32 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ca:	f000 bc2e 	b.w	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089ce:	bf00      	nop
 80089d0:	58024400 	.word	0x58024400
 80089d4:	03d09000 	.word	0x03d09000
 80089d8:	003d0900 	.word	0x003d0900
 80089dc:	017d7840 	.word	0x017d7840
 80089e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80089ec:	430b      	orrs	r3, r1
 80089ee:	f040 809c 	bne.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089f2:	4b9e      	ldr	r3, [pc, #632]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80089fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a02:	d054      	beq.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a0a:	f200 808b 	bhi.w	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a14:	f000 8083 	beq.w	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a1e:	f200 8081 	bhi.w	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a28:	d02f      	beq.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a30:	d878      	bhi.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d004      	beq.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a3e:	d012      	beq.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a40:	e070      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a42:	4b8a      	ldr	r3, [pc, #552]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a4e:	d107      	bne.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 feaf 	bl	80097b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5e:	e3e4      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a64:	e3e1      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a66:	4b81      	ldr	r3, [pc, #516]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a72:	d107      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a74:	f107 0318 	add.w	r3, r7, #24
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fbf5 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a82:	e3d2      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a88:	e3cf      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a8a:	4b78      	ldr	r3, [pc, #480]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a96:	d107      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a98:	f107 030c 	add.w	r3, r7, #12
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fd37 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa6:	e3c0      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aac:	e3bd      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aae:	4b6f      	ldr	r3, [pc, #444]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d10c      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d109      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aca:	4b68      	ldr	r3, [pc, #416]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	08db      	lsrs	r3, r3, #3
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	4a66      	ldr	r2, [pc, #408]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008adc:	e01e      	b.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ade:	4b63      	ldr	r3, [pc, #396]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aea:	d106      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008af2:	d102      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008af4:	4b5f      	ldr	r3, [pc, #380]	@ (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af8:	e010      	b.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008afa:	4b5c      	ldr	r3, [pc, #368]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b06:	d106      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b0e:	d102      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b10:	4b59      	ldr	r3, [pc, #356]	@ (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b14:	e002      	b.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b1a:	e386      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b1c:	e385      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b1e:	4b57      	ldr	r3, [pc, #348]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b22:	e382      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b28:	e37f      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008b32:	430b      	orrs	r3, r1
 8008b34:	f040 80a7 	bne.w	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b38:	4b4c      	ldr	r3, [pc, #304]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b3c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b48:	d055      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b50:	f200 8096 	bhi.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b5a:	f000 8084 	beq.w	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b64:	f200 808c 	bhi.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b6e:	d030      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b76:	f200 8083 	bhi.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b86:	d012      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008b88:	e07a      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b8a:	4b38      	ldr	r3, [pc, #224]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b96:	d107      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fe0b 	bl	80097b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba6:	e340      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bac:	e33d      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bae:	4b2f      	ldr	r3, [pc, #188]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bba:	d107      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bbc:	f107 0318 	add.w	r3, r7, #24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fb51 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bca:	e32e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd0:	e32b      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd2:	4b26      	ldr	r3, [pc, #152]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fc93 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bee:	e31c      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e319      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bfe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c00:	4b1a      	ldr	r3, [pc, #104]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d10c      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c12:	4b16      	ldr	r3, [pc, #88]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	08db      	lsrs	r3, r3, #3
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	4a14      	ldr	r2, [pc, #80]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c24:	e01e      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c26:	4b11      	ldr	r3, [pc, #68]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c32:	d106      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c3a:	d102      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c40:	e010      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c42:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c56:	d102      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c5c:	e002      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c62:	e2e2      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c64:	e2e1      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c66:	4b05      	ldr	r3, [pc, #20]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c6a:	e2de      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c6c:	58024400 	.word	0x58024400
 8008c70:	03d09000 	.word	0x03d09000
 8008c74:	003d0900 	.word	0x003d0900
 8008c78:	017d7840 	.word	0x017d7840
 8008c7c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c84:	e2d1      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c8a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	f040 809c 	bne.w	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c94:	4b93      	ldr	r3, [pc, #588]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008c9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ca4:	d054      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cac:	f200 808b 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cb6:	f000 8083 	beq.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cc0:	f200 8081 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cca:	d02f      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd2:	d878      	bhi.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d004      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce0:	d012      	beq.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008ce2:	e070      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ce4:	4b7f      	ldr	r3, [pc, #508]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cf0:	d107      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fd5e 	bl	80097b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d00:	e293      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d06:	e290      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d08:	4b76      	ldr	r3, [pc, #472]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d14:	d107      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d16:	f107 0318 	add.w	r3, r7, #24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 faa4 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d24:	e281      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d2a:	e27e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d2c:	4b6d      	ldr	r3, [pc, #436]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d38:	d107      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3a:	f107 030c 	add.w	r3, r7, #12
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fbe6 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d48:	e26f      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4e:	e26c      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d50:	4b64      	ldr	r3, [pc, #400]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d5a:	4b62      	ldr	r3, [pc, #392]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d10c      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d6c:	4b5d      	ldr	r3, [pc, #372]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	08db      	lsrs	r3, r3, #3
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	4a5c      	ldr	r2, [pc, #368]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d7e:	e01e      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d80:	4b58      	ldr	r3, [pc, #352]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d8c:	d106      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d94:	d102      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d96:	4b55      	ldr	r3, [pc, #340]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d9a:	e010      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d9c:	4b51      	ldr	r3, [pc, #324]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da8:	d106      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008db0:	d102      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008db2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db6:	e002      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008dbc:	e235      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dbe:	e234      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc4:	e231      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dca:	e22e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	f040 808f 	bne.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008dda:	4b42      	ldr	r3, [pc, #264]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dde:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008de2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008dea:	d06b      	beq.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008df2:	d874      	bhi.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008dfa:	d056      	beq.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e02:	d86c      	bhi.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e0a:	d03b      	beq.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e12:	d864      	bhi.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e1a:	d021      	beq.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e22:	d85c      	bhi.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d004      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e30:	d004      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008e32:	e054      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e34:	f7fe fa4c 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 8008e38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e3a:	e1f6      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e3c:	4b29      	ldr	r3, [pc, #164]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e48:	d107      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e4a:	f107 0318 	add.w	r3, r7, #24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fa0a 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e58:	e1e7      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5e:	e1e4      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e60:	4b20      	ldr	r3, [pc, #128]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e6c:	d107      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e6e:	f107 030c 	add.w	r3, r7, #12
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fb4c 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e7c:	e1d5      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e82:	e1d2      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e84:	4b17      	ldr	r3, [pc, #92]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d109      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e90:	4b14      	ldr	r3, [pc, #80]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	08db      	lsrs	r3, r3, #3
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea2:	e1c2      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea8:	e1bf      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb6:	d102      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ebc:	e1b5      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec2:	e1b2      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ec4:	4b07      	ldr	r3, [pc, #28]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ed0:	d102      	bne.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008ed2:	4b07      	ldr	r3, [pc, #28]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed6:	e1a8      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008edc:	e1a5      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee2:	e1a2      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ee4:	58024400 	.word	0x58024400
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	003d0900 	.word	0x003d0900
 8008ef0:	017d7840 	.word	0x017d7840
 8008ef4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008efc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008f00:	430b      	orrs	r3, r1
 8008f02:	d173      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f04:	4b9c      	ldr	r3, [pc, #624]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f14:	d02f      	beq.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f1c:	d863      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d004      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f2a:	d012      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008f2c:	e05b      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f2e:	4b92      	ldr	r3, [pc, #584]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f3a:	d107      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3c:	f107 0318 	add.w	r3, r7, #24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 f991 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f4a:	e16e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f50:	e16b      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f52:	4b89      	ldr	r3, [pc, #548]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f5e:	d107      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f60:	f107 030c 	add.w	r3, r7, #12
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fad3 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f6e:	e15c      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f74:	e159      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f76:	4b80      	ldr	r3, [pc, #512]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f80:	4b7d      	ldr	r3, [pc, #500]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	d10c      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f92:	4b79      	ldr	r3, [pc, #484]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	08db      	lsrs	r3, r3, #3
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	4a77      	ldr	r2, [pc, #476]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fa4:	e01e      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fa6:	4b74      	ldr	r3, [pc, #464]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fb2:	d106      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fba:	d102      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fbc:	4b70      	ldr	r3, [pc, #448]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fc0:	e010      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fdc:	e002      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008fe2:	e122      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fe4:	e121      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fea:	e11e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	d133      	bne.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ff8:	4b5f      	ldr	r3, [pc, #380]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009000:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800900e:	d012      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009010:	e023      	b.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009012:	4b59      	ldr	r3, [pc, #356]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800901a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800901e:	d107      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fbc7 	bl	80097b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800902a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800902e:	e0fc      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009034:	e0f9      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009036:	4b50      	ldr	r3, [pc, #320]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800903e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009042:	d107      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009044:	f107 0318 	add.w	r3, r7, #24
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f90d 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009052:	e0ea      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009058:	e0e7      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800905e:	e0e4      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009064:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009068:	430b      	orrs	r3, r1
 800906a:	f040 808d 	bne.w	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800906e:	4b42      	ldr	r3, [pc, #264]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009072:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009076:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800907e:	d06b      	beq.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009086:	d874      	bhi.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800908e:	d056      	beq.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009096:	d86c      	bhi.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800909e:	d03b      	beq.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090a6:	d864      	bhi.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ae:	d021      	beq.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090b6:	d85c      	bhi.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d004      	beq.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090c4:	d004      	beq.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80090c6:	e054      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090c8:	f000 f8b8 	bl	800923c <HAL_RCCEx_GetD3PCLK1Freq>
 80090cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090ce:	e0ac      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090d0:	4b29      	ldr	r3, [pc, #164]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090dc:	d107      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090de:	f107 0318 	add.w	r3, r7, #24
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f8c0 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090ec:	e09d      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f2:	e09a      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090f4:	4b20      	ldr	r3, [pc, #128]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009100:	d107      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009102:	f107 030c 	add.w	r3, r7, #12
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fa02 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009110:	e08b      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009116:	e088      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009118:	4b17      	ldr	r3, [pc, #92]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b04      	cmp	r3, #4
 8009122:	d109      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009124:	4b14      	ldr	r3, [pc, #80]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	08db      	lsrs	r3, r3, #3
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	4a13      	ldr	r2, [pc, #76]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
 8009134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009136:	e078      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800913c:	e075      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800913e:	4b0e      	ldr	r3, [pc, #56]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800914a:	d102      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800914c:	4b0c      	ldr	r3, [pc, #48]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009150:	e06b      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009156:	e068      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009158:	4b07      	ldr	r3, [pc, #28]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009164:	d102      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009166:	4b07      	ldr	r3, [pc, #28]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800916a:	e05e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009170:	e05b      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009176:	e058      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009178:	58024400 	.word	0x58024400
 800917c:	03d09000 	.word	0x03d09000
 8009180:	003d0900 	.word	0x003d0900
 8009184:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800918c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009190:	430b      	orrs	r3, r1
 8009192:	d148      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009194:	4b27      	ldr	r3, [pc, #156]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009198:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800919c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800919e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a4:	d02a      	beq.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80091a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ac:	d838      	bhi.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ba:	d00d      	beq.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80091bc:	e030      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091be:	4b1d      	ldr	r3, [pc, #116]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ca:	d102      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80091cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d0:	e02b      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d6:	e028      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d8:	4b16      	ldr	r3, [pc, #88]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091e4:	d107      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fae4 	bl	80097b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f4:	e019      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091fa:	e016      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009204:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009208:	d107      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800920a:	f107 0318 	add.w	r3, r7, #24
 800920e:	4618      	mov	r0, r3
 8009210:	f000 f82a 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009218:	e007      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921e:	e004      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009224:	e001      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800922a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800922c:	4618      	mov	r0, r3
 800922e:	3740      	adds	r7, #64	@ 0x40
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	58024400 	.word	0x58024400
 8009238:	017d7840 	.word	0x017d7840

0800923c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009240:	f7fe f816 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8009244:	4602      	mov	r2, r0
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	091b      	lsrs	r3, r3, #4
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	4904      	ldr	r1, [pc, #16]	@ (8009264 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009252:	5ccb      	ldrb	r3, [r1, r3]
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800925c:	4618      	mov	r0, r3
 800925e:	bd80      	pop	{r7, pc}
 8009260:	58024400 	.word	0x58024400
 8009264:	0800bfc0 	.word	0x0800bfc0

08009268 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009268:	b480      	push	{r7}
 800926a:	b089      	sub	sp, #36	@ 0x24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009270:	4ba1      	ldr	r3, [pc, #644]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800927a:	4b9f      	ldr	r3, [pc, #636]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927e:	0b1b      	lsrs	r3, r3, #12
 8009280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009284:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009286:	4b9c      	ldr	r3, [pc, #624]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928a:	091b      	lsrs	r3, r3, #4
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009292:	4b99      	ldr	r3, [pc, #612]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	fb02 f303 	mul.w	r3, r2, r3
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 8111 	beq.w	80094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	f000 8083 	beq.w	80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	f200 80a1 	bhi.w	8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d056      	beq.n	8009380 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092d2:	e099      	b.n	8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092d4:	4b88      	ldr	r3, [pc, #544]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d02d      	beq.n	800933c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e0:	4b85      	ldr	r3, [pc, #532]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	08db      	lsrs	r3, r3, #3
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	4a84      	ldr	r2, [pc, #528]	@ (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092ec:	fa22 f303 	lsr.w	r3, r2, r3
 80092f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930a:	4b7b      	ldr	r3, [pc, #492]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800930c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931a:	ed97 6a03 	vldr	s12, [r7, #12]
 800931e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800932e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009336:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800933a:	e087      	b.n	800944c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800934a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800934e:	4b6a      	ldr	r3, [pc, #424]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800935e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009362:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800936e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800937e:	e065      	b.n	800944c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800938e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009392:	4b59      	ldr	r3, [pc, #356]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c2:	e043      	b.n	800944c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d6:	4b48      	ldr	r3, [pc, #288]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009406:	e021      	b.n	800944c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009412:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941a:	4b37      	ldr	r3, [pc, #220]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942a:	ed97 6a03 	vldr	s12, [r7, #12]
 800942e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800943e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800944a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800944c:	4b2a      	ldr	r3, [pc, #168]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800944e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009450:	0a5b      	lsrs	r3, r3, #9
 8009452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009466:	edd7 6a07 	vldr	s13, [r7, #28]
 800946a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800946e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009472:	ee17 2a90 	vmov	r2, s15
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800947a:	4b1f      	ldr	r3, [pc, #124]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800947c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009484:	ee07 3a90 	vmov	s15, r3
 8009488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009494:	edd7 6a07 	vldr	s13, [r7, #28]
 8009498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800949c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a0:	ee17 2a90 	vmov	r2, s15
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094a8:	4b13      	ldr	r3, [pc, #76]	@ (80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ac:	0e1b      	lsrs	r3, r3, #24
 80094ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ce:	ee17 2a90 	vmov	r2, s15
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094d6:	e008      	b.n	80094ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	609a      	str	r2, [r3, #8]
}
 80094ea:	bf00      	nop
 80094ec:	3724      	adds	r7, #36	@ 0x24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	58024400 	.word	0x58024400
 80094fc:	03d09000 	.word	0x03d09000
 8009500:	46000000 	.word	0x46000000
 8009504:	4c742400 	.word	0x4c742400
 8009508:	4a742400 	.word	0x4a742400
 800950c:	4bbebc20 	.word	0x4bbebc20

08009510 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009510:	b480      	push	{r7}
 8009512:	b089      	sub	sp, #36	@ 0x24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009518:	4ba1      	ldr	r3, [pc, #644]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	f003 0303 	and.w	r3, r3, #3
 8009520:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009522:	4b9f      	ldr	r3, [pc, #636]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009526:	0d1b      	lsrs	r3, r3, #20
 8009528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800952c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800952e:	4b9c      	ldr	r3, [pc, #624]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800953a:	4b99      	ldr	r3, [pc, #612]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800953e:	08db      	lsrs	r3, r3, #3
 8009540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	fb02 f303 	mul.w	r3, r2, r3
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8111 	beq.w	8009780 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b02      	cmp	r3, #2
 8009562:	f000 8083 	beq.w	800966c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b02      	cmp	r3, #2
 800956a:	f200 80a1 	bhi.w	80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d056      	beq.n	8009628 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800957a:	e099      	b.n	80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800957c:	4b88      	ldr	r3, [pc, #544]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d02d      	beq.n	80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009588:	4b85      	ldr	r3, [pc, #532]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	08db      	lsrs	r3, r3, #3
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	4a84      	ldr	r2, [pc, #528]	@ (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
 8009598:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b2:	4b7b      	ldr	r3, [pc, #492]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095e2:	e087      	b.n	80096f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f6:	4b6a      	ldr	r3, [pc, #424]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009606:	ed97 6a03 	vldr	s12, [r7, #12]
 800960a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800960e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800961a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800961e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009626:	e065      	b.n	80096f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009632:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963a:	4b59      	ldr	r3, [pc, #356]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	ed97 6a03 	vldr	s12, [r7, #12]
 800964e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800965e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966a:	e043      	b.n	80096f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009676:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800967a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967e:	4b48      	ldr	r3, [pc, #288]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009692:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ae:	e021      	b.n	80096f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c2:	4b37      	ldr	r3, [pc, #220]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096f4:	4b2a      	ldr	r3, [pc, #168]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f8:	0a5b      	lsrs	r3, r3, #9
 80096fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800970a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800970e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971a:	ee17 2a90 	vmov	r2, s15
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009722:	4b1f      	ldr	r3, [pc, #124]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009726:	0c1b      	lsrs	r3, r3, #16
 8009728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800973c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009748:	ee17 2a90 	vmov	r2, s15
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009750:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009754:	0e1b      	lsrs	r3, r3, #24
 8009756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800976a:	edd7 6a07 	vldr	s13, [r7, #28]
 800976e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009776:	ee17 2a90 	vmov	r2, s15
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800977e:	e008      	b.n	8009792 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	609a      	str	r2, [r3, #8]
}
 8009792:	bf00      	nop
 8009794:	3724      	adds	r7, #36	@ 0x24
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	58024400 	.word	0x58024400
 80097a4:	03d09000 	.word	0x03d09000
 80097a8:	46000000 	.word	0x46000000
 80097ac:	4c742400 	.word	0x4c742400
 80097b0:	4a742400 	.word	0x4a742400
 80097b4:	4bbebc20 	.word	0x4bbebc20

080097b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b089      	sub	sp, #36	@ 0x24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c0:	4ba0      	ldr	r3, [pc, #640]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	f003 0303 	and.w	r3, r3, #3
 80097c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097ca:	4b9e      	ldr	r3, [pc, #632]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ce:	091b      	lsrs	r3, r3, #4
 80097d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097d6:	4b9b      	ldr	r3, [pc, #620]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097e0:	4b98      	ldr	r3, [pc, #608]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e4:	08db      	lsrs	r3, r3, #3
 80097e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	fb02 f303 	mul.w	r3, r2, r3
 80097f0:	ee07 3a90 	vmov	s15, r3
 80097f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 8111 	beq.w	8009a26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	2b02      	cmp	r3, #2
 8009808:	f000 8083 	beq.w	8009912 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2b02      	cmp	r3, #2
 8009810:	f200 80a1 	bhi.w	8009956 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d056      	beq.n	80098ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009820:	e099      	b.n	8009956 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009822:	4b88      	ldr	r3, [pc, #544]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d02d      	beq.n	800988a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800982e:	4b85      	ldr	r3, [pc, #532]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	08db      	lsrs	r3, r3, #3
 8009834:	f003 0303 	and.w	r3, r3, #3
 8009838:	4a83      	ldr	r2, [pc, #524]	@ (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800983a:	fa22 f303 	lsr.w	r3, r2, r3
 800983e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009858:	4b7a      	ldr	r3, [pc, #488]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800985c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009860:	ee07 3a90 	vmov	s15, r3
 8009864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009868:	ed97 6a03 	vldr	s12, [r7, #12]
 800986c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009878:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800987c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009884:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009888:	e087      	b.n	800999a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009894:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989c:	4b69      	ldr	r3, [pc, #420]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800989e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a4:	ee07 3a90 	vmov	s15, r3
 80098a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098cc:	e065      	b.n	800999a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	ee07 3a90 	vmov	s15, r3
 80098d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009a54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e0:	4b58      	ldr	r3, [pc, #352]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009910:	e043      	b.n	800999a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	ee07 3a90 	vmov	s15, r3
 8009918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009924:	4b47      	ldr	r3, [pc, #284]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992c:	ee07 3a90 	vmov	s15, r3
 8009930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009934:	ed97 6a03 	vldr	s12, [r7, #12]
 8009938:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800993c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009950:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009954:	e021      	b.n	800999a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	ee07 3a90 	vmov	s15, r3
 800995c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009960:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009968:	4b36      	ldr	r3, [pc, #216]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009970:	ee07 3a90 	vmov	s15, r3
 8009974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009978:	ed97 6a03 	vldr	s12, [r7, #12]
 800997c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009988:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009994:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009998:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800999a:	4b2a      	ldr	r3, [pc, #168]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800999c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999e:	0a5b      	lsrs	r3, r3, #9
 80099a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099a4:	ee07 3a90 	vmov	s15, r3
 80099a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c0:	ee17 2a90 	vmov	r2, s15
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099cc:	0c1b      	lsrs	r3, r3, #16
 80099ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ee:	ee17 2a90 	vmov	r2, s15
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80099f6:	4b13      	ldr	r3, [pc, #76]	@ (8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fa:	0e1b      	lsrs	r3, r3, #24
 80099fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a1c:	ee17 2a90 	vmov	r2, s15
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a24:	e008      	b.n	8009a38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	609a      	str	r2, [r3, #8]
}
 8009a38:	bf00      	nop
 8009a3a:	3724      	adds	r7, #36	@ 0x24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	58024400 	.word	0x58024400
 8009a48:	03d09000 	.word	0x03d09000
 8009a4c:	46000000 	.word	0x46000000
 8009a50:	4c742400 	.word	0x4c742400
 8009a54:	4a742400 	.word	0x4a742400
 8009a58:	4bbebc20 	.word	0x4bbebc20

08009a5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a6a:	4b53      	ldr	r3, [pc, #332]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d101      	bne.n	8009a7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e099      	b.n	8009bae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009a80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a86:	f7f9 f883 	bl	8002b90 <HAL_GetTick>
 8009a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a8c:	e008      	b.n	8009aa0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a8e:	f7f9 f87f 	bl	8002b90 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e086      	b.n	8009bae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009aa0:	4b45      	ldr	r3, [pc, #276]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f0      	bne.n	8009a8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009aac:	4b42      	ldr	r3, [pc, #264]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	031b      	lsls	r3, r3, #12
 8009aba:	493f      	ldr	r1, [pc, #252]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	025b      	lsls	r3, r3, #9
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	041b      	lsls	r3, r3, #16
 8009ade:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	061b      	lsls	r3, r3, #24
 8009aec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009af0:	4931      	ldr	r1, [pc, #196]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009af6:	4b30      	ldr	r3, [pc, #192]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	492d      	ldr	r1, [pc, #180]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b08:	4b2b      	ldr	r3, [pc, #172]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0c:	f023 0220 	bic.w	r2, r3, #32
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	4928      	ldr	r1, [pc, #160]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b1a:	4b27      	ldr	r3, [pc, #156]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1e:	4a26      	ldr	r2, [pc, #152]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b20:	f023 0310 	bic.w	r3, r3, #16
 8009b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b26:	4b24      	ldr	r3, [pc, #144]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b2a:	4b24      	ldr	r3, [pc, #144]	@ (8009bbc <RCCEx_PLL2_Config+0x160>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	69d2      	ldr	r2, [r2, #28]
 8009b32:	00d2      	lsls	r2, r2, #3
 8009b34:	4920      	ldr	r1, [pc, #128]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b40:	f043 0310 	orr.w	r3, r3, #16
 8009b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b50:	4a19      	ldr	r2, [pc, #100]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b58:	e00f      	b.n	8009b7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d106      	bne.n	8009b6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b60:	4b15      	ldr	r3, [pc, #84]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b64:	4a14      	ldr	r2, [pc, #80]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b6c:	e005      	b.n	8009b7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b6e:	4b12      	ldr	r3, [pc, #72]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b72:	4a11      	ldr	r2, [pc, #68]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009b80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b86:	f7f9 f803 	bl	8002b90 <HAL_GetTick>
 8009b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b8c:	e008      	b.n	8009ba0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b8e:	f7f8 ffff 	bl	8002b90 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d901      	bls.n	8009ba0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e006      	b.n	8009bae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ba0:	4b05      	ldr	r3, [pc, #20]	@ (8009bb8 <RCCEx_PLL2_Config+0x15c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d0f0      	beq.n	8009b8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	58024400 	.word	0x58024400
 8009bbc:	ffff0007 	.word	0xffff0007

08009bc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bce:	4b53      	ldr	r3, [pc, #332]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d101      	bne.n	8009bde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e099      	b.n	8009d12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bde:	4b4f      	ldr	r3, [pc, #316]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a4e      	ldr	r2, [pc, #312]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bea:	f7f8 ffd1 	bl	8002b90 <HAL_GetTick>
 8009bee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bf0:	e008      	b.n	8009c04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bf2:	f7f8 ffcd 	bl	8002b90 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e086      	b.n	8009d12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c04:	4b45      	ldr	r3, [pc, #276]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1f0      	bne.n	8009bf2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c10:	4b42      	ldr	r3, [pc, #264]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	051b      	lsls	r3, r3, #20
 8009c1e:	493f      	ldr	r1, [pc, #252]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	025b      	lsls	r3, r3, #9
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	041b      	lsls	r3, r3, #16
 8009c42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c46:	431a      	orrs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	061b      	lsls	r3, r3, #24
 8009c50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c54:	4931      	ldr	r1, [pc, #196]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c5a:	4b30      	ldr	r3, [pc, #192]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	492d      	ldr	r1, [pc, #180]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	4928      	ldr	r1, [pc, #160]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c7e:	4b27      	ldr	r3, [pc, #156]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c82:	4a26      	ldr	r2, [pc, #152]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c8a:	4b24      	ldr	r3, [pc, #144]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c8e:	4b24      	ldr	r3, [pc, #144]	@ (8009d20 <RCCEx_PLL3_Config+0x160>)
 8009c90:	4013      	ands	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	69d2      	ldr	r2, [r2, #28]
 8009c96:	00d2      	lsls	r2, r2, #3
 8009c98:	4920      	ldr	r1, [pc, #128]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d106      	bne.n	8009cbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	4a19      	ldr	r2, [pc, #100]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009cb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009cba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cbc:	e00f      	b.n	8009cde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d106      	bne.n	8009cd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009cc4:	4b15      	ldr	r3, [pc, #84]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	4a14      	ldr	r2, [pc, #80]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009cca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009cce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cd0:	e005      	b.n	8009cde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cd2:	4b12      	ldr	r3, [pc, #72]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd6:	4a11      	ldr	r2, [pc, #68]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009cd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cde:	4b0f      	ldr	r3, [pc, #60]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cea:	f7f8 ff51 	bl	8002b90 <HAL_GetTick>
 8009cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cf0:	e008      	b.n	8009d04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cf2:	f7f8 ff4d 	bl	8002b90 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d901      	bls.n	8009d04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e006      	b.n	8009d12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d04:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <RCCEx_PLL3_Config+0x15c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0f0      	beq.n	8009cf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	ffff0007 	.word	0xffff0007

08009d24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d071      	beq.n	8009e1a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7f8 fb36 	bl	80023bc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f003 0310 	and.w	r3, r3, #16
 8009d62:	2b10      	cmp	r3, #16
 8009d64:	d050      	beq.n	8009e08 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	22ca      	movs	r2, #202	@ 0xca
 8009d6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2253      	movs	r2, #83	@ 0x53
 8009d74:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f87a 	bl	8009e70 <RTC_EnterInitMode>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d124      	bne.n	8009dd0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6899      	ldr	r1, [r3, #8]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	4b24      	ldr	r3, [pc, #144]	@ (8009e24 <HAL_RTC_Init+0x100>)
 8009d92:	400b      	ands	r3, r1
 8009d94:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6899      	ldr	r1, [r3, #8]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	431a      	orrs	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	431a      	orrs	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	0419      	lsls	r1, r3, #16
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f886 	bl	8009ed8 <RTC_ExitInitMode>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d113      	bne.n	8009dfe <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 0203 	bic.w	r2, r2, #3
 8009de4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69da      	ldr	r2, [r3, #28]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	22ff      	movs	r2, #255	@ 0xff
 8009e04:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e06:	e001      	b.n	8009e0c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d103      	bne.n	8009e1a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	ff8fffbf 	.word	0xff8fffbf

08009e28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a0d      	ldr	r2, [pc, #52]	@ (8009e6c <HAL_RTC_WaitForSynchro+0x44>)
 8009e36:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009e38:	f7f8 feaa 	bl	8002b90 <HAL_GetTick>
 8009e3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e3e:	e009      	b.n	8009e54 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e40:	f7f8 fea6 	bl	8002b90 <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e4e:	d901      	bls.n	8009e54 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e007      	b.n	8009e64 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0ee      	beq.n	8009e40 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	0003ff5f 	.word	0x0003ff5f

08009e70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d120      	bne.n	8009ecc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e94:	f7f8 fe7c 	bl	8002b90 <HAL_GetTick>
 8009e98:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e9a:	e00d      	b.n	8009eb8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e9c:	f7f8 fe78 	bl	8002b90 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009eaa:	d905      	bls.n	8009eb8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d102      	bne.n	8009ecc <RTC_EnterInitMode+0x5c>
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d1e7      	bne.n	8009e9c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f50 <RTC_ExitInitMode+0x78>)
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	4a19      	ldr	r2, [pc, #100]	@ (8009f50 <RTC_ExitInitMode+0x78>)
 8009eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eee:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009ef0:	4b17      	ldr	r3, [pc, #92]	@ (8009f50 <RTC_ExitInitMode+0x78>)
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 0320 	and.w	r3, r3, #32
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10c      	bne.n	8009f16 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff ff93 	bl	8009e28 <HAL_RTC_WaitForSynchro>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d01e      	beq.n	8009f46 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2203      	movs	r2, #3
 8009f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	73fb      	strb	r3, [r7, #15]
 8009f14:	e017      	b.n	8009f46 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f16:	4b0e      	ldr	r3, [pc, #56]	@ (8009f50 <RTC_ExitInitMode+0x78>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f50 <RTC_ExitInitMode+0x78>)
 8009f1c:	f023 0320 	bic.w	r3, r3, #32
 8009f20:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff ff80 	bl	8009e28 <HAL_RTC_WaitForSynchro>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2203      	movs	r2, #3
 8009f32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f3a:	4b05      	ldr	r3, [pc, #20]	@ (8009f50 <RTC_ExitInitMode+0x78>)
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	4a04      	ldr	r2, [pc, #16]	@ (8009f50 <RTC_ExitInitMode+0x78>)
 8009f40:	f043 0320 	orr.w	r3, r3, #32
 8009f44:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	58004000 	.word	0x58004000

08009f54 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08a      	sub	sp, #40	@ 0x28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e28e      	b.n	800a484 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009f66:	f7f8 fe43 	bl	8002bf0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d113      	bne.n	8009f9c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a96      	ldr	r2, [pc, #600]	@ (800a1d4 <HAL_SAI_Init+0x280>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d004      	beq.n	8009f88 <HAL_SAI_Init+0x34>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a95      	ldr	r2, [pc, #596]	@ (800a1d8 <HAL_SAI_Init+0x284>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d107      	bne.n	8009f98 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d103      	bne.n	8009f98 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e273      	b.n	800a484 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a8c      	ldr	r2, [pc, #560]	@ (800a1d4 <HAL_SAI_Init+0x280>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d004      	beq.n	8009fb0 <HAL_SAI_Init+0x5c>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a8c      	ldr	r2, [pc, #560]	@ (800a1dc <HAL_SAI_Init+0x288>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d102      	bne.n	8009fb6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009fb0:	4b8b      	ldr	r3, [pc, #556]	@ (800a1e0 <HAL_SAI_Init+0x28c>)
 8009fb2:	61bb      	str	r3, [r7, #24]
 8009fb4:	e028      	b.n	800a008 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a8a      	ldr	r2, [pc, #552]	@ (800a1e4 <HAL_SAI_Init+0x290>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d004      	beq.n	8009fca <HAL_SAI_Init+0x76>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a88      	ldr	r2, [pc, #544]	@ (800a1e8 <HAL_SAI_Init+0x294>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d102      	bne.n	8009fd0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009fca:	4b88      	ldr	r3, [pc, #544]	@ (800a1ec <HAL_SAI_Init+0x298>)
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	e01b      	b.n	800a008 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a86      	ldr	r2, [pc, #536]	@ (800a1f0 <HAL_SAI_Init+0x29c>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <HAL_SAI_Init+0x90>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a85      	ldr	r2, [pc, #532]	@ (800a1f4 <HAL_SAI_Init+0x2a0>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d102      	bne.n	8009fea <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009fe4:	4b84      	ldr	r3, [pc, #528]	@ (800a1f8 <HAL_SAI_Init+0x2a4>)
 8009fe6:	61bb      	str	r3, [r7, #24]
 8009fe8:	e00e      	b.n	800a008 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a7a      	ldr	r2, [pc, #488]	@ (800a1d8 <HAL_SAI_Init+0x284>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d004      	beq.n	8009ffe <HAL_SAI_Init+0xaa>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a80      	ldr	r2, [pc, #512]	@ (800a1fc <HAL_SAI_Init+0x2a8>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d102      	bne.n	800a004 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009ffe:	4b80      	ldr	r3, [pc, #512]	@ (800a200 <HAL_SAI_Init+0x2ac>)
 800a000:	61bb      	str	r3, [r7, #24]
 800a002:	e001      	b.n	800a008 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e23d      	b.n	800a484 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7f8 fbab 	bl	8002778 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fa40 	bl	800a4a8 <SAI_Disable>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e228      	b.n	800a484 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2202      	movs	r2, #2
 800a036:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d00c      	beq.n	800a05c <HAL_SAI_Init+0x108>
 800a042:	2b02      	cmp	r3, #2
 800a044:	d80d      	bhi.n	800a062 <HAL_SAI_Init+0x10e>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <HAL_SAI_Init+0xfc>
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d003      	beq.n	800a056 <HAL_SAI_Init+0x102>
 800a04e:	e008      	b.n	800a062 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a054:	e008      	b.n	800a068 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a056:	2310      	movs	r3, #16
 800a058:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a05a:	e005      	b.n	800a068 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a05c:	2320      	movs	r3, #32
 800a05e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a060:	e002      	b.n	800a068 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a066:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	2b05      	cmp	r3, #5
 800a06e:	d832      	bhi.n	800a0d6 <HAL_SAI_Init+0x182>
 800a070:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <HAL_SAI_Init+0x124>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a091 	.word	0x0800a091
 800a07c:	0800a097 	.word	0x0800a097
 800a080:	0800a09f 	.word	0x0800a09f
 800a084:	0800a0a7 	.word	0x0800a0a7
 800a088:	0800a0b7 	.word	0x0800a0b7
 800a08c:	0800a0c7 	.word	0x0800a0c7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	61fb      	str	r3, [r7, #28]
      break;
 800a094:	e022      	b.n	800a0dc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a09a:	61fb      	str	r3, [r7, #28]
      break;
 800a09c:	e01e      	b.n	800a0dc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a09e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0a2:	61fb      	str	r3, [r7, #28]
      break;
 800a0a4:	e01a      	b.n	800a0dc <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a0a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0aa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a0b4:	e012      	b.n	800a0dc <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a0b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0ba:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	f043 0302 	orr.w	r3, r3, #2
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a0c4:	e00a      	b.n	800a0dc <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a0c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0ca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	f043 0303 	orr.w	r3, r3, #3
 800a0d2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a0d4:	e002      	b.n	800a0dc <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61fb      	str	r3, [r7, #28]
      break;
 800a0da:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 80c5 	beq.w	800a276 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a37      	ldr	r2, [pc, #220]	@ (800a1d4 <HAL_SAI_Init+0x280>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_SAI_Init+0x1b0>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a37      	ldr	r2, [pc, #220]	@ (800a1dc <HAL_SAI_Init+0x288>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d106      	bne.n	800a112 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a104:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a108:	f04f 0100 	mov.w	r1, #0
 800a10c:	f7fe fb16 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 800a110:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a33      	ldr	r2, [pc, #204]	@ (800a1e4 <HAL_SAI_Init+0x290>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d004      	beq.n	800a126 <HAL_SAI_Init+0x1d2>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a31      	ldr	r2, [pc, #196]	@ (800a1e8 <HAL_SAI_Init+0x294>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d106      	bne.n	800a134 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a126:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a12a:	f04f 0100 	mov.w	r1, #0
 800a12e:	f7fe fb05 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 800a132:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a2d      	ldr	r2, [pc, #180]	@ (800a1f0 <HAL_SAI_Init+0x29c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d004      	beq.n	800a148 <HAL_SAI_Init+0x1f4>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a2c      	ldr	r2, [pc, #176]	@ (800a1f4 <HAL_SAI_Init+0x2a0>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d106      	bne.n	800a156 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a148:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a14c:	f04f 0100 	mov.w	r1, #0
 800a150:	f7fe faf4 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 800a154:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a1f      	ldr	r2, [pc, #124]	@ (800a1d8 <HAL_SAI_Init+0x284>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d106      	bne.n	800a16e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a160:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a164:	f04f 0100 	mov.w	r1, #0
 800a168:	f7fe fae8 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 800a16c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a22      	ldr	r2, [pc, #136]	@ (800a1fc <HAL_SAI_Init+0x2a8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d106      	bne.n	800a186 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a178:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a17c:	f04f 0100 	mov.w	r1, #0
 800a180:	f7fe fadc 	bl	800873c <HAL_RCCEx_GetPeriphCLKFreq>
 800a184:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a18e:	d139      	bne.n	800a204 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a194:	2b04      	cmp	r3, #4
 800a196:	d102      	bne.n	800a19e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a198:	2340      	movs	r3, #64	@ 0x40
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	e00a      	b.n	800a1b4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1a2:	2b08      	cmp	r3, #8
 800a1a4:	d103      	bne.n	800a1ae <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a1a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	e002      	b.n	800a1b4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	4619      	mov	r1, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	e030      	b.n	800a234 <HAL_SAI_Init+0x2e0>
 800a1d2:	bf00      	nop
 800a1d4:	40015804 	.word	0x40015804
 800a1d8:	58005404 	.word	0x58005404
 800a1dc:	40015824 	.word	0x40015824
 800a1e0:	40015800 	.word	0x40015800
 800a1e4:	40015c04 	.word	0x40015c04
 800a1e8:	40015c24 	.word	0x40015c24
 800a1ec:	40015c00 	.word	0x40015c00
 800a1f0:	40016004 	.word	0x40016004
 800a1f4:	40016024 	.word	0x40016024
 800a1f8:	40016000 	.word	0x40016000
 800a1fc:	58005424 	.word	0x58005424
 800a200:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a20c:	d101      	bne.n	800a212 <HAL_SAI_Init+0x2be>
 800a20e:	2302      	movs	r3, #2
 800a210:	e000      	b.n	800a214 <HAL_SAI_Init+0x2c0>
 800a212:	2301      	movs	r3, #1
 800a214:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	4619      	mov	r1, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	fb02 f303 	mul.w	r3, r2, r3
 800a22c:	021b      	lsls	r3, r3, #8
 800a22e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a232:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	4a95      	ldr	r2, [pc, #596]	@ (800a48c <HAL_SAI_Init+0x538>)
 800a238:	fba2 2303 	umull	r2, r3, r2, r3
 800a23c:	08da      	lsrs	r2, r3, #3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a242:	6939      	ldr	r1, [r7, #16]
 800a244:	4b91      	ldr	r3, [pc, #580]	@ (800a48c <HAL_SAI_Init+0x538>)
 800a246:	fba3 2301 	umull	r2, r3, r3, r1
 800a24a:	08da      	lsrs	r2, r3, #3
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	1aca      	subs	r2, r1, r3
 800a256:	2a08      	cmp	r2, #8
 800a258:	d904      	bls.n	800a264 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25e:	1c5a      	adds	r2, r3, #1
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d104      	bne.n	800a276 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a270:	085a      	lsrs	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <HAL_SAI_Init+0x332>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	2b02      	cmp	r3, #2
 800a284:	d109      	bne.n	800a29a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d101      	bne.n	800a292 <HAL_SAI_Init+0x33e>
 800a28e:	2300      	movs	r3, #0
 800a290:	e001      	b.n	800a296 <HAL_SAI_Init+0x342>
 800a292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a296:	623b      	str	r3, [r7, #32]
 800a298:	e008      	b.n	800a2ac <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d102      	bne.n	800a2a8 <HAL_SAI_Init+0x354>
 800a2a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2a6:	e000      	b.n	800a2aa <HAL_SAI_Init+0x356>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a2ac:	f7f8 fca0 	bl	8002bf0 <HAL_GetREVID>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b6:	d331      	bcc.n	800a31c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6819      	ldr	r1, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	4b73      	ldr	r3, [pc, #460]	@ (800a490 <HAL_SAI_Init+0x53c>)
 800a2c4:	400b      	ands	r3, r1
 800a2c6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6819      	ldr	r1, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2d6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a2dc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a2f0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a2fc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a302:	051b      	lsls	r3, r3, #20
 800a304:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a30a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	601a      	str	r2, [r3, #0]
 800a31a:	e02d      	b.n	800a378 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6819      	ldr	r1, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	4b5b      	ldr	r3, [pc, #364]	@ (800a494 <HAL_SAI_Init+0x540>)
 800a328:	400b      	ands	r3, r1
 800a32a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6819      	ldr	r1, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a33a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a340:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a346:	431a      	orrs	r2, r3
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a354:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a360:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a366:	051b      	lsls	r3, r3, #20
 800a368:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a36e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	430a      	orrs	r2, r1
 800a376:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6859      	ldr	r1, [r3, #4]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4b45      	ldr	r3, [pc, #276]	@ (800a498 <HAL_SAI_Init+0x544>)
 800a384:	400b      	ands	r3, r1
 800a386:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6859      	ldr	r1, [r3, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	69da      	ldr	r2, [r3, #28]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39c:	431a      	orrs	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6899      	ldr	r1, [r3, #8]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	4b3a      	ldr	r3, [pc, #232]	@ (800a49c <HAL_SAI_Init+0x548>)
 800a3b2:	400b      	ands	r3, r1
 800a3b4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	6899      	ldr	r1, [r3, #8]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3c0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3c6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800a3cc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800a3d2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a3dc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68d9      	ldr	r1, [r3, #12]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a3f4:	400b      	ands	r3, r1
 800a3f6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68d9      	ldr	r1, [r3, #12]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a406:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a40c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a40e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a414:	3b01      	subs	r3, #1
 800a416:	021b      	lsls	r3, r3, #8
 800a418:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a1e      	ldr	r2, [pc, #120]	@ (800a4a0 <HAL_SAI_Init+0x54c>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d004      	beq.n	800a436 <HAL_SAI_Init+0x4e2>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a1c      	ldr	r2, [pc, #112]	@ (800a4a4 <HAL_SAI_Init+0x550>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d119      	bne.n	800a46a <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a43a:	f023 0201 	bic.w	r2, r3, #1
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d10e      	bne.n	800a46a <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a454:	3b01      	subs	r3, #1
 800a456:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a458:	431a      	orrs	r2, r3
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a462:	f043 0201 	orr.w	r2, r3, #1
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3728      	adds	r7, #40	@ 0x28
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	cccccccd 	.word	0xcccccccd
 800a490:	f005c010 	.word	0xf005c010
 800a494:	f805c010 	.word	0xf805c010
 800a498:	ffff1ff0 	.word	0xffff1ff0
 800a49c:	fff88000 	.word	0xfff88000
 800a4a0:	40015804 	.word	0x40015804
 800a4a4:	58005404 	.word	0x58005404

0800a4a8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a4b0:	4b18      	ldr	r3, [pc, #96]	@ (800a514 <SAI_Disable+0x6c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a18      	ldr	r2, [pc, #96]	@ (800a518 <SAI_Disable+0x70>)
 800a4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ba:	0b1b      	lsrs	r3, r3, #12
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a4d2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10a      	bne.n	800a4f0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	72fb      	strb	r3, [r7, #11]
      break;
 800a4ee:	e009      	b.n	800a504 <SAI_Disable+0x5c>
    }
    count--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e7      	bne.n	800a4d4 <SAI_Disable+0x2c>

  return status;
 800a504:	7afb      	ldrb	r3, [r7, #11]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	24000004 	.word	0x24000004
 800a518:	95cbec1b 	.word	0x95cbec1b

0800a51c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e02b      	b.n	800a588 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d106      	bne.n	800a54a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7f8 f90d 	bl	8002764 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2202      	movs	r2, #2
 800a54e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3304      	adds	r3, #4
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f001 f8f5 	bl	800b74c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	461a      	mov	r2, r3
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	f001 f949 	bl	800b804 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a572:	4b07      	ldr	r3, [pc, #28]	@ (800a590 <HAL_SDRAM_Init+0x74>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a06      	ldr	r2, [pc, #24]	@ (800a590 <HAL_SDRAM_Init+0x74>)
 800a578:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a57c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	52004000 	.word	0x52004000

0800a594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e042      	b.n	800a62c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7f7 ff31 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2224      	movs	r2, #36	@ 0x24
 800a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0201 	bic.w	r2, r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fd90 	bl	800b104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f825 	bl	800a634 <UART_SetConfig>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d101      	bne.n	800a5f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e01b      	b.n	800a62c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689a      	ldr	r2, [r3, #8]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0201 	orr.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fe0f 	bl	800b248 <UART_CheckIdleState>
 800a62a:	4603      	mov	r3, r0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a638:	b092      	sub	sp, #72	@ 0x48
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	431a      	orrs	r2, r3
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	431a      	orrs	r2, r3
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	4313      	orrs	r3, r2
 800a65a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4bbe      	ldr	r3, [pc, #760]	@ (800a95c <UART_SetConfig+0x328>)
 800a664:	4013      	ands	r3, r2
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4ab3      	ldr	r2, [pc, #716]	@ (800a960 <UART_SetConfig+0x32c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d004      	beq.n	800a6a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a69c:	4313      	orrs	r3, r2
 800a69e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	4baf      	ldr	r3, [pc, #700]	@ (800a964 <UART_SetConfig+0x330>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ba:	f023 010f 	bic.w	r1, r3, #15
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4aa6      	ldr	r2, [pc, #664]	@ (800a968 <UART_SetConfig+0x334>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d177      	bne.n	800a7c4 <UART_SetConfig+0x190>
 800a6d4:	4ba5      	ldr	r3, [pc, #660]	@ (800a96c <UART_SetConfig+0x338>)
 800a6d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6dc:	2b28      	cmp	r3, #40	@ 0x28
 800a6de:	d86d      	bhi.n	800a7bc <UART_SetConfig+0x188>
 800a6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e8 <UART_SetConfig+0xb4>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a78d 	.word	0x0800a78d
 800a6ec:	0800a7bd 	.word	0x0800a7bd
 800a6f0:	0800a7bd 	.word	0x0800a7bd
 800a6f4:	0800a7bd 	.word	0x0800a7bd
 800a6f8:	0800a7bd 	.word	0x0800a7bd
 800a6fc:	0800a7bd 	.word	0x0800a7bd
 800a700:	0800a7bd 	.word	0x0800a7bd
 800a704:	0800a7bd 	.word	0x0800a7bd
 800a708:	0800a795 	.word	0x0800a795
 800a70c:	0800a7bd 	.word	0x0800a7bd
 800a710:	0800a7bd 	.word	0x0800a7bd
 800a714:	0800a7bd 	.word	0x0800a7bd
 800a718:	0800a7bd 	.word	0x0800a7bd
 800a71c:	0800a7bd 	.word	0x0800a7bd
 800a720:	0800a7bd 	.word	0x0800a7bd
 800a724:	0800a7bd 	.word	0x0800a7bd
 800a728:	0800a79d 	.word	0x0800a79d
 800a72c:	0800a7bd 	.word	0x0800a7bd
 800a730:	0800a7bd 	.word	0x0800a7bd
 800a734:	0800a7bd 	.word	0x0800a7bd
 800a738:	0800a7bd 	.word	0x0800a7bd
 800a73c:	0800a7bd 	.word	0x0800a7bd
 800a740:	0800a7bd 	.word	0x0800a7bd
 800a744:	0800a7bd 	.word	0x0800a7bd
 800a748:	0800a7a5 	.word	0x0800a7a5
 800a74c:	0800a7bd 	.word	0x0800a7bd
 800a750:	0800a7bd 	.word	0x0800a7bd
 800a754:	0800a7bd 	.word	0x0800a7bd
 800a758:	0800a7bd 	.word	0x0800a7bd
 800a75c:	0800a7bd 	.word	0x0800a7bd
 800a760:	0800a7bd 	.word	0x0800a7bd
 800a764:	0800a7bd 	.word	0x0800a7bd
 800a768:	0800a7ad 	.word	0x0800a7ad
 800a76c:	0800a7bd 	.word	0x0800a7bd
 800a770:	0800a7bd 	.word	0x0800a7bd
 800a774:	0800a7bd 	.word	0x0800a7bd
 800a778:	0800a7bd 	.word	0x0800a7bd
 800a77c:	0800a7bd 	.word	0x0800a7bd
 800a780:	0800a7bd 	.word	0x0800a7bd
 800a784:	0800a7bd 	.word	0x0800a7bd
 800a788:	0800a7b5 	.word	0x0800a7b5
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e222      	b.n	800abda <UART_SetConfig+0x5a6>
 800a794:	2304      	movs	r3, #4
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79a:	e21e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a79c:	2308      	movs	r3, #8
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a2:	e21a      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	e216      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b2:	e212      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7b4:	2340      	movs	r3, #64	@ 0x40
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ba:	e20e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7bc:	2380      	movs	r3, #128	@ 0x80
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c2:	e20a      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a69      	ldr	r2, [pc, #420]	@ (800a970 <UART_SetConfig+0x33c>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d130      	bne.n	800a830 <UART_SetConfig+0x1fc>
 800a7ce:	4b67      	ldr	r3, [pc, #412]	@ (800a96c <UART_SetConfig+0x338>)
 800a7d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	2b05      	cmp	r3, #5
 800a7d8:	d826      	bhi.n	800a828 <UART_SetConfig+0x1f4>
 800a7da:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e0 <UART_SetConfig+0x1ac>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a7f9 	.word	0x0800a7f9
 800a7e4:	0800a801 	.word	0x0800a801
 800a7e8:	0800a809 	.word	0x0800a809
 800a7ec:	0800a811 	.word	0x0800a811
 800a7f0:	0800a819 	.word	0x0800a819
 800a7f4:	0800a821 	.word	0x0800a821
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e1ec      	b.n	800abda <UART_SetConfig+0x5a6>
 800a800:	2304      	movs	r3, #4
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e1e8      	b.n	800abda <UART_SetConfig+0x5a6>
 800a808:	2308      	movs	r3, #8
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e1e4      	b.n	800abda <UART_SetConfig+0x5a6>
 800a810:	2310      	movs	r3, #16
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e1e0      	b.n	800abda <UART_SetConfig+0x5a6>
 800a818:	2320      	movs	r3, #32
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e1dc      	b.n	800abda <UART_SetConfig+0x5a6>
 800a820:	2340      	movs	r3, #64	@ 0x40
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e1d8      	b.n	800abda <UART_SetConfig+0x5a6>
 800a828:	2380      	movs	r3, #128	@ 0x80
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e1d4      	b.n	800abda <UART_SetConfig+0x5a6>
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a4f      	ldr	r2, [pc, #316]	@ (800a974 <UART_SetConfig+0x340>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d130      	bne.n	800a89c <UART_SetConfig+0x268>
 800a83a:	4b4c      	ldr	r3, [pc, #304]	@ (800a96c <UART_SetConfig+0x338>)
 800a83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a83e:	f003 0307 	and.w	r3, r3, #7
 800a842:	2b05      	cmp	r3, #5
 800a844:	d826      	bhi.n	800a894 <UART_SetConfig+0x260>
 800a846:	a201      	add	r2, pc, #4	@ (adr r2, 800a84c <UART_SetConfig+0x218>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a865 	.word	0x0800a865
 800a850:	0800a86d 	.word	0x0800a86d
 800a854:	0800a875 	.word	0x0800a875
 800a858:	0800a87d 	.word	0x0800a87d
 800a85c:	0800a885 	.word	0x0800a885
 800a860:	0800a88d 	.word	0x0800a88d
 800a864:	2300      	movs	r3, #0
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e1b6      	b.n	800abda <UART_SetConfig+0x5a6>
 800a86c:	2304      	movs	r3, #4
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a872:	e1b2      	b.n	800abda <UART_SetConfig+0x5a6>
 800a874:	2308      	movs	r3, #8
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e1ae      	b.n	800abda <UART_SetConfig+0x5a6>
 800a87c:	2310      	movs	r3, #16
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e1aa      	b.n	800abda <UART_SetConfig+0x5a6>
 800a884:	2320      	movs	r3, #32
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e1a6      	b.n	800abda <UART_SetConfig+0x5a6>
 800a88c:	2340      	movs	r3, #64	@ 0x40
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a892:	e1a2      	b.n	800abda <UART_SetConfig+0x5a6>
 800a894:	2380      	movs	r3, #128	@ 0x80
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89a:	e19e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a35      	ldr	r2, [pc, #212]	@ (800a978 <UART_SetConfig+0x344>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d130      	bne.n	800a908 <UART_SetConfig+0x2d4>
 800a8a6:	4b31      	ldr	r3, [pc, #196]	@ (800a96c <UART_SetConfig+0x338>)
 800a8a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d826      	bhi.n	800a900 <UART_SetConfig+0x2cc>
 800a8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b8 <UART_SetConfig+0x284>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a8d1 	.word	0x0800a8d1
 800a8bc:	0800a8d9 	.word	0x0800a8d9
 800a8c0:	0800a8e1 	.word	0x0800a8e1
 800a8c4:	0800a8e9 	.word	0x0800a8e9
 800a8c8:	0800a8f1 	.word	0x0800a8f1
 800a8cc:	0800a8f9 	.word	0x0800a8f9
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d6:	e180      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8d8:	2304      	movs	r3, #4
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8de:	e17c      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8e0:	2308      	movs	r3, #8
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e6:	e178      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ee:	e174      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f6:	e170      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8f8:	2340      	movs	r3, #64	@ 0x40
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fe:	e16c      	b.n	800abda <UART_SetConfig+0x5a6>
 800a900:	2380      	movs	r3, #128	@ 0x80
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e168      	b.n	800abda <UART_SetConfig+0x5a6>
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1b      	ldr	r2, [pc, #108]	@ (800a97c <UART_SetConfig+0x348>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d142      	bne.n	800a998 <UART_SetConfig+0x364>
 800a912:	4b16      	ldr	r3, [pc, #88]	@ (800a96c <UART_SetConfig+0x338>)
 800a914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a916:	f003 0307 	and.w	r3, r3, #7
 800a91a:	2b05      	cmp	r3, #5
 800a91c:	d838      	bhi.n	800a990 <UART_SetConfig+0x35c>
 800a91e:	a201      	add	r2, pc, #4	@ (adr r2, 800a924 <UART_SetConfig+0x2f0>)
 800a920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a924:	0800a93d 	.word	0x0800a93d
 800a928:	0800a945 	.word	0x0800a945
 800a92c:	0800a94d 	.word	0x0800a94d
 800a930:	0800a955 	.word	0x0800a955
 800a934:	0800a981 	.word	0x0800a981
 800a938:	0800a989 	.word	0x0800a989
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e14a      	b.n	800abda <UART_SetConfig+0x5a6>
 800a944:	2304      	movs	r3, #4
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94a:	e146      	b.n	800abda <UART_SetConfig+0x5a6>
 800a94c:	2308      	movs	r3, #8
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e142      	b.n	800abda <UART_SetConfig+0x5a6>
 800a954:	2310      	movs	r3, #16
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e13e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a95c:	cfff69f3 	.word	0xcfff69f3
 800a960:	58000c00 	.word	0x58000c00
 800a964:	11fff4ff 	.word	0x11fff4ff
 800a968:	40011000 	.word	0x40011000
 800a96c:	58024400 	.word	0x58024400
 800a970:	40004400 	.word	0x40004400
 800a974:	40004800 	.word	0x40004800
 800a978:	40004c00 	.word	0x40004c00
 800a97c:	40005000 	.word	0x40005000
 800a980:	2320      	movs	r3, #32
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a986:	e128      	b.n	800abda <UART_SetConfig+0x5a6>
 800a988:	2340      	movs	r3, #64	@ 0x40
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98e:	e124      	b.n	800abda <UART_SetConfig+0x5a6>
 800a990:	2380      	movs	r3, #128	@ 0x80
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a996:	e120      	b.n	800abda <UART_SetConfig+0x5a6>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4acb      	ldr	r2, [pc, #812]	@ (800accc <UART_SetConfig+0x698>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d176      	bne.n	800aa90 <UART_SetConfig+0x45c>
 800a9a2:	4bcb      	ldr	r3, [pc, #812]	@ (800acd0 <UART_SetConfig+0x69c>)
 800a9a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9aa:	2b28      	cmp	r3, #40	@ 0x28
 800a9ac:	d86c      	bhi.n	800aa88 <UART_SetConfig+0x454>
 800a9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b4 <UART_SetConfig+0x380>)
 800a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b4:	0800aa59 	.word	0x0800aa59
 800a9b8:	0800aa89 	.word	0x0800aa89
 800a9bc:	0800aa89 	.word	0x0800aa89
 800a9c0:	0800aa89 	.word	0x0800aa89
 800a9c4:	0800aa89 	.word	0x0800aa89
 800a9c8:	0800aa89 	.word	0x0800aa89
 800a9cc:	0800aa89 	.word	0x0800aa89
 800a9d0:	0800aa89 	.word	0x0800aa89
 800a9d4:	0800aa61 	.word	0x0800aa61
 800a9d8:	0800aa89 	.word	0x0800aa89
 800a9dc:	0800aa89 	.word	0x0800aa89
 800a9e0:	0800aa89 	.word	0x0800aa89
 800a9e4:	0800aa89 	.word	0x0800aa89
 800a9e8:	0800aa89 	.word	0x0800aa89
 800a9ec:	0800aa89 	.word	0x0800aa89
 800a9f0:	0800aa89 	.word	0x0800aa89
 800a9f4:	0800aa69 	.word	0x0800aa69
 800a9f8:	0800aa89 	.word	0x0800aa89
 800a9fc:	0800aa89 	.word	0x0800aa89
 800aa00:	0800aa89 	.word	0x0800aa89
 800aa04:	0800aa89 	.word	0x0800aa89
 800aa08:	0800aa89 	.word	0x0800aa89
 800aa0c:	0800aa89 	.word	0x0800aa89
 800aa10:	0800aa89 	.word	0x0800aa89
 800aa14:	0800aa71 	.word	0x0800aa71
 800aa18:	0800aa89 	.word	0x0800aa89
 800aa1c:	0800aa89 	.word	0x0800aa89
 800aa20:	0800aa89 	.word	0x0800aa89
 800aa24:	0800aa89 	.word	0x0800aa89
 800aa28:	0800aa89 	.word	0x0800aa89
 800aa2c:	0800aa89 	.word	0x0800aa89
 800aa30:	0800aa89 	.word	0x0800aa89
 800aa34:	0800aa79 	.word	0x0800aa79
 800aa38:	0800aa89 	.word	0x0800aa89
 800aa3c:	0800aa89 	.word	0x0800aa89
 800aa40:	0800aa89 	.word	0x0800aa89
 800aa44:	0800aa89 	.word	0x0800aa89
 800aa48:	0800aa89 	.word	0x0800aa89
 800aa4c:	0800aa89 	.word	0x0800aa89
 800aa50:	0800aa89 	.word	0x0800aa89
 800aa54:	0800aa81 	.word	0x0800aa81
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5e:	e0bc      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa60:	2304      	movs	r3, #4
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa66:	e0b8      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa68:	2308      	movs	r3, #8
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6e:	e0b4      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa70:	2310      	movs	r3, #16
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa76:	e0b0      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa78:	2320      	movs	r3, #32
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa7e:	e0ac      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa80:	2340      	movs	r3, #64	@ 0x40
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa86:	e0a8      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa88:	2380      	movs	r3, #128	@ 0x80
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa8e:	e0a4      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a8f      	ldr	r2, [pc, #572]	@ (800acd4 <UART_SetConfig+0x6a0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d130      	bne.n	800aafc <UART_SetConfig+0x4c8>
 800aa9a:	4b8d      	ldr	r3, [pc, #564]	@ (800acd0 <UART_SetConfig+0x69c>)
 800aa9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	2b05      	cmp	r3, #5
 800aaa4:	d826      	bhi.n	800aaf4 <UART_SetConfig+0x4c0>
 800aaa6:	a201      	add	r2, pc, #4	@ (adr r2, 800aaac <UART_SetConfig+0x478>)
 800aaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaac:	0800aac5 	.word	0x0800aac5
 800aab0:	0800aacd 	.word	0x0800aacd
 800aab4:	0800aad5 	.word	0x0800aad5
 800aab8:	0800aadd 	.word	0x0800aadd
 800aabc:	0800aae5 	.word	0x0800aae5
 800aac0:	0800aaed 	.word	0x0800aaed
 800aac4:	2300      	movs	r3, #0
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e086      	b.n	800abda <UART_SetConfig+0x5a6>
 800aacc:	2304      	movs	r3, #4
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad2:	e082      	b.n	800abda <UART_SetConfig+0x5a6>
 800aad4:	2308      	movs	r3, #8
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aada:	e07e      	b.n	800abda <UART_SetConfig+0x5a6>
 800aadc:	2310      	movs	r3, #16
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e07a      	b.n	800abda <UART_SetConfig+0x5a6>
 800aae4:	2320      	movs	r3, #32
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaea:	e076      	b.n	800abda <UART_SetConfig+0x5a6>
 800aaec:	2340      	movs	r3, #64	@ 0x40
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf2:	e072      	b.n	800abda <UART_SetConfig+0x5a6>
 800aaf4:	2380      	movs	r3, #128	@ 0x80
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafa:	e06e      	b.n	800abda <UART_SetConfig+0x5a6>
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a75      	ldr	r2, [pc, #468]	@ (800acd8 <UART_SetConfig+0x6a4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d130      	bne.n	800ab68 <UART_SetConfig+0x534>
 800ab06:	4b72      	ldr	r3, [pc, #456]	@ (800acd0 <UART_SetConfig+0x69c>)
 800ab08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	d826      	bhi.n	800ab60 <UART_SetConfig+0x52c>
 800ab12:	a201      	add	r2, pc, #4	@ (adr r2, 800ab18 <UART_SetConfig+0x4e4>)
 800ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab18:	0800ab31 	.word	0x0800ab31
 800ab1c:	0800ab39 	.word	0x0800ab39
 800ab20:	0800ab41 	.word	0x0800ab41
 800ab24:	0800ab49 	.word	0x0800ab49
 800ab28:	0800ab51 	.word	0x0800ab51
 800ab2c:	0800ab59 	.word	0x0800ab59
 800ab30:	2300      	movs	r3, #0
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e050      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab38:	2304      	movs	r3, #4
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e04c      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab40:	2308      	movs	r3, #8
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e048      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab48:	2310      	movs	r3, #16
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4e:	e044      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab50:	2320      	movs	r3, #32
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab56:	e040      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab58:	2340      	movs	r3, #64	@ 0x40
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	e03c      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab60:	2380      	movs	r3, #128	@ 0x80
 800ab62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab66:	e038      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a5b      	ldr	r2, [pc, #364]	@ (800acdc <UART_SetConfig+0x6a8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d130      	bne.n	800abd4 <UART_SetConfig+0x5a0>
 800ab72:	4b57      	ldr	r3, [pc, #348]	@ (800acd0 <UART_SetConfig+0x69c>)
 800ab74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	d826      	bhi.n	800abcc <UART_SetConfig+0x598>
 800ab7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab84 <UART_SetConfig+0x550>)
 800ab80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab84:	0800ab9d 	.word	0x0800ab9d
 800ab88:	0800aba5 	.word	0x0800aba5
 800ab8c:	0800abad 	.word	0x0800abad
 800ab90:	0800abb5 	.word	0x0800abb5
 800ab94:	0800abbd 	.word	0x0800abbd
 800ab98:	0800abc5 	.word	0x0800abc5
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba2:	e01a      	b.n	800abda <UART_SetConfig+0x5a6>
 800aba4:	2304      	movs	r3, #4
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abaa:	e016      	b.n	800abda <UART_SetConfig+0x5a6>
 800abac:	2308      	movs	r3, #8
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e012      	b.n	800abda <UART_SetConfig+0x5a6>
 800abb4:	2310      	movs	r3, #16
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e00e      	b.n	800abda <UART_SetConfig+0x5a6>
 800abbc:	2320      	movs	r3, #32
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc2:	e00a      	b.n	800abda <UART_SetConfig+0x5a6>
 800abc4:	2340      	movs	r3, #64	@ 0x40
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e006      	b.n	800abda <UART_SetConfig+0x5a6>
 800abcc:	2380      	movs	r3, #128	@ 0x80
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd2:	e002      	b.n	800abda <UART_SetConfig+0x5a6>
 800abd4:	2380      	movs	r3, #128	@ 0x80
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a3f      	ldr	r2, [pc, #252]	@ (800acdc <UART_SetConfig+0x6a8>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	f040 80f8 	bne.w	800add6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abe6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abea:	2b20      	cmp	r3, #32
 800abec:	dc46      	bgt.n	800ac7c <UART_SetConfig+0x648>
 800abee:	2b02      	cmp	r3, #2
 800abf0:	f2c0 8082 	blt.w	800acf8 <UART_SetConfig+0x6c4>
 800abf4:	3b02      	subs	r3, #2
 800abf6:	2b1e      	cmp	r3, #30
 800abf8:	d87e      	bhi.n	800acf8 <UART_SetConfig+0x6c4>
 800abfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ac00 <UART_SetConfig+0x5cc>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac83 	.word	0x0800ac83
 800ac04:	0800acf9 	.word	0x0800acf9
 800ac08:	0800ac8b 	.word	0x0800ac8b
 800ac0c:	0800acf9 	.word	0x0800acf9
 800ac10:	0800acf9 	.word	0x0800acf9
 800ac14:	0800acf9 	.word	0x0800acf9
 800ac18:	0800ac9b 	.word	0x0800ac9b
 800ac1c:	0800acf9 	.word	0x0800acf9
 800ac20:	0800acf9 	.word	0x0800acf9
 800ac24:	0800acf9 	.word	0x0800acf9
 800ac28:	0800acf9 	.word	0x0800acf9
 800ac2c:	0800acf9 	.word	0x0800acf9
 800ac30:	0800acf9 	.word	0x0800acf9
 800ac34:	0800acf9 	.word	0x0800acf9
 800ac38:	0800acab 	.word	0x0800acab
 800ac3c:	0800acf9 	.word	0x0800acf9
 800ac40:	0800acf9 	.word	0x0800acf9
 800ac44:	0800acf9 	.word	0x0800acf9
 800ac48:	0800acf9 	.word	0x0800acf9
 800ac4c:	0800acf9 	.word	0x0800acf9
 800ac50:	0800acf9 	.word	0x0800acf9
 800ac54:	0800acf9 	.word	0x0800acf9
 800ac58:	0800acf9 	.word	0x0800acf9
 800ac5c:	0800acf9 	.word	0x0800acf9
 800ac60:	0800acf9 	.word	0x0800acf9
 800ac64:	0800acf9 	.word	0x0800acf9
 800ac68:	0800acf9 	.word	0x0800acf9
 800ac6c:	0800acf9 	.word	0x0800acf9
 800ac70:	0800acf9 	.word	0x0800acf9
 800ac74:	0800acf9 	.word	0x0800acf9
 800ac78:	0800aceb 	.word	0x0800aceb
 800ac7c:	2b40      	cmp	r3, #64	@ 0x40
 800ac7e:	d037      	beq.n	800acf0 <UART_SetConfig+0x6bc>
 800ac80:	e03a      	b.n	800acf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac82:	f7fe fadb 	bl	800923c <HAL_RCCEx_GetD3PCLK1Freq>
 800ac86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac88:	e03c      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe faea 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac98:	e034      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac9a:	f107 0318 	add.w	r3, r7, #24
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fc36 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca8:	e02c      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acaa:	4b09      	ldr	r3, [pc, #36]	@ (800acd0 <UART_SetConfig+0x69c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d016      	beq.n	800ace4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acb6:	4b06      	ldr	r3, [pc, #24]	@ (800acd0 <UART_SetConfig+0x69c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	08db      	lsrs	r3, r3, #3
 800acbc:	f003 0303 	and.w	r3, r3, #3
 800acc0:	4a07      	ldr	r2, [pc, #28]	@ (800ace0 <UART_SetConfig+0x6ac>)
 800acc2:	fa22 f303 	lsr.w	r3, r2, r3
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acc8:	e01c      	b.n	800ad04 <UART_SetConfig+0x6d0>
 800acca:	bf00      	nop
 800accc:	40011400 	.word	0x40011400
 800acd0:	58024400 	.word	0x58024400
 800acd4:	40007800 	.word	0x40007800
 800acd8:	40007c00 	.word	0x40007c00
 800acdc:	58000c00 	.word	0x58000c00
 800ace0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ace4:	4b9d      	ldr	r3, [pc, #628]	@ (800af5c <UART_SetConfig+0x928>)
 800ace6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace8:	e00c      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acea:	4b9d      	ldr	r3, [pc, #628]	@ (800af60 <UART_SetConfig+0x92c>)
 800acec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acee:	e009      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf6:	e005      	b.n	800ad04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 81de 	beq.w	800b0c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad10:	4a94      	ldr	r2, [pc, #592]	@ (800af64 <UART_SetConfig+0x930>)
 800ad12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	685a      	ldr	r2, [r3, #4]
 800ad24:	4613      	mov	r3, r2
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	4413      	add	r3, r2
 800ad2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d305      	bcc.n	800ad3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d903      	bls.n	800ad44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad42:	e1c1      	b.n	800b0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad46:	2200      	movs	r2, #0
 800ad48:	60bb      	str	r3, [r7, #8]
 800ad4a:	60fa      	str	r2, [r7, #12]
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad50:	4a84      	ldr	r2, [pc, #528]	@ (800af64 <UART_SetConfig+0x930>)
 800ad52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2200      	movs	r2, #0
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	607a      	str	r2, [r7, #4]
 800ad5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad66:	f7f5 fab7 	bl	80002d8 <__aeabi_uldivmod>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4619      	mov	r1, r3
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	020b      	lsls	r3, r1, #8
 800ad7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad80:	0202      	lsls	r2, r0, #8
 800ad82:	6979      	ldr	r1, [r7, #20]
 800ad84:	6849      	ldr	r1, [r1, #4]
 800ad86:	0849      	lsrs	r1, r1, #1
 800ad88:	2000      	movs	r0, #0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	eb12 0804 	adds.w	r8, r2, r4
 800ad92:	eb43 0905 	adc.w	r9, r3, r5
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	469a      	mov	sl, r3
 800ad9e:	4693      	mov	fp, r2
 800ada0:	4652      	mov	r2, sl
 800ada2:	465b      	mov	r3, fp
 800ada4:	4640      	mov	r0, r8
 800ada6:	4649      	mov	r1, r9
 800ada8:	f7f5 fa96 	bl	80002d8 <__aeabi_uldivmod>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4613      	mov	r3, r2
 800adb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adba:	d308      	bcc.n	800adce <UART_SetConfig+0x79a>
 800adbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adc2:	d204      	bcs.n	800adce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adca:	60da      	str	r2, [r3, #12]
 800adcc:	e17c      	b.n	800b0c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800add4:	e178      	b.n	800b0c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adde:	f040 80c5 	bne.w	800af6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ade2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	dc48      	bgt.n	800ae7c <UART_SetConfig+0x848>
 800adea:	2b00      	cmp	r3, #0
 800adec:	db7b      	blt.n	800aee6 <UART_SetConfig+0x8b2>
 800adee:	2b20      	cmp	r3, #32
 800adf0:	d879      	bhi.n	800aee6 <UART_SetConfig+0x8b2>
 800adf2:	a201      	add	r2, pc, #4	@ (adr r2, 800adf8 <UART_SetConfig+0x7c4>)
 800adf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf8:	0800ae83 	.word	0x0800ae83
 800adfc:	0800ae8b 	.word	0x0800ae8b
 800ae00:	0800aee7 	.word	0x0800aee7
 800ae04:	0800aee7 	.word	0x0800aee7
 800ae08:	0800ae93 	.word	0x0800ae93
 800ae0c:	0800aee7 	.word	0x0800aee7
 800ae10:	0800aee7 	.word	0x0800aee7
 800ae14:	0800aee7 	.word	0x0800aee7
 800ae18:	0800aea3 	.word	0x0800aea3
 800ae1c:	0800aee7 	.word	0x0800aee7
 800ae20:	0800aee7 	.word	0x0800aee7
 800ae24:	0800aee7 	.word	0x0800aee7
 800ae28:	0800aee7 	.word	0x0800aee7
 800ae2c:	0800aee7 	.word	0x0800aee7
 800ae30:	0800aee7 	.word	0x0800aee7
 800ae34:	0800aee7 	.word	0x0800aee7
 800ae38:	0800aeb3 	.word	0x0800aeb3
 800ae3c:	0800aee7 	.word	0x0800aee7
 800ae40:	0800aee7 	.word	0x0800aee7
 800ae44:	0800aee7 	.word	0x0800aee7
 800ae48:	0800aee7 	.word	0x0800aee7
 800ae4c:	0800aee7 	.word	0x0800aee7
 800ae50:	0800aee7 	.word	0x0800aee7
 800ae54:	0800aee7 	.word	0x0800aee7
 800ae58:	0800aee7 	.word	0x0800aee7
 800ae5c:	0800aee7 	.word	0x0800aee7
 800ae60:	0800aee7 	.word	0x0800aee7
 800ae64:	0800aee7 	.word	0x0800aee7
 800ae68:	0800aee7 	.word	0x0800aee7
 800ae6c:	0800aee7 	.word	0x0800aee7
 800ae70:	0800aee7 	.word	0x0800aee7
 800ae74:	0800aee7 	.word	0x0800aee7
 800ae78:	0800aed9 	.word	0x0800aed9
 800ae7c:	2b40      	cmp	r3, #64	@ 0x40
 800ae7e:	d02e      	beq.n	800aede <UART_SetConfig+0x8aa>
 800ae80:	e031      	b.n	800aee6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae82:	f7fc fa25 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 800ae86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae88:	e033      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae8a:	f7fc fa37 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 800ae8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae90:	e02f      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe f9e6 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea0:	e027      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aea2:	f107 0318 	add.w	r3, r7, #24
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe fb32 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb0:	e01f      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb2:	4b2d      	ldr	r3, [pc, #180]	@ (800af68 <UART_SetConfig+0x934>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aebe:	4b2a      	ldr	r3, [pc, #168]	@ (800af68 <UART_SetConfig+0x934>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	08db      	lsrs	r3, r3, #3
 800aec4:	f003 0303 	and.w	r3, r3, #3
 800aec8:	4a24      	ldr	r2, [pc, #144]	@ (800af5c <UART_SetConfig+0x928>)
 800aeca:	fa22 f303 	lsr.w	r3, r2, r3
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aed0:	e00f      	b.n	800aef2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aed2:	4b22      	ldr	r3, [pc, #136]	@ (800af5c <UART_SetConfig+0x928>)
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed6:	e00c      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aed8:	4b21      	ldr	r3, [pc, #132]	@ (800af60 <UART_SetConfig+0x92c>)
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aedc:	e009      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee4:	e005      	b.n	800aef2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 80e7 	beq.w	800b0c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefe:	4a19      	ldr	r2, [pc, #100]	@ (800af64 <UART_SetConfig+0x930>)
 800af00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af04:	461a      	mov	r2, r3
 800af06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af08:	fbb3 f3f2 	udiv	r3, r3, r2
 800af0c:	005a      	lsls	r2, r3, #1
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	085b      	lsrs	r3, r3, #1
 800af14:	441a      	add	r2, r3
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	2b0f      	cmp	r3, #15
 800af24:	d916      	bls.n	800af54 <UART_SetConfig+0x920>
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af2c:	d212      	bcs.n	800af54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af30:	b29b      	uxth	r3, r3
 800af32:	f023 030f 	bic.w	r3, r3, #15
 800af36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3a:	085b      	lsrs	r3, r3, #1
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f003 0307 	and.w	r3, r3, #7
 800af42:	b29a      	uxth	r2, r3
 800af44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af46:	4313      	orrs	r3, r2
 800af48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800af50:	60da      	str	r2, [r3, #12]
 800af52:	e0b9      	b.n	800b0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af5a:	e0b5      	b.n	800b0c8 <UART_SetConfig+0xa94>
 800af5c:	03d09000 	.word	0x03d09000
 800af60:	003d0900 	.word	0x003d0900
 800af64:	0800bfd0 	.word	0x0800bfd0
 800af68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800af6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af70:	2b20      	cmp	r3, #32
 800af72:	dc49      	bgt.n	800b008 <UART_SetConfig+0x9d4>
 800af74:	2b00      	cmp	r3, #0
 800af76:	db7c      	blt.n	800b072 <UART_SetConfig+0xa3e>
 800af78:	2b20      	cmp	r3, #32
 800af7a:	d87a      	bhi.n	800b072 <UART_SetConfig+0xa3e>
 800af7c:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <UART_SetConfig+0x950>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800b00f 	.word	0x0800b00f
 800af88:	0800b017 	.word	0x0800b017
 800af8c:	0800b073 	.word	0x0800b073
 800af90:	0800b073 	.word	0x0800b073
 800af94:	0800b01f 	.word	0x0800b01f
 800af98:	0800b073 	.word	0x0800b073
 800af9c:	0800b073 	.word	0x0800b073
 800afa0:	0800b073 	.word	0x0800b073
 800afa4:	0800b02f 	.word	0x0800b02f
 800afa8:	0800b073 	.word	0x0800b073
 800afac:	0800b073 	.word	0x0800b073
 800afb0:	0800b073 	.word	0x0800b073
 800afb4:	0800b073 	.word	0x0800b073
 800afb8:	0800b073 	.word	0x0800b073
 800afbc:	0800b073 	.word	0x0800b073
 800afc0:	0800b073 	.word	0x0800b073
 800afc4:	0800b03f 	.word	0x0800b03f
 800afc8:	0800b073 	.word	0x0800b073
 800afcc:	0800b073 	.word	0x0800b073
 800afd0:	0800b073 	.word	0x0800b073
 800afd4:	0800b073 	.word	0x0800b073
 800afd8:	0800b073 	.word	0x0800b073
 800afdc:	0800b073 	.word	0x0800b073
 800afe0:	0800b073 	.word	0x0800b073
 800afe4:	0800b073 	.word	0x0800b073
 800afe8:	0800b073 	.word	0x0800b073
 800afec:	0800b073 	.word	0x0800b073
 800aff0:	0800b073 	.word	0x0800b073
 800aff4:	0800b073 	.word	0x0800b073
 800aff8:	0800b073 	.word	0x0800b073
 800affc:	0800b073 	.word	0x0800b073
 800b000:	0800b073 	.word	0x0800b073
 800b004:	0800b065 	.word	0x0800b065
 800b008:	2b40      	cmp	r3, #64	@ 0x40
 800b00a:	d02e      	beq.n	800b06a <UART_SetConfig+0xa36>
 800b00c:	e031      	b.n	800b072 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b00e:	f7fc f95f 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 800b012:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b014:	e033      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b016:	f7fc f971 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 800b01a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b01c:	e02f      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b01e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe f920 	bl	8009268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b02c:	e027      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02e:	f107 0318 	add.w	r3, r7, #24
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fa6c 	bl	8009510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b03c:	e01f      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b03e:	4b2d      	ldr	r3, [pc, #180]	@ (800b0f4 <UART_SetConfig+0xac0>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0320 	and.w	r3, r3, #32
 800b046:	2b00      	cmp	r3, #0
 800b048:	d009      	beq.n	800b05e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b04a:	4b2a      	ldr	r3, [pc, #168]	@ (800b0f4 <UART_SetConfig+0xac0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	08db      	lsrs	r3, r3, #3
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	4a28      	ldr	r2, [pc, #160]	@ (800b0f8 <UART_SetConfig+0xac4>)
 800b056:	fa22 f303 	lsr.w	r3, r2, r3
 800b05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b05c:	e00f      	b.n	800b07e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b05e:	4b26      	ldr	r3, [pc, #152]	@ (800b0f8 <UART_SetConfig+0xac4>)
 800b060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b062:	e00c      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b064:	4b25      	ldr	r3, [pc, #148]	@ (800b0fc <UART_SetConfig+0xac8>)
 800b066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b068:	e009      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b06a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b070:	e005      	b.n	800b07e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b072:	2300      	movs	r3, #0
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b07c:	bf00      	nop
    }

    if (pclk != 0U)
 800b07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d021      	beq.n	800b0c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b088:	4a1d      	ldr	r2, [pc, #116]	@ (800b100 <UART_SetConfig+0xacc>)
 800b08a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b08e:	461a      	mov	r2, r3
 800b090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b092:	fbb3 f2f2 	udiv	r2, r3, r2
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	085b      	lsrs	r3, r3, #1
 800b09c:	441a      	add	r2, r3
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d909      	bls.n	800b0c2 <UART_SetConfig+0xa8e>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b4:	d205      	bcs.n	800b0c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	60da      	str	r2, [r3, #12]
 800b0c0:	e002      	b.n	800b0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b0e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3748      	adds	r7, #72	@ 0x48
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0f2:	bf00      	nop
 800b0f4:	58024400 	.word	0x58024400
 800b0f8:	03d09000 	.word	0x03d09000
 800b0fc:	003d0900 	.word	0x003d0900
 800b100:	0800bfd0 	.word	0x0800bfd0

0800b104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b110:	f003 0308 	and.w	r3, r3, #8
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00a      	beq.n	800b12e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b176:	f003 0304 	and.w	r3, r3, #4
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	430a      	orrs	r2, r1
 800b192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b198:	f003 0310 	and.w	r3, r3, #16
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01a      	beq.n	800b21a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b202:	d10a      	bne.n	800b21a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	430a      	orrs	r2, r1
 800b23a:	605a      	str	r2, [r3, #4]
  }
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b098      	sub	sp, #96	@ 0x60
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b258:	f7f7 fc9a 	bl	8002b90 <HAL_GetTick>
 800b25c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0308 	and.w	r3, r3, #8
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d12f      	bne.n	800b2cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b26c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b274:	2200      	movs	r2, #0
 800b276:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f88e 	bl	800b39c <UART_WaitOnFlagUntilTimeout>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d022      	beq.n	800b2cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28e:	e853 3f00 	ldrex	r3, [r3]
 800b292:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b29a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2ac:	e841 2300 	strex	r3, r2, [r1]
 800b2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e6      	bne.n	800b286 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e063      	b.n	800b394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 0304 	and.w	r3, r3, #4
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d149      	bne.n	800b36e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f857 	bl	800b39c <UART_WaitOnFlagUntilTimeout>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d03c      	beq.n	800b36e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	623b      	str	r3, [r7, #32]
   return(result);
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b308:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b312:	633b      	str	r3, [r7, #48]	@ 0x30
 800b314:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e6      	bne.n	800b2f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	60fb      	str	r3, [r7, #12]
   return(result);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f023 0301 	bic.w	r3, r3, #1
 800b33c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b346:	61fa      	str	r2, [r7, #28]
 800b348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	69b9      	ldr	r1, [r7, #24]
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	e841 2300 	strex	r3, r2, [r1]
 800b352:	617b      	str	r3, [r7, #20]
   return(result);
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1e5      	bne.n	800b326 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e012      	b.n	800b394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2220      	movs	r2, #32
 800b372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2220      	movs	r2, #32
 800b37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3758      	adds	r7, #88	@ 0x58
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	603b      	str	r3, [r7, #0]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3ac:	e04f      	b.n	800b44e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3b4:	d04b      	beq.n	800b44e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3b6:	f7f7 fbeb 	bl	8002b90 <HAL_GetTick>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d302      	bcc.n	800b3cc <UART_WaitOnFlagUntilTimeout+0x30>
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e04e      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0304 	and.w	r3, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d037      	beq.n	800b44e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2b80      	cmp	r3, #128	@ 0x80
 800b3e2:	d034      	beq.n	800b44e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2b40      	cmp	r3, #64	@ 0x40
 800b3e8:	d031      	beq.n	800b44e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	f003 0308 	and.w	r3, r3, #8
 800b3f4:	2b08      	cmp	r3, #8
 800b3f6:	d110      	bne.n	800b41a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 f839 	bl	800b478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2208      	movs	r2, #8
 800b40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e029      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b428:	d111      	bne.n	800b44e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f000 f81f 	bl	800b478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e00f      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	69da      	ldr	r2, [r3, #28]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	4013      	ands	r3, r2
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	bf0c      	ite	eq
 800b45e:	2301      	moveq	r3, #1
 800b460:	2300      	movne	r3, #0
 800b462:	b2db      	uxtb	r3, r3
 800b464:	461a      	mov	r2, r3
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d0a0      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
	...

0800b478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b095      	sub	sp, #84	@ 0x54
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b488:	e853 3f00 	ldrex	r3, [r3]
 800b48c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b49e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e6      	bne.n	800b480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	e853 3f00 	ldrex	r3, [r3]
 800b4c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4c2:	69fa      	ldr	r2, [r7, #28]
 800b4c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b540 <UART_EndRxTransfer+0xc8>)
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1e5      	bne.n	800b4b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d118      	bne.n	800b520 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f023 0310 	bic.w	r3, r3, #16
 800b502:	647b      	str	r3, [r7, #68]	@ 0x44
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b50c:	61bb      	str	r3, [r7, #24]
 800b50e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6979      	ldr	r1, [r7, #20]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	613b      	str	r3, [r7, #16]
   return(result);
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b534:	bf00      	nop
 800b536:	3754      	adds	r7, #84	@ 0x54
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	effffffe 	.word	0xeffffffe

0800b544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b552:	2b01      	cmp	r3, #1
 800b554:	d101      	bne.n	800b55a <HAL_UARTEx_DisableFifoMode+0x16>
 800b556:	2302      	movs	r3, #2
 800b558:	e027      	b.n	800b5aa <HAL_UARTEx_DisableFifoMode+0x66>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2224      	movs	r2, #36	@ 0x24
 800b566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f022 0201 	bic.w	r2, r2, #1
 800b580:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2220      	movs	r2, #32
 800b59c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d101      	bne.n	800b5ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	e02d      	b.n	800b62a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2224      	movs	r2, #36	@ 0x24
 800b5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f022 0201 	bic.w	r2, r2, #1
 800b5f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	430a      	orrs	r2, r1
 800b608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f850 	bl	800b6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2220      	movs	r2, #32
 800b61c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b642:	2b01      	cmp	r3, #1
 800b644:	d101      	bne.n	800b64a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b646:	2302      	movs	r3, #2
 800b648:	e02d      	b.n	800b6a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2224      	movs	r2, #36	@ 0x24
 800b656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f022 0201 	bic.w	r2, r2, #1
 800b670:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f812 	bl	800b6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2220      	movs	r2, #32
 800b698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d108      	bne.n	800b6d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6d0:	e031      	b.n	800b736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6d2:	2310      	movs	r3, #16
 800b6d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6d6:	2310      	movs	r3, #16
 800b6d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	0e5b      	lsrs	r3, r3, #25
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	f003 0307 	and.w	r3, r3, #7
 800b6e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	0f5b      	lsrs	r3, r3, #29
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	f003 0307 	and.w	r3, r3, #7
 800b6f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
 800b6fc:	7b3a      	ldrb	r2, [r7, #12]
 800b6fe:	4911      	ldr	r1, [pc, #68]	@ (800b744 <UARTEx_SetNbDataToProcess+0x94>)
 800b700:	5c8a      	ldrb	r2, [r1, r2]
 800b702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b706:	7b3a      	ldrb	r2, [r7, #12]
 800b708:	490f      	ldr	r1, [pc, #60]	@ (800b748 <UARTEx_SetNbDataToProcess+0x98>)
 800b70a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b70c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	7b7a      	ldrb	r2, [r7, #13]
 800b71c:	4909      	ldr	r1, [pc, #36]	@ (800b744 <UARTEx_SetNbDataToProcess+0x94>)
 800b71e:	5c8a      	ldrb	r2, [r1, r2]
 800b720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b724:	7b7a      	ldrb	r2, [r7, #13]
 800b726:	4908      	ldr	r1, [pc, #32]	@ (800b748 <UARTEx_SetNbDataToProcess+0x98>)
 800b728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b72a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b72e:	b29a      	uxth	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	0800bfe8 	.word	0x0800bfe8
 800b748:	0800bff0 	.word	0x0800bff0

0800b74c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d121      	bne.n	800b7a2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b27      	ldr	r3, [pc, #156]	@ (800b800 <FMC_SDRAM_Init+0xb4>)
 800b764:	4013      	ands	r3, r2
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	6851      	ldr	r1, [r2, #4]
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	6892      	ldr	r2, [r2, #8]
 800b76e:	4311      	orrs	r1, r2
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	68d2      	ldr	r2, [r2, #12]
 800b774:	4311      	orrs	r1, r2
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	6912      	ldr	r2, [r2, #16]
 800b77a:	4311      	orrs	r1, r2
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	6952      	ldr	r2, [r2, #20]
 800b780:	4311      	orrs	r1, r2
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6992      	ldr	r2, [r2, #24]
 800b786:	4311      	orrs	r1, r2
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	69d2      	ldr	r2, [r2, #28]
 800b78c:	4311      	orrs	r1, r2
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	6a12      	ldr	r2, [r2, #32]
 800b792:	4311      	orrs	r1, r2
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b798:	430a      	orrs	r2, r1
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	e026      	b.n	800b7f0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	69d9      	ldr	r1, [r3, #28]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	4319      	orrs	r1, r3
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b8:	430b      	orrs	r3, r1
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b800 <FMC_SDRAM_Init+0xb4>)
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	683a      	ldr	r2, [r7, #0]
 800b7ca:	6851      	ldr	r1, [r2, #4]
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	6892      	ldr	r2, [r2, #8]
 800b7d0:	4311      	orrs	r1, r2
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	68d2      	ldr	r2, [r2, #12]
 800b7d6:	4311      	orrs	r1, r2
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	6912      	ldr	r2, [r2, #16]
 800b7dc:	4311      	orrs	r1, r2
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	6952      	ldr	r2, [r2, #20]
 800b7e2:	4311      	orrs	r1, r2
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	6992      	ldr	r2, [r2, #24]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	ffff8000 	.word	0xffff8000

0800b804 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d128      	bne.n	800b868 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	1e59      	subs	r1, r3, #1
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	3b01      	subs	r3, #1
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	4319      	orrs	r1, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	3b01      	subs	r3, #1
 800b834:	021b      	lsls	r3, r3, #8
 800b836:	4319      	orrs	r1, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	031b      	lsls	r3, r3, #12
 800b840:	4319      	orrs	r1, r3
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	3b01      	subs	r3, #1
 800b848:	041b      	lsls	r3, r3, #16
 800b84a:	4319      	orrs	r1, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	695b      	ldr	r3, [r3, #20]
 800b850:	3b01      	subs	r3, #1
 800b852:	051b      	lsls	r3, r3, #20
 800b854:	4319      	orrs	r1, r3
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	061b      	lsls	r3, r3, #24
 800b85e:	430b      	orrs	r3, r1
 800b860:	431a      	orrs	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	609a      	str	r2, [r3, #8]
 800b866:	e02d      	b.n	800b8c4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	4b19      	ldr	r3, [pc, #100]	@ (800b8d4 <FMC_SDRAM_Timing_Init+0xd0>)
 800b86e:	4013      	ands	r3, r2
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	68d2      	ldr	r2, [r2, #12]
 800b874:	3a01      	subs	r2, #1
 800b876:	0311      	lsls	r1, r2, #12
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	6952      	ldr	r2, [r2, #20]
 800b87c:	3a01      	subs	r2, #1
 800b87e:	0512      	lsls	r2, r2, #20
 800b880:	430a      	orrs	r2, r1
 800b882:	431a      	orrs	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	1e59      	subs	r1, r3, #1
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	011b      	lsls	r3, r3, #4
 800b89e:	4319      	orrs	r1, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	4319      	orrs	r1, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	041b      	lsls	r3, r3, #16
 800b8b2:	4319      	orrs	r1, r3
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	061b      	lsls	r3, r3, #24
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	ff0f0fff 	.word	0xff0f0fff

0800b8d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8d8:	b084      	sub	sp, #16
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	f107 001c 	add.w	r0, r7, #28
 800b8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d121      	bne.n	800b936 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68da      	ldr	r2, [r3, #12]
 800b902:	4b2c      	ldr	r3, [pc, #176]	@ (800b9b4 <USB_CoreInit+0xdc>)
 800b904:	4013      	ands	r3, r2
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b916:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d105      	bne.n	800b92a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 faaa 	bl	800be84 <USB_CoreReset>
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]
 800b934:	e01b      	b.n	800b96e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fa9e 	bl	800be84 <USB_CoreReset>
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b94c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b958:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	639a      	str	r2, [r3, #56]	@ 0x38
 800b960:	e005      	b.n	800b96e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b966:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b96e:	7fbb      	ldrb	r3, [r7, #30]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d116      	bne.n	800b9a2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b978:	b29a      	uxth	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b982:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b8 <USB_CoreInit+0xe0>)
 800b984:	4313      	orrs	r3, r2
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	f043 0206 	orr.w	r2, r3, #6
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	f043 0220 	orr.w	r2, r3, #32
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9ae:	b004      	add	sp, #16
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	ffbdffbf 	.word	0xffbdffbf
 800b9b8:	03ee0000 	.word	0x03ee0000

0800b9bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	f023 0201 	bic.w	r2, r3, #1
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9fa:	78fb      	ldrb	r3, [r7, #3]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d115      	bne.n	800ba2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba0c:	200a      	movs	r0, #10
 800ba0e:	f7f7 f8cb 	bl	8002ba8 <HAL_Delay>
      ms += 10U;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	330a      	adds	r3, #10
 800ba16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa25 	bl	800be68 <USB_GetMode>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d01e      	beq.n	800ba62 <USB_SetCurrentMode+0x84>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba28:	d9f0      	bls.n	800ba0c <USB_SetCurrentMode+0x2e>
 800ba2a:	e01a      	b.n	800ba62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d115      	bne.n	800ba5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba3e:	200a      	movs	r0, #10
 800ba40:	f7f7 f8b2 	bl	8002ba8 <HAL_Delay>
      ms += 10U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	330a      	adds	r3, #10
 800ba48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fa0c 	bl	800be68 <USB_GetMode>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d005      	beq.n	800ba62 <USB_SetCurrentMode+0x84>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba5a:	d9f0      	bls.n	800ba3e <USB_SetCurrentMode+0x60>
 800ba5c:	e001      	b.n	800ba62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e005      	b.n	800ba6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba66:	d101      	bne.n	800ba6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba78:	b084      	sub	sp, #16
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b086      	sub	sp, #24
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ba86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba92:	2300      	movs	r3, #0
 800ba94:	613b      	str	r3, [r7, #16]
 800ba96:	e009      	b.n	800baac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	3340      	adds	r3, #64	@ 0x40
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	2200      	movs	r2, #0
 800baa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	3301      	adds	r3, #1
 800baaa:	613b      	str	r3, [r7, #16]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	2b0e      	cmp	r3, #14
 800bab0:	d9f2      	bls.n	800ba98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bab2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d11c      	bne.n	800baf4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bac8:	f043 0302 	orr.w	r3, r3, #2
 800bacc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bad2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	e005      	b.n	800bb00 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb06:	461a      	mov	r2, r3
 800bb08:	2300      	movs	r3, #0
 800bb0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d10d      	bne.n	800bb30 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d104      	bne.n	800bb26 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f968 	bl	800bdf4 <USB_SetDevSpeed>
 800bb24:	e008      	b.n	800bb38 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb26:	2101      	movs	r1, #1
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f963 	bl	800bdf4 <USB_SetDevSpeed>
 800bb2e:	e003      	b.n	800bb38 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb30:	2103      	movs	r1, #3
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f95e 	bl	800bdf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb38:	2110      	movs	r1, #16
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f8fa 	bl	800bd34 <USB_FlushTxFifo>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f924 	bl	800bd98 <USB_FlushRxFifo>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb60:	461a      	mov	r2, r3
 800bb62:	2300      	movs	r3, #0
 800bb64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb78:	461a      	mov	r2, r3
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb7e:	2300      	movs	r3, #0
 800bb80:	613b      	str	r3, [r7, #16]
 800bb82:	e043      	b.n	800bc0c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb9a:	d118      	bne.n	800bbce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	e013      	b.n	800bbe0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	e008      	b.n	800bbe0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbda:	461a      	mov	r2, r3
 800bbdc:	2300      	movs	r3, #0
 800bbde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbec:	461a      	mov	r2, r3
 800bbee:	2300      	movs	r3, #0
 800bbf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	613b      	str	r3, [r7, #16]
 800bc0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc10:	461a      	mov	r2, r3
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d3b5      	bcc.n	800bb84 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc18:	2300      	movs	r3, #0
 800bc1a:	613b      	str	r3, [r7, #16]
 800bc1c:	e043      	b.n	800bca6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	015a      	lsls	r2, r3, #5
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4413      	add	r3, r2
 800bc26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc34:	d118      	bne.n	800bc68 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc48:	461a      	mov	r2, r3
 800bc4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	e013      	b.n	800bc7a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc64:	6013      	str	r3, [r2, #0]
 800bc66:	e008      	b.n	800bc7a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc74:	461a      	mov	r2, r3
 800bc76:	2300      	movs	r3, #0
 800bc78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc86:	461a      	mov	r2, r3
 800bc88:	2300      	movs	r3, #0
 800bc8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	3301      	adds	r3, #1
 800bca4:	613b      	str	r3, [r7, #16]
 800bca6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bcaa:	461a      	mov	r2, r3
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d3b5      	bcc.n	800bc1e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bcd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bcd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	f043 0210 	orr.w	r2, r3, #16
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	699a      	ldr	r2, [r3, #24]
 800bcec:	4b0f      	ldr	r3, [pc, #60]	@ (800bd2c <USB_DevInit+0x2b4>)
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bcf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d005      	beq.n	800bd08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	f043 0208 	orr.w	r2, r3, #8
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d105      	bne.n	800bd1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	699a      	ldr	r2, [r3, #24]
 800bd14:	4b06      	ldr	r3, [pc, #24]	@ (800bd30 <USB_DevInit+0x2b8>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd28:	b004      	add	sp, #16
 800bd2a:	4770      	bx	lr
 800bd2c:	803c3800 	.word	0x803c3800
 800bd30:	40000004 	.word	0x40000004

0800bd34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3301      	adds	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd4e:	d901      	bls.n	800bd54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd50:	2303      	movs	r3, #3
 800bd52:	e01b      	b.n	800bd8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	daf2      	bge.n	800bd42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	019b      	lsls	r3, r3, #6
 800bd64:	f043 0220 	orr.w	r2, r3, #32
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd78:	d901      	bls.n	800bd7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e006      	b.n	800bd8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b20      	cmp	r3, #32
 800bd88:	d0f0      	beq.n	800bd6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bda0:	2300      	movs	r3, #0
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3301      	adds	r3, #1
 800bda8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdb0:	d901      	bls.n	800bdb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e018      	b.n	800bde8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	daf2      	bge.n	800bda4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2210      	movs	r2, #16
 800bdc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdd4:	d901      	bls.n	800bdda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e006      	b.n	800bde8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0310 	and.w	r3, r3, #16
 800bde2:	2b10      	cmp	r3, #16
 800bde4:	d0f0      	beq.n	800bdc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	78fb      	ldrb	r3, [r7, #3]
 800be0e:	68f9      	ldr	r1, [r7, #12]
 800be10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be14:	4313      	orrs	r3, r2
 800be16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be40:	f023 0303 	bic.w	r3, r3, #3
 800be44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be54:	f043 0302 	orr.w	r3, r3, #2
 800be58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	f003 0301 	and.w	r3, r3, #1
}
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
 800be94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be9c:	d901      	bls.n	800bea2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e01b      	b.n	800beda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	daf2      	bge.n	800be90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	f043 0201 	orr.w	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bec6:	d901      	bls.n	800becc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e006      	b.n	800beda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d0f0      	beq.n	800beba <USB_CoreReset+0x36>

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <memset>:
 800bee6:	4402      	add	r2, r0
 800bee8:	4603      	mov	r3, r0
 800beea:	4293      	cmp	r3, r2
 800beec:	d100      	bne.n	800bef0 <memset+0xa>
 800beee:	4770      	bx	lr
 800bef0:	f803 1b01 	strb.w	r1, [r3], #1
 800bef4:	e7f9      	b.n	800beea <memset+0x4>
	...

0800bef8 <__libc_init_array>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	4d0d      	ldr	r5, [pc, #52]	@ (800bf30 <__libc_init_array+0x38>)
 800befc:	4c0d      	ldr	r4, [pc, #52]	@ (800bf34 <__libc_init_array+0x3c>)
 800befe:	1b64      	subs	r4, r4, r5
 800bf00:	10a4      	asrs	r4, r4, #2
 800bf02:	2600      	movs	r6, #0
 800bf04:	42a6      	cmp	r6, r4
 800bf06:	d109      	bne.n	800bf1c <__libc_init_array+0x24>
 800bf08:	4d0b      	ldr	r5, [pc, #44]	@ (800bf38 <__libc_init_array+0x40>)
 800bf0a:	4c0c      	ldr	r4, [pc, #48]	@ (800bf3c <__libc_init_array+0x44>)
 800bf0c:	f000 f826 	bl	800bf5c <_init>
 800bf10:	1b64      	subs	r4, r4, r5
 800bf12:	10a4      	asrs	r4, r4, #2
 800bf14:	2600      	movs	r6, #0
 800bf16:	42a6      	cmp	r6, r4
 800bf18:	d105      	bne.n	800bf26 <__libc_init_array+0x2e>
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
 800bf1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf20:	4798      	blx	r3
 800bf22:	3601      	adds	r6, #1
 800bf24:	e7ee      	b.n	800bf04 <__libc_init_array+0xc>
 800bf26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf2a:	4798      	blx	r3
 800bf2c:	3601      	adds	r6, #1
 800bf2e:	e7f2      	b.n	800bf16 <__libc_init_array+0x1e>
 800bf30:	0800c000 	.word	0x0800c000
 800bf34:	0800c000 	.word	0x0800c000
 800bf38:	0800c000 	.word	0x0800c000
 800bf3c:	0800c004 	.word	0x0800c004

0800bf40 <memcpy>:
 800bf40:	440a      	add	r2, r1
 800bf42:	4291      	cmp	r1, r2
 800bf44:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bf48:	d100      	bne.n	800bf4c <memcpy+0xc>
 800bf4a:	4770      	bx	lr
 800bf4c:	b510      	push	{r4, lr}
 800bf4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf56:	4291      	cmp	r1, r2
 800bf58:	d1f9      	bne.n	800bf4e <memcpy+0xe>
 800bf5a:	bd10      	pop	{r4, pc}

0800bf5c <_init>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	bf00      	nop
 800bf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf62:	bc08      	pop	{r3}
 800bf64:	469e      	mov	lr, r3
 800bf66:	4770      	bx	lr

0800bf68 <_fini>:
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6a:	bf00      	nop
 800bf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6e:	bc08      	pop	{r3}
 800bf70:	469e      	mov	lr, r3
 800bf72:	4770      	bx	lr
